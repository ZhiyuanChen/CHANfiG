{"config":{"lang":["en","zh"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"CHANfiG","text":""},{"location":"#introduction","title":"Introduction","text":"<p>CHANfiG aims to make your configuration easier.</p> <p>There are tons of configurable parameters in training a Machine Learning model. To configure all these parameters, researchers usually need to write gigantic config files, sometimes even thousands of lines. Most of the configs are just replicates of the default arguments of certain functions, resulting in many unnecessary declarations. It is also very hard to alter the configurations. One needs to navigate and open the right configuration file, make changes, save and exit. These had wasted an uncountable<sup>1</sup> amount of precious time and are no doubt a crime. Using <code>argparse</code> could relieve the burdens to some extent. However, it takes a lot of work to make it compatible with existing config files, and its lack of nesting limits its potential.</p> <p>CHANfiG would like to make a change.</p> <p>You just type the alternations in the command line, and leave everything else to CHANfiG.</p> <p>CHANfiG is highly inspired by YACS. Different from the paradigm of YACS( <code>your code + a YACS config for experiment E (+ external dependencies + hardware + other nuisance terms ...) = reproducible experiment E</code>), The paradigm of CHANfiG is:</p> <p><code>your code + command line arguments (+ optional CHANfiG config + external dependencies + hardware + other nuisance terms ...) = reproducible experiment E (+ optional CHANfiG config for experiment E)</code></p>"},{"location":"#components","title":"Components","text":"<p>A Config is basically a nested dict structure.</p> <p>However, the default Python dict is hard to manipulate.</p> <p>The only way to access a dict member is through <code>dict['name']</code>, which is obviously extremely complex. Even worse, if the dict is nested like a config, member access could be something like <code>dict['parent']['children']['name']</code>.</p> <p>Enough is enough, it is time to make a change.</p> <p>We need attribute-style access, and we need it now. <code>dict.name</code> and <code>dict.parent.children.name</code> is all you need.</p> <p>Although there have been some other works that achieve a similar functionality of attribute-style access to dict members. Their Config object either uses a separate dict to store information from attribute-style access (EasyDict), which may lead to inconsistency between attribute-style access and dict-style access; or reuse the existing <code>__dict__</code> and redirect dict-style access (ml_collections), which may result in confliction between attributes and members of Config.</p> <p>To overcome the aforementioned limitations, we inherit the Python built-in <code>dict</code> to create <code>FlatDict</code>, <code>DefaultDict</code>, <code>NestedDict</code>, <code>Config</code>, and <code>Registry</code>. We also introduce <code>Variable</code> to allow sharing a value across multiple places, and <code>ConfigParser</code> to parse command line arguments.</p>"},{"location":"#flatdict","title":"FlatDict","text":"<p><code>FlatDict</code> improves the default <code>dict</code> in 3 aspects.</p>"},{"location":"#dict-operations","title":"Dict Operations","text":"<p><code>FlatDict</code> supports variable interpolation. Set a member\u2019s value to another member\u2019s name wrapped in <code>${}</code>, then call <code>interpolate</code> method. The value of this member will be automatically replaced with the value of another member.</p> <p><code>dict</code> in Python is ordered since Python 3.7, but there isn\u2019t a built-in method to help you sort a <code>dict</code>. <code>FlatDict</code> supports <code>sort</code> to help you manage your dict.</p> <p><code>FlatDict</code> incorporates a <code>merge</code> method that allows you to merge a <code>Mapping</code>, an <code>Iterable</code>, or a path to the <code>FlatDict</code>. Different from built-in <code>update</code>, <code>merge</code> assign values instead of replace, which makes it work better with <code>DefaultDict</code>.</p> <p>Moreover, <code>FlatDict</code> comes with <code>difference</code> and <code>intersect</code>, which makes it very easy to compare a <code>FlatDict</code> with other <code>Mapping</code>, <code>Iterable</code>, or a path.</p>"},{"location":"#dataclass-operations","title":"Dataclass Operations","text":"<p><code>FlatDict</code> is compatible with PEP 557, and will inspect the type annotations in subclasses and make them as members of the <code>FlatDict</code>. It also features <code>validate</code> method which will be called internally to validate the type of the members. Even better, <code>FlatDict</code> will automatically convert value to the type of the annotation when setting the member.</p>"},{"location":"#ml-operations","title":"ML Operations","text":"<p><code>FlatDict</code> supports <code>to</code> method similar to PyTorch Tensor. You can simply convert all member values of <code>FlatDict</code> to a certain type or pass to a device in the same way.</p> <p><code>FlatDict</code> also integrates <code>cpu</code>, <code>gpu</code> (<code>cuda</code>), and <code>tpu</code> (<code>xla</code>) methods for easier access.</p>"},{"location":"#io-operations","title":"IO Operations","text":"<p><code>FlatDict</code> provides <code>json</code>, <code>jsons</code>, <code>yaml</code> and <code>yamls</code> methods to dump <code>FlatDict</code> to a file or string. It also provides <code>from_json</code>, <code>from_jsons</code>, <code>from_yaml</code> and <code>from_yamls</code> methods to build a <code>FlatDict</code> from a string or file.</p> <p><code>FlatDict</code> also includes <code>dump</code> and <code>load</code> methods which determine the type by their extension and dump/load <code>FlatDict</code> to/from a file.</p>"},{"location":"#defaultdict","title":"DefaultDict","text":"<p>To facilitate the needs of default values, we incorporate <code>DefaultDict</code> which accepts <code>default_factory</code> and works just like a <code>collections.defaultdict</code>.</p>"},{"location":"#nesteddict","title":"NestedDict","text":"<p>Since most Configs are in a nested structure, we further propose a <code>NestedDict</code>.</p> <p>Based on <code>DefaultDict</code>, <code>NestedDict</code> provides <code>all_keys</code>, <code>all_values</code>, and <code>all_items</code> methods to allow iterating over the whole nested structure at once.</p> <p><code>NestedDict</code> also comes with <code>apply</code> and <code>apply_</code> methods, which make it easier to manipulate the nested structure.</p>"},{"location":"#config","title":"Config","text":"<p><code>Config</code> extends the functionality by supporting <code>freeze</code> and <code>defrost</code>, and by adding a built-in <code>ConfigParser</code> to pare command line arguments.</p> <p>Note that <code>Config</code> also has <code>default_factory=Config()</code> by default for convenience.</p>"},{"location":"#registry","title":"Registry","text":"<p><code>Registry</code> extends the <code>NestedDict</code> and supports <code>register</code>, <code>lookup</code>, and <code>build</code> to help you register constructors and build objects from a <code>Config</code>.</p> <p><code>ConfigRegistry</code> is a subclass of <code>Registry</code> that is specifically designed for building objects from a <code>Config</code> or a <code>dataclass</code>. Just specify the <code>key</code> when creating the registry and pass <code>config</code> to the <code>build</code> method, and you will get the object you want.</p>"},{"location":"#variable","title":"Variable","text":"<p>Have one value for multiple names at multiple places? We got you covered.</p> <p>Just wrap the value with <code>Variable</code>, and one alteration will be reflected everywhere.</p> <p><code>Variable</code> supports <code>type</code>, <code>choices</code>, <code>validator</code>, and <code>required</code> to ensure the correctness of the value.</p> <p>To make it even easier, <code>Variable</code> also support <code>help</code> to provide a description when using <code>ConfigParser</code>.</p>"},{"location":"#configparser","title":"ConfigParser","text":"<p><code>ConfigParser</code> extends <code>ArgumentParser</code> and provides <code>parse</code> and <code>parse_config</code> to parse command line arguments.</p>"},{"location":"#usage","title":"Usage","text":"<p>CHANfiG has great backward compatibility with previous configs.</p> <p>No matter if your old config is json or yaml, you could directly read from them.</p> <p>And if you are using yacs, just replace <code>CfgNode</code> with <code>Config</code> and enjoy all the additional benefits that CHANfiG provides.</p> <p>Moreover, if you find a name in the config is too long for command-line, you could simply call <code>self.add_argument</code> with proper <code>dest</code> to use a shorter name in command-line, as you do with <code>argparse</code>.</p> Python<pre><code># CHANfiG\n# Copyright (C) 2022-Present, DanLing Team\n\n# This file is part of CHANfiG.\n\n# CHANfiG is free software: you can redistribute it and/or modify\n# it under the terms of the following licenses:\n# - The Unlicense\n# - GNU Affero General Public License v3.0 or later\n# - GNU General Public License v2.0 or later\n# - BSD 4-Clause \"Original\" or \"Old\" License\n# - MIT License\n# - Apache License 2.0\n\n# CHANfiG is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the LICENSE file for more details.\n\nimport os\nfrom typing import Any\n\nfrom chanfig import Config, Variable\n\n\nclass DataloaderConfig(Config):\n    # You must set the type annotation, or they will not be accessible as a CHANfiG member\n    batch_size: int = 64\n    num_workers: int = 4\n    pin_memory: bool = True\n    # If no type annotation is suitable, use `Any`\n    unknown: Any = None\n    # Attribute without type annotation are used to maintain the internal state of CHANfiG\n    attribute = \"None\"\n\n\nclass TestConfig(Config):\n    name: str = \"CHANfiG\"\n    seed: int = 1016\n    activation: str = \"GELU\"\n    dataloader: DataloaderConfig = DataloaderConfig()\n\n    def __init__(self):\n        super().__init__()\n        dropout = Variable(0.1)\n        self.optim.lr = 1e-3\n        self.model.encoder.num_layers = 6\n        self.model.decoder.num_layers = 6\n        self.model.dropout = dropout\n        self.model.encoder.dropout = dropout\n        self.model.decoder.dropout = dropout\n        self.add_argument(\"--batch_size\", dest=\"data.batch_size\")\n        self.add_argument(\"--lr\", dest=\"optim.lr\")\n\n    def post(self):\n        self.id = f\"{self.name}_{self.seed}\"\n\n\nif __name__ == \"__main__\":\n    # config = Config.load('config.yaml')  # read config from a yaml\n    # config = Config.load('config.json')  # read config from a json\n    existing_config = {\"model.encoder.num_layers\": 8}\n    config = TestConfig()\n    config.merge(existing_config)\n    # config.merge('dataset.yaml')  # merge config from a yaml\n    # config.merge('dataset.json', overwrite=False)  # merge config from a json\n    config = config.parse()\n    config.model.decoder.num_layers = 8\n    config.freeze()\n    print(config)\n    # main(config)\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n    print(dir_path)\n    config.save(os.path.join(dir_path, \"config.yaml\"))  # save config to a yaml\n    config.save(os.path.join(dir_path, \"config.json\"))  # save config to a json\n</code></pre> <p>All you need to do is just run a line:</p> Bash<pre><code>python main.py --model.encoder.num_layers 8 --model.dropout=0.2 --lr 5e-3\n</code></pre> <p>You could also load a default configure file and make changes based on it:</p> <p>Note, you must specify <code>config.parse(default_config='config')</code> to correctly load the default config.</p> Bash<pre><code>python main.py --config meow.yaml --model.encoder.num_layers 8 --model.dropout=0.2 --lr 5e-3\n</code></pre> <p>If you have made it dump current configurations, this should be in the written file:</p> yamljson YAML<pre><code>activation: GELU\ndataloader:\n  batch_size: 64\n  num_workers: 4\n  pin_memory: true\nid: CHANfiG_1016\nmodel:\n  decoder:\n    dropout: 0.1\n    num_layers: 8\n  dropout: 0.1\n  encoder:\n    dropout: 0.1\n    num_layers: 8\nname: CHANfiG\noptim:\n  lr: 0.001\nseed: 1016\n</code></pre> JSON<pre><code>{\n  \"name\": \"CHANfiG\",\n  \"seed\": 1016,\n  \"activation\": \"GELU\",\n  \"optim\": {\n    \"lr\": 0.001\n  },\n  \"dataloader\": {\n    \"batch_size\": 64,\n    \"num_workers\": 4,\n    \"pin_memory\": true\n  },\n  \"model\": {\n    \"encoder\": {\n      \"num_layers\": 8,\n      \"dropout\": 0.1\n    },\n    \"decoder\": {\n      \"num_layers\": 8,\n      \"dropout\": 0.1\n    },\n    \"dropout\": 0.1\n  },\n  \"id\": \"CHANfiG_1016\"\n}\n</code></pre> <p>Define the default arguments in function, put alterations in CLI, and leave the rest to CHANfiG.</p>"},{"location":"#installation","title":"Installation","text":"Install the most recent stable version on pypiInstall the latest version from source Bash<pre><code>pip install chanfig\n</code></pre> Bash<pre><code>pip install git+https://github.com/ZhiyuanChen/CHANfiG\n</code></pre> <p>It works the way it should have worked.</p>"},{"location":"#license","title":"License","text":"<p>CHANfiG is multi-licensed under the following licenses:</p> The UnlicenseGNU Affero General Public License v3.0 or laterGNU General Public License v2.0 or laterBSD 4-Clause \u201cOriginal\u201d or \u201cOld\u201d LicenseMIT LicenseApache License 2.0 Text Only<pre><code>This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to &lt;https://unlicense.org&gt;\n</code></pre> Text Only<pre><code>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> Text Only<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  &lt;signature of Ty Coon&gt;, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n</code></pre> Text Only<pre><code>BSD 4-Clause License\n\nCopyright (c) 2022-Present, CHANfiG Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. All advertising materials mentioning features or use of this software must\n   display the following acknowledgement:\n     This product includes software developed by [project].\n\n4. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\nEVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre> Text Only<pre><code>MIT License\n\nCopyright (c) 2022-Present, CHANfiG Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> Text Only<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre> <p>You can choose any (one or more) of these licenses if you use this work.</p> <p><code>SPDX-License-Identifier: Unlicense OR AGPL-3.0-or-later OR GPL-2.0-or-later OR BSD-4-Clause OR MIT OR Apache-2.0</code></p> <ol> <li> <p>fun fact: time is always uncountable.\u00a0\u21a9</p> </li> </ol>"},{"location":"config/","title":"Config","text":""},{"location":"config/#chanfig.Config","title":"chanfig.Config","text":"<p>               Bases: <code>NestedDict</code></p> <p><code>Config</code> is an extension of <code>NestedDict</code>.</p> <p>The differences between <code>Config</code> and <code>NestedDict</code> lies in 3 aspects:</p> <ol> <li><code>Config</code> has <code>default_factory</code> set to <code>Config</code> and <code>convert_mapping</code> set to <code>True</code> by default.</li> <li><code>Config</code> has a <code>frozen</code> attribute, which can be toggled with <code>freeze</code>(<code>lock</code>) &amp; <code>defrost</code>(<code>unlock</code>)     or temporarily changed with <code>locked</code> &amp; <code>unlocked</code>.</li> <li><code>Config</code> has a <code>ConfigParser</code> built-in, and supports <code>add_argument</code> and <code>parse</code>.</li> </ol> <p>Config also features a <code>post</code> method and a <code>boot</code> method to support lazy-initilisation. This is useful when you want to perform some post-processing on the config. For example, some values may be a combination of other values, and you may define them in <code>post</code>.</p> <p><code>boot</code> is introduced to call all <code>post</code> methods in the nested structure of <code>Config</code> object. By default, <code>boot</code> will be called to after <code>Config</code> is parsed.</p> <p>You could also manually call <code>boot</code> if you you don\u2019t parse command-line arguments.</p> Notes <p>Since <code>Config</code> has <code>default_factory</code> set to <code>Config</code>, accessing anything that does not exist will create a new empty Config sub-attribute.</p> <p>A frozen <code>Config</code> does not have this behaviour and will raises <code>KeyError</code> when accessing anything that does not exist.</p> <p>It is recommended to call <code>config.freeze()</code> or <code>config.to(NestedDict)</code> to avoid this behaviour.</p> <p>Attributes:</p> Name Type Description <code>parser</code> <code>ConfigParser</code> <p>Parser for command-line arguments.</p> <code>frozen</code> <code>bool</code> <p>If <code>True</code>, the config is frozen and cannot be altered.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(**{\"f.n\": \"chang\"})\n&gt;&gt;&gt; c.i.d = 1016\n&gt;&gt;&gt; c.i.d\n1016\n&gt;&gt;&gt; c.d.i\nConfig(&lt;class 'chanfig.config.Config'&gt;, )\n&gt;&gt;&gt; c.freeze().dict()\n{'f': {'n': 'chang'}, 'i': {'d': 1016}, 'd': {'i': {}}}\n&gt;&gt;&gt; c.d.i = 1016\nTraceback (most recent call last):\nValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n&gt;&gt;&gt; c.d.e\nTraceback (most recent call last):\nAttributeError: 'Config' object has no attribute 'e'\n&gt;&gt;&gt; with c.unlocked():\n...     del c.d\n&gt;&gt;&gt; c.dict()\n{'f': {'n': 'chang'}, 'i': {'d': 1016}}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>class Config(NestedDict):\n    r\"\"\"\n    `Config` is an extension of `NestedDict`.\n\n    The differences between `Config` and `NestedDict` lies in 3 aspects:\n\n    1. `Config` has `default_factory` set to `Config` and `convert_mapping` set to `True` by default.\n    2. `Config` has a `frozen` attribute, which can be toggled with `freeze`(`lock`) &amp; `defrost`(`unlock`)\n        or temporarily changed with `locked` &amp; `unlocked`.\n    3. `Config` has a `ConfigParser` built-in, and supports `add_argument` and `parse`.\n\n    Config also features a `post` method and a `boot` method to support lazy-initilisation.\n    This is useful when you want to perform some post-processing on the config.\n    For example, some values may be a combination of other values, and you may define them in `post`.\n\n    `boot` is introduced to call all `post` methods in the nested structure of `Config` object.\n    By default, `boot` will be called to after `Config` is parsed.\n\n    You could also manually call `boot` if you you don't parse command-line arguments.\n\n    Notes:\n        Since `Config` has `default_factory` set to `Config`,\n        accessing anything that does not exist will create a new empty Config sub-attribute.\n\n        A **frozen** `Config` does not have this behaviour and\n        will raises `KeyError` when accessing anything that does not exist.\n\n        It is recommended to call `config.freeze()` or `config.to(NestedDict)` to avoid this behaviour.\n\n    Attributes:\n        parser (ConfigParser): Parser for command-line arguments.\n        frozen (bool): If `True`, the config is frozen and cannot be altered.\n\n    Examples:\n        &gt;&gt;&gt; c = Config(**{\"f.n\": \"chang\"})\n        &gt;&gt;&gt; c.i.d = 1016\n        &gt;&gt;&gt; c.i.d\n        1016\n        &gt;&gt;&gt; c.d.i\n        Config(&lt;class 'chanfig.config.Config'&gt;, )\n        &gt;&gt;&gt; c.freeze().dict()\n        {'f': {'n': 'chang'}, 'i': {'d': 1016}, 'd': {'i': {}}}\n        &gt;&gt;&gt; c.d.i = 1016\n        Traceback (most recent call last):\n        ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n        &gt;&gt;&gt; c.d.e\n        Traceback (most recent call last):\n        AttributeError: 'Config' object has no attribute 'e'\n        &gt;&gt;&gt; with c.unlocked():\n        ...     del c.d\n        &gt;&gt;&gt; c.dict()\n        {'f': {'n': 'chang'}, 'i': {'d': 1016}}\n    \"\"\"\n\n    parser = None  # ConfigParser, Python 3.7 does not support forward reference\n    frozen = False\n\n    def __init__(self, *args: Any, default_factory: Callable | NULL = Null, **kwargs: Any):\n        if default_factory is Null:\n            default_factory = Config\n        self.setattr(\"frozen\", False)\n        super().__init__(*args, default_factory=default_factory, **kwargs)\n\n    def post(self) -&gt; Self | None:\n        r\"\"\"\n        Post process of `Config`.\n\n        Some `Config` may need to do some post process after `Config` is initialised.\n        `post` is provided for this lazy-initialisation purpose.\n\n        By default, `post` calls `interpolate` to perform variable interpolation.\n\n        Note that you should always call `boot` to apply `post` rather than calling `post` directly,\n        as `boot` recursively call `post` on sub-configs.\n\n        See Also:\n            [`boot`][chanfig.Config.boot]: Apply `post` recursively.\n\n        Examples:\n            &gt;&gt;&gt; c = Config()\n            &gt;&gt;&gt; c.dne\n            Config(&lt;class 'chanfig.config.Config'&gt;, )\n            &gt;&gt;&gt; c.boot()\n            Config(\n              ('dne'): Config()\n            )\n            &gt;&gt;&gt; c.dne2\n            Traceback (most recent call last):\n            AttributeError: 'Config' object has no attribute 'dne2'\n            &gt;&gt;&gt; class PostConfig(Config):\n            ...     def post(self):\n            ...         if isinstance(self.data, str):\n            ...             self.data = Config(feature=self.data, label=self.data)\n            ...         # should call `super().post()` in the end, otherwise, default_factory won't be cleared for `self.data`  # noqa: E501\n            ...         super().post()\n            ...         return self\n            &gt;&gt;&gt; c = PostConfig(data=\"path\")\n            &gt;&gt;&gt; c.boot()\n            PostConfig(\n              ('data'): Config(\n                ('feature'): 'path'\n                ('label'): 'path'\n              )\n            )\n        \"\"\"\n\n        self._validate(self)\n        self.apply_(lambda c: c.setattr(\"default_factory\", Null) if isinstance(c, Config) else None)\n        return self\n\n    def boot(self) -&gt; Self:\n        r\"\"\"\n        Apply `post` recursively.\n\n        Sub-config may have their own `post` method.\n        `boot` is provided to apply `post` recursively.\n\n        By default, `boot` is called after `Config` is parsed.\n        If you don't need to parse command-line arguments, you should call `boot` manually.\n\n        See Also:\n            [`post`][chanfig.Config.post]\n\n        Examples:\n            &gt;&gt;&gt; class DataConfig(Config):\n            ...     def post(self):\n            ...         if isinstance(self.path, str):\n            ...             self.path = Config(feature=self.path, label=self.path)\n            ...         return self\n            &gt;&gt;&gt; class BootConfig(Config):\n            ...     def __init__(self, *args, **kwargs):\n            ...         super().__init__(*args, **kwargs)\n            ...         self.dataset = DataConfig(path=\"path\")\n            ...     def post(self):\n            ...         super().post()\n            ...         if isinstance(self.id, str):\n            ...             self.id += \"_id\"\n            ...         return self\n            &gt;&gt;&gt; c = BootConfig(id=\"boot\")\n            &gt;&gt;&gt; c.boot()\n            BootConfig(\n              ('id'): 'boot_id'\n              ('dataset'): DataConfig(\n                ('path'): Config(\n                  ('feature'): 'path'\n                  ('label'): 'path'\n                )\n              )\n            )\n        \"\"\"\n\n        for value in self.values():\n            if isinstance(value, Config):\n                value.boot()\n                value.popattr(\"parser\", None)\n        self.post()\n        return self\n\n    def parse(\n        self,\n        args: Iterable[str] | None = None,\n        default_config: str | None = None,\n        no_default_config_action: str = \"raise\",\n        boot: bool = True,\n    ) -&gt; Self:\n        r\"\"\"\n\n        Parse command-line arguments with `ConfigParser`.\n\n        `parse` will try to parse all command-line arguments,\n        you don't need to pre-define them but typos may cause trouble.\n\n        By default, this method internally calls `Config.boot()`.\n        To disable this behaviour, set `boot` to `False`.\n\n        Args:\n            args (Iterable[str] | None, optional): Command-line arguments. Defaults to `None`.\n            default_config (str | None, optional): Path to default config file. Defaults to `None`.\n            no_default_config_action (str, optional): Action when `default_config` is not found.\n                Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n            boot (bool, optional): If `True`, call `Config.boot()` after parsing. Defaults to `True`.\n\n        See Also:\n            [`chanfig.ConfigParser.parse`][chanfig.ConfigParser.parse]: Implementation of `parse`.\n            [`parse_config`][chanfig.Config.parse_config]: Only parse valid config arguments.\n\n        Examples:\n            &gt;&gt;&gt; c = Config(a=0)\n            &gt;&gt;&gt; c.dict()\n            {'a': 0}\n            &gt;&gt;&gt; c.parse(['--a', '1', '--b', '2', '--c', '3']).dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        if self.getattr(\"parser\") is None:\n            self.setattr(\"parser\", ConfigParser())\n        self.getattr(\"parser\").parse(args, self, default_config, no_default_config_action)\n        if boot:\n            self.boot()\n        return self\n\n    def parse_config(\n        self,\n        args: Iterable[str] | None = None,\n        default_config: str | None = None,\n        no_default_config_action: str = \"raise\",\n        boot: bool = True,\n    ) -&gt; Self:\n        r\"\"\"\n\n        Parse command-line arguments with `ConfigParser`.\n\n        `parse_config` only parse command-line arguments that is in defined in `Config`.\n\n        By default, this method internally calls `Config.boot()`.\n        To disable this behaviour, set `boot` to `False`.\n\n        Args:\n            args (Iterable[str] | None, optional): Command-line arguments. Defaults to `None`.\n            default_config (str | None, optional): Path to default config file. Defaults to `None`.\n            no_default_config_action (str, optional): Action when `default_config` is not found.\n                Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n            boot (bool, optional): If `True`, call `Config.boot()` after parsing. Defaults to `True`.\n\n        See Also:\n            [`chanfig.ConfigParser.parse_config`][chanfig.ConfigParser.parse_config]: Implementation of `parse_config`.\n            [`parse`][chanfig.Config.parse]: Parse all command-line arguments.\n\n        Examples:\n            &gt;&gt;&gt; c = Config(a=0, b=0, c=0)\n            &gt;&gt;&gt; c.dict()\n            {'a': 0, 'b': 0, 'c': 0}\n            &gt;&gt;&gt; c.parse_config(['--a', '1', '--b', '2', '--c', '3']).dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        if self.getattr(\"parser\") is None:\n            self.setattr(\"parser\", ConfigParser())\n        self.getattr(\"parser\").parse_config(args, self, default_config, no_default_config_action)\n        if boot:\n            self.boot()\n        return self\n\n    def add_argument(self, *args: Any, **kwargs: Any) -&gt; None:\n        r\"\"\"\n        Add an argument to `ConfigParser`.\n\n        Note that value defined in `Config` will override the default value defined in `add_argument`.\n\n        Examples:\n            &gt;&gt;&gt; c = Config(a=0, c=1)\n            &gt;&gt;&gt; arg = c.add_argument(\"--a\", type=int, default=1)\n            &gt;&gt;&gt; arg = c.add_argument(\"--b\", type=int, default=2)\n            &gt;&gt;&gt; c.parse(['--c', '4']).dict()\n            {'a': 1, 'c': 4, 'b': 2}\n        \"\"\"\n\n        if self.getattr(\"parser\") is None:\n            self.setattr(\"parser\", ConfigParser())\n        return self.getattr(\"parser\").add_argument(*args, **kwargs)\n\n    def freeze(self, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Freeze `Config`.\n\n        Args:\n            recursive:\n\n        **Alias**:\n\n        + `lock`\n\n        Examples:\n            &gt;&gt;&gt; c = Config(**{'i.d': 1016})\n            &gt;&gt;&gt; c.getattr('frozen')\n            False\n            &gt;&gt;&gt; c.freeze(recursive=False).dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c.getattr('frozen')\n            True\n            &gt;&gt;&gt; c.i.getattr('frozen')\n            False\n            &gt;&gt;&gt; c.lock().dict()  # alias\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c.i.getattr('frozen')\n            True\n        \"\"\"\n\n        @wraps(self.freeze)\n        def freeze(config: Config) -&gt; None:\n            if isinstance(config, Config):\n                config.setattr(\"frozen\", True)\n\n        if recursive:\n            self.apply_(freeze)\n        else:\n            freeze(self)\n        return self\n\n    def lock(self, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Alias of [`freeze`][chanfig.Config.freeze].\n        \"\"\"\n        return self.freeze(recursive=recursive)\n\n    @contextmanager\n    def locked(self):\n        \"\"\"\n        Context manager which temporarily locks `Config`.\n\n        Examples:\n            &gt;&gt;&gt; c = Config()\n            &gt;&gt;&gt; with c.locked():\n            ...     c['i.d'] = 1016\n            Traceback (most recent call last):\n            ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n            &gt;&gt;&gt; c.i.d = 1016\n            &gt;&gt;&gt; c.dict()\n            {'i': {'d': 1016}}\n        \"\"\"\n\n        was_frozen = self.getattr(\"frozen\", False)\n        try:\n            self.freeze()\n            yield self\n        finally:\n            if not was_frozen:\n                self.defrost()\n\n    def defrost(self, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Defrost `Config`.\n\n        Args:\n            recursive:\n\n        **Alias**:\n\n        + `unlock`\n\n        Examples:\n            &gt;&gt;&gt; c = Config(**{'i.d': 1016})\n            &gt;&gt;&gt; c.getattr('frozen')\n            False\n            &gt;&gt;&gt; c.freeze().dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c.getattr('frozen')\n            True\n            &gt;&gt;&gt; c.defrost(recursive=False).dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c.getattr('frozen')\n            False\n            &gt;&gt;&gt; c.i.getattr('frozen')\n            True\n            &gt;&gt;&gt; c.unlock().dict()  # alias\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c.i.getattr('frozen')\n            False\n        \"\"\"\n\n        @wraps(self.defrost)\n        def defrost(config: Config) -&gt; None:\n            if isinstance(config, Config):\n                config.setattr(\"frozen\", False)\n\n        if recursive:\n            self.apply_(defrost)\n        else:\n            defrost(self)\n        return self\n\n    def unlock(self, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Alias of [`defrost`][chanfig.Config.defrost].\n        \"\"\"\n        return self.defrost(recursive=recursive)\n\n    @contextmanager\n    def unlocked(self):\n        \"\"\"\n        Context manager which temporarily unlocks `Config`.\n\n        Examples:\n            &gt;&gt;&gt; c = Config()\n            &gt;&gt;&gt; c.freeze().dict()\n            {}\n            &gt;&gt;&gt; with c.unlocked():\n            ...     c['i.d'] = 1016\n            &gt;&gt;&gt; c.defrost().dict()\n            {'i': {'d': 1016}}\n        \"\"\"\n\n        was_frozen = self.getattr(\"frozen\", False)\n        try:\n            self.defrost()\n            yield self\n        finally:\n            if was_frozen:\n                self.freeze()\n\n    def get(self, name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any:\n        r\"\"\"\n        Get value from `Config`.\n\n        Raises:\n            KeyError: If `Config` does not contain `name` and `default`/`default_factory` is not specified.\n\n        Examples:\n            &gt;&gt;&gt; d = Config(**{\"i.d\": 1016})\n            &gt;&gt;&gt; d.get('i.d')\n            1016\n            &gt;&gt;&gt; d['i.d']\n            1016\n            &gt;&gt;&gt; d.i.d\n            1016\n            &gt;&gt;&gt; d.get('f', 2)\n            2\n            &gt;&gt;&gt; d.f\n            Config(&lt;class 'chanfig.config.Config'&gt;, )\n            &gt;&gt;&gt; del d.f\n            &gt;&gt;&gt; d.freeze()\n            Config(&lt;class 'chanfig.config.Config'&gt;,\n              ('i'): Config(&lt;class 'chanfig.config.Config'&gt;,\n                ('d'): 1016\n              )\n            )\n            &gt;&gt;&gt; d.f\n            Traceback (most recent call last):\n            AttributeError: 'Config' object has no attribute 'f'\n            &gt;&gt;&gt; d[\"f.n\"]\n            Traceback (most recent call last):\n            KeyError: 'f.n'\n        \"\"\"\n\n        if not self.hasattr(\"default_factory\"):  # did not call super().__init__() in sub-class\n            self.setattr(\"default_factory\", Config)\n        if name in self or not self.getattr(\"frozen\", False):\n            return super().get(name, default, fallback)\n        raise KeyError(name)\n\n    @frozen_check\n    def set(\n        self,\n        name: Any,\n        value: Any,\n        convert_mapping: bool | None = None,\n    ) -&gt; None:\n        r\"\"\"\n        Set value of `Config`.\n\n        Args:\n            name:\n            value:\n            convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n                Defaults to self.convert_mapping.\n\n        Raises:\n            ValueError: If `Config` is frozen.\n\n        Examples:\n            &gt;&gt;&gt; c = Config()\n            &gt;&gt;&gt; c['i.d'] = 1016\n            &gt;&gt;&gt; c.i.d\n            1016\n            &gt;&gt;&gt; c.freeze().dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c['i.d'] = 1016\n            Traceback (most recent call last):\n            ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n            &gt;&gt;&gt; c.defrost().dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; c['i.d'] = 1016\n            &gt;&gt;&gt; c.i.d\n            1016\n        \"\"\"\n\n        return super().set(name, value, convert_mapping)\n\n    @frozen_check\n    def delete(self, name: Any) -&gt; None:\n        r\"\"\"\n        Delete value from `Config`.\n\n        Args:\n            name:\n\n        Examples:\n            &gt;&gt;&gt; d = Config(**{\"i.d\": 1016, \"f.n\": \"chang\"})\n            &gt;&gt;&gt; d.i.d\n            1016\n            &gt;&gt;&gt; d.f.n\n            'chang'\n            &gt;&gt;&gt; d.delete('i.d')\n            &gt;&gt;&gt; \"i.d\" in d\n            False\n            &gt;&gt;&gt; d.i.d\n            Config(&lt;class 'chanfig.config.Config'&gt;, )\n            &gt;&gt;&gt; \"i.d\" in d\n            True\n            &gt;&gt;&gt; del d.f.n\n            &gt;&gt;&gt; d.f.n\n            Config(&lt;class 'chanfig.config.Config'&gt;, )\n            &gt;&gt;&gt; del d.c\n            Traceback (most recent call last):\n            AttributeError: 'Config' object has no attribute 'c'\n        \"\"\"\n\n        super().delete(name)\n\n    @frozen_check\n    def pop(self, name: Any, default: Any = Null) -&gt; Any:\n        r\"\"\"\n        Pop value from `Config`.\n\n        Examples:\n            &gt;&gt;&gt; c = Config()\n            &gt;&gt;&gt; c['i.d'] = 1016\n            &gt;&gt;&gt; c.pop('i.d')\n            1016\n            &gt;&gt;&gt; c.pop('i.d', True)\n            True\n            &gt;&gt;&gt; c.freeze().dict()\n            {'i': {}}\n            &gt;&gt;&gt; c['i.d'] = 1016\n            Traceback (most recent call last):\n            ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n            &gt;&gt;&gt; c.defrost().dict()\n            {'i': {}}\n            &gt;&gt;&gt; c['i.d'] = 1016\n            &gt;&gt;&gt; c.pop('i.d')\n            1016\n        \"\"\"\n\n        return super().pop(name, default)\n</code></pre>"},{"location":"config/#chanfig.Config.post","title":"post","text":"Python<pre><code>post() -&gt; Self | None\n</code></pre> <p>Post process of <code>Config</code>.</p> <p>Some <code>Config</code> may need to do some post process after <code>Config</code> is initialised. <code>post</code> is provided for this lazy-initialisation purpose.</p> <p>By default, <code>post</code> calls <code>interpolate</code> to perform variable interpolation.</p> <p>Note that you should always call <code>boot</code> to apply <code>post</code> rather than calling <code>post</code> directly, as <code>boot</code> recursively call <code>post</code> on sub-configs.</p> See Also <p><code>boot</code>: Apply <code>post</code> recursively.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.dne\nConfig(&lt;class 'chanfig.config.Config'&gt;, )\n&gt;&gt;&gt; c.boot()\nConfig(\n  ('dne'): Config()\n)\n&gt;&gt;&gt; c.dne2\nTraceback (most recent call last):\nAttributeError: 'Config' object has no attribute 'dne2'\n&gt;&gt;&gt; class PostConfig(Config):\n...     def post(self):\n...         if isinstance(self.data, str):\n...             self.data = Config(feature=self.data, label=self.data)\n...         # should call `super().post()` in the end, otherwise, default_factory won't be cleared for `self.data`  # noqa: E501\n...         super().post()\n...         return self\n&gt;&gt;&gt; c = PostConfig(data=\"path\")\n&gt;&gt;&gt; c.boot()\nPostConfig(\n  ('data'): Config(\n    ('feature'): 'path'\n    ('label'): 'path'\n  )\n)\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def post(self) -&gt; Self | None:\n    r\"\"\"\n    Post process of `Config`.\n\n    Some `Config` may need to do some post process after `Config` is initialised.\n    `post` is provided for this lazy-initialisation purpose.\n\n    By default, `post` calls `interpolate` to perform variable interpolation.\n\n    Note that you should always call `boot` to apply `post` rather than calling `post` directly,\n    as `boot` recursively call `post` on sub-configs.\n\n    See Also:\n        [`boot`][chanfig.Config.boot]: Apply `post` recursively.\n\n    Examples:\n        &gt;&gt;&gt; c = Config()\n        &gt;&gt;&gt; c.dne\n        Config(&lt;class 'chanfig.config.Config'&gt;, )\n        &gt;&gt;&gt; c.boot()\n        Config(\n          ('dne'): Config()\n        )\n        &gt;&gt;&gt; c.dne2\n        Traceback (most recent call last):\n        AttributeError: 'Config' object has no attribute 'dne2'\n        &gt;&gt;&gt; class PostConfig(Config):\n        ...     def post(self):\n        ...         if isinstance(self.data, str):\n        ...             self.data = Config(feature=self.data, label=self.data)\n        ...         # should call `super().post()` in the end, otherwise, default_factory won't be cleared for `self.data`  # noqa: E501\n        ...         super().post()\n        ...         return self\n        &gt;&gt;&gt; c = PostConfig(data=\"path\")\n        &gt;&gt;&gt; c.boot()\n        PostConfig(\n          ('data'): Config(\n            ('feature'): 'path'\n            ('label'): 'path'\n          )\n        )\n    \"\"\"\n\n    self._validate(self)\n    self.apply_(lambda c: c.setattr(\"default_factory\", Null) if isinstance(c, Config) else None)\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.boot","title":"boot","text":"Python<pre><code>boot() -&gt; Self\n</code></pre> <p>Apply <code>post</code> recursively.</p> <p>Sub-config may have their own <code>post</code> method. <code>boot</code> is provided to apply <code>post</code> recursively.</p> <p>By default, <code>boot</code> is called after <code>Config</code> is parsed. If you don\u2019t need to parse command-line arguments, you should call <code>boot</code> manually.</p> See Also <p><code>post</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; class DataConfig(Config):\n...     def post(self):\n...         if isinstance(self.path, str):\n...             self.path = Config(feature=self.path, label=self.path)\n...         return self\n&gt;&gt;&gt; class BootConfig(Config):\n...     def __init__(self, *args, **kwargs):\n...         super().__init__(*args, **kwargs)\n...         self.dataset = DataConfig(path=\"path\")\n...     def post(self):\n...         super().post()\n...         if isinstance(self.id, str):\n...             self.id += \"_id\"\n...         return self\n&gt;&gt;&gt; c = BootConfig(id=\"boot\")\n&gt;&gt;&gt; c.boot()\nBootConfig(\n  ('id'): 'boot_id'\n  ('dataset'): DataConfig(\n    ('path'): Config(\n      ('feature'): 'path'\n      ('label'): 'path'\n    )\n  )\n)\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def boot(self) -&gt; Self:\n    r\"\"\"\n    Apply `post` recursively.\n\n    Sub-config may have their own `post` method.\n    `boot` is provided to apply `post` recursively.\n\n    By default, `boot` is called after `Config` is parsed.\n    If you don't need to parse command-line arguments, you should call `boot` manually.\n\n    See Also:\n        [`post`][chanfig.Config.post]\n\n    Examples:\n        &gt;&gt;&gt; class DataConfig(Config):\n        ...     def post(self):\n        ...         if isinstance(self.path, str):\n        ...             self.path = Config(feature=self.path, label=self.path)\n        ...         return self\n        &gt;&gt;&gt; class BootConfig(Config):\n        ...     def __init__(self, *args, **kwargs):\n        ...         super().__init__(*args, **kwargs)\n        ...         self.dataset = DataConfig(path=\"path\")\n        ...     def post(self):\n        ...         super().post()\n        ...         if isinstance(self.id, str):\n        ...             self.id += \"_id\"\n        ...         return self\n        &gt;&gt;&gt; c = BootConfig(id=\"boot\")\n        &gt;&gt;&gt; c.boot()\n        BootConfig(\n          ('id'): 'boot_id'\n          ('dataset'): DataConfig(\n            ('path'): Config(\n              ('feature'): 'path'\n              ('label'): 'path'\n            )\n          )\n        )\n    \"\"\"\n\n    for value in self.values():\n        if isinstance(value, Config):\n            value.boot()\n            value.popattr(\"parser\", None)\n    self.post()\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.parse","title":"parse","text":"Python<pre><code>parse(args: Iterable[str] | None = None, default_config: str | None = None, no_default_config_action: str = 'raise', boot: bool = True) -&gt; Self\n</code></pre> <p>Parse command-line arguments with <code>ConfigParser</code>.</p> <p><code>parse</code> will try to parse all command-line arguments, you don\u2019t need to pre-define them but typos may cause trouble.</p> <p>By default, this method internally calls <code>Config.boot()</code>. To disable this behaviour, set <code>boot</code> to <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Iterable[str] | None</code> <p>Command-line arguments. Defaults to <code>None</code>.</p> <code>None</code> <code>str | None</code> <p>Path to default config file. Defaults to <code>None</code>.</p> <code>None</code> <code>str</code> <p>Action when <code>default_config</code> is not found. Can be one of <code>[\"raise\", \"warn\", \"ignore\"]</code>. Defaults to <code>\"raise\"</code>.</p> <code>'raise'</code> <code>bool</code> <p>If <code>True</code>, call <code>Config.boot()</code> after parsing. Defaults to <code>True</code>.</p> <code>True</code> See Also <p><code>chanfig.ConfigParser.parse</code>: Implementation of <code>parse</code>. <code>parse_config</code>: Only parse valid config arguments.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(a=0)\n&gt;&gt;&gt; c.dict()\n{'a': 0}\n&gt;&gt;&gt; c.parse(['--a', '1', '--b', '2', '--c', '3']).dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def parse(\n    self,\n    args: Iterable[str] | None = None,\n    default_config: str | None = None,\n    no_default_config_action: str = \"raise\",\n    boot: bool = True,\n) -&gt; Self:\n    r\"\"\"\n\n    Parse command-line arguments with `ConfigParser`.\n\n    `parse` will try to parse all command-line arguments,\n    you don't need to pre-define them but typos may cause trouble.\n\n    By default, this method internally calls `Config.boot()`.\n    To disable this behaviour, set `boot` to `False`.\n\n    Args:\n        args (Iterable[str] | None, optional): Command-line arguments. Defaults to `None`.\n        default_config (str | None, optional): Path to default config file. Defaults to `None`.\n        no_default_config_action (str, optional): Action when `default_config` is not found.\n            Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n        boot (bool, optional): If `True`, call `Config.boot()` after parsing. Defaults to `True`.\n\n    See Also:\n        [`chanfig.ConfigParser.parse`][chanfig.ConfigParser.parse]: Implementation of `parse`.\n        [`parse_config`][chanfig.Config.parse_config]: Only parse valid config arguments.\n\n    Examples:\n        &gt;&gt;&gt; c = Config(a=0)\n        &gt;&gt;&gt; c.dict()\n        {'a': 0}\n        &gt;&gt;&gt; c.parse(['--a', '1', '--b', '2', '--c', '3']).dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    if self.getattr(\"parser\") is None:\n        self.setattr(\"parser\", ConfigParser())\n    self.getattr(\"parser\").parse(args, self, default_config, no_default_config_action)\n    if boot:\n        self.boot()\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.parse(args)","title":"<code>args</code>","text":""},{"location":"config/#chanfig.Config.parse(default_config)","title":"<code>default_config</code>","text":""},{"location":"config/#chanfig.Config.parse(no_default_config_action)","title":"<code>no_default_config_action</code>","text":""},{"location":"config/#chanfig.Config.parse(boot)","title":"<code>boot</code>","text":""},{"location":"config/#chanfig.Config.parse_config","title":"parse_config","text":"Python<pre><code>parse_config(args: Iterable[str] | None = None, default_config: str | None = None, no_default_config_action: str = 'raise', boot: bool = True) -&gt; Self\n</code></pre> <p>Parse command-line arguments with <code>ConfigParser</code>.</p> <p><code>parse_config</code> only parse command-line arguments that is in defined in <code>Config</code>.</p> <p>By default, this method internally calls <code>Config.boot()</code>. To disable this behaviour, set <code>boot</code> to <code>False</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Iterable[str] | None</code> <p>Command-line arguments. Defaults to <code>None</code>.</p> <code>None</code> <code>str | None</code> <p>Path to default config file. Defaults to <code>None</code>.</p> <code>None</code> <code>str</code> <p>Action when <code>default_config</code> is not found. Can be one of <code>[\"raise\", \"warn\", \"ignore\"]</code>. Defaults to <code>\"raise\"</code>.</p> <code>'raise'</code> <code>bool</code> <p>If <code>True</code>, call <code>Config.boot()</code> after parsing. Defaults to <code>True</code>.</p> <code>True</code> See Also <p><code>chanfig.ConfigParser.parse_config</code>: Implementation of <code>parse_config</code>. <code>parse</code>: Parse all command-line arguments.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(a=0, b=0, c=0)\n&gt;&gt;&gt; c.dict()\n{'a': 0, 'b': 0, 'c': 0}\n&gt;&gt;&gt; c.parse_config(['--a', '1', '--b', '2', '--c', '3']).dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def parse_config(\n    self,\n    args: Iterable[str] | None = None,\n    default_config: str | None = None,\n    no_default_config_action: str = \"raise\",\n    boot: bool = True,\n) -&gt; Self:\n    r\"\"\"\n\n    Parse command-line arguments with `ConfigParser`.\n\n    `parse_config` only parse command-line arguments that is in defined in `Config`.\n\n    By default, this method internally calls `Config.boot()`.\n    To disable this behaviour, set `boot` to `False`.\n\n    Args:\n        args (Iterable[str] | None, optional): Command-line arguments. Defaults to `None`.\n        default_config (str | None, optional): Path to default config file. Defaults to `None`.\n        no_default_config_action (str, optional): Action when `default_config` is not found.\n            Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n        boot (bool, optional): If `True`, call `Config.boot()` after parsing. Defaults to `True`.\n\n    See Also:\n        [`chanfig.ConfigParser.parse_config`][chanfig.ConfigParser.parse_config]: Implementation of `parse_config`.\n        [`parse`][chanfig.Config.parse]: Parse all command-line arguments.\n\n    Examples:\n        &gt;&gt;&gt; c = Config(a=0, b=0, c=0)\n        &gt;&gt;&gt; c.dict()\n        {'a': 0, 'b': 0, 'c': 0}\n        &gt;&gt;&gt; c.parse_config(['--a', '1', '--b', '2', '--c', '3']).dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    if self.getattr(\"parser\") is None:\n        self.setattr(\"parser\", ConfigParser())\n    self.getattr(\"parser\").parse_config(args, self, default_config, no_default_config_action)\n    if boot:\n        self.boot()\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.parse_config(args)","title":"<code>args</code>","text":""},{"location":"config/#chanfig.Config.parse_config(default_config)","title":"<code>default_config</code>","text":""},{"location":"config/#chanfig.Config.parse_config(no_default_config_action)","title":"<code>no_default_config_action</code>","text":""},{"location":"config/#chanfig.Config.parse_config(boot)","title":"<code>boot</code>","text":""},{"location":"config/#chanfig.Config.add_argument","title":"add_argument","text":"Python<pre><code>add_argument(*args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Add an argument to <code>ConfigParser</code>.</p> <p>Note that value defined in <code>Config</code> will override the default value defined in <code>add_argument</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(a=0, c=1)\n&gt;&gt;&gt; arg = c.add_argument(\"--a\", type=int, default=1)\n&gt;&gt;&gt; arg = c.add_argument(\"--b\", type=int, default=2)\n&gt;&gt;&gt; c.parse(['--c', '4']).dict()\n{'a': 1, 'c': 4, 'b': 2}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def add_argument(self, *args: Any, **kwargs: Any) -&gt; None:\n    r\"\"\"\n    Add an argument to `ConfigParser`.\n\n    Note that value defined in `Config` will override the default value defined in `add_argument`.\n\n    Examples:\n        &gt;&gt;&gt; c = Config(a=0, c=1)\n        &gt;&gt;&gt; arg = c.add_argument(\"--a\", type=int, default=1)\n        &gt;&gt;&gt; arg = c.add_argument(\"--b\", type=int, default=2)\n        &gt;&gt;&gt; c.parse(['--c', '4']).dict()\n        {'a': 1, 'c': 4, 'b': 2}\n    \"\"\"\n\n    if self.getattr(\"parser\") is None:\n        self.setattr(\"parser\", ConfigParser())\n    return self.getattr(\"parser\").add_argument(*args, **kwargs)\n</code></pre>"},{"location":"config/#chanfig.Config.freeze","title":"freeze","text":"Python<pre><code>freeze(recursive: bool = True) -&gt; Self\n</code></pre> <p>Freeze <code>Config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <code>True</code> <p>Alias:</p> <ul> <li><code>lock</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(**{'i.d': 1016})\n&gt;&gt;&gt; c.getattr('frozen')\nFalse\n&gt;&gt;&gt; c.freeze(recursive=False).dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c.getattr('frozen')\nTrue\n&gt;&gt;&gt; c.i.getattr('frozen')\nFalse\n&gt;&gt;&gt; c.lock().dict()  # alias\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c.i.getattr('frozen')\nTrue\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def freeze(self, recursive: bool = True) -&gt; Self:\n    r\"\"\"\n    Freeze `Config`.\n\n    Args:\n        recursive:\n\n    **Alias**:\n\n    + `lock`\n\n    Examples:\n        &gt;&gt;&gt; c = Config(**{'i.d': 1016})\n        &gt;&gt;&gt; c.getattr('frozen')\n        False\n        &gt;&gt;&gt; c.freeze(recursive=False).dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c.getattr('frozen')\n        True\n        &gt;&gt;&gt; c.i.getattr('frozen')\n        False\n        &gt;&gt;&gt; c.lock().dict()  # alias\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c.i.getattr('frozen')\n        True\n    \"\"\"\n\n    @wraps(self.freeze)\n    def freeze(config: Config) -&gt; None:\n        if isinstance(config, Config):\n            config.setattr(\"frozen\", True)\n\n    if recursive:\n        self.apply_(freeze)\n    else:\n        freeze(self)\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.freeze(recursive)","title":"<code>recursive</code>","text":""},{"location":"config/#chanfig.Config.lock","title":"lock","text":"Python<pre><code>lock(recursive: bool = True) -&gt; Self\n</code></pre> <p>Alias of <code>freeze</code>.</p> Source code in <code>chanfig/config.py</code> Python<pre><code>def lock(self, recursive: bool = True) -&gt; Self:\n    r\"\"\"\n    Alias of [`freeze`][chanfig.Config.freeze].\n    \"\"\"\n    return self.freeze(recursive=recursive)\n</code></pre>"},{"location":"config/#chanfig.Config.locked","title":"locked","text":"Python<pre><code>locked()\n</code></pre> <p>Context manager which temporarily locks <code>Config</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; with c.locked():\n...     c['i.d'] = 1016\nTraceback (most recent call last):\nValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n&gt;&gt;&gt; c.i.d = 1016\n&gt;&gt;&gt; c.dict()\n{'i': {'d': 1016}}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>@contextmanager\ndef locked(self):\n    \"\"\"\n    Context manager which temporarily locks `Config`.\n\n    Examples:\n        &gt;&gt;&gt; c = Config()\n        &gt;&gt;&gt; with c.locked():\n        ...     c['i.d'] = 1016\n        Traceback (most recent call last):\n        ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n        &gt;&gt;&gt; c.i.d = 1016\n        &gt;&gt;&gt; c.dict()\n        {'i': {'d': 1016}}\n    \"\"\"\n\n    was_frozen = self.getattr(\"frozen\", False)\n    try:\n        self.freeze()\n        yield self\n    finally:\n        if not was_frozen:\n            self.defrost()\n</code></pre>"},{"location":"config/#chanfig.Config.defrost","title":"defrost","text":"Python<pre><code>defrost(recursive: bool = True) -&gt; Self\n</code></pre> <p>Defrost <code>Config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <code>True</code> <p>Alias:</p> <ul> <li><code>unlock</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config(**{'i.d': 1016})\n&gt;&gt;&gt; c.getattr('frozen')\nFalse\n&gt;&gt;&gt; c.freeze().dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c.getattr('frozen')\nTrue\n&gt;&gt;&gt; c.defrost(recursive=False).dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c.getattr('frozen')\nFalse\n&gt;&gt;&gt; c.i.getattr('frozen')\nTrue\n&gt;&gt;&gt; c.unlock().dict()  # alias\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c.i.getattr('frozen')\nFalse\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def defrost(self, recursive: bool = True) -&gt; Self:\n    r\"\"\"\n    Defrost `Config`.\n\n    Args:\n        recursive:\n\n    **Alias**:\n\n    + `unlock`\n\n    Examples:\n        &gt;&gt;&gt; c = Config(**{'i.d': 1016})\n        &gt;&gt;&gt; c.getattr('frozen')\n        False\n        &gt;&gt;&gt; c.freeze().dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c.getattr('frozen')\n        True\n        &gt;&gt;&gt; c.defrost(recursive=False).dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c.getattr('frozen')\n        False\n        &gt;&gt;&gt; c.i.getattr('frozen')\n        True\n        &gt;&gt;&gt; c.unlock().dict()  # alias\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c.i.getattr('frozen')\n        False\n    \"\"\"\n\n    @wraps(self.defrost)\n    def defrost(config: Config) -&gt; None:\n        if isinstance(config, Config):\n            config.setattr(\"frozen\", False)\n\n    if recursive:\n        self.apply_(defrost)\n    else:\n        defrost(self)\n    return self\n</code></pre>"},{"location":"config/#chanfig.Config.defrost(recursive)","title":"<code>recursive</code>","text":""},{"location":"config/#chanfig.Config.unlock","title":"unlock","text":"Python<pre><code>unlock(recursive: bool = True) -&gt; Self\n</code></pre> <p>Alias of <code>defrost</code>.</p> Source code in <code>chanfig/config.py</code> Python<pre><code>def unlock(self, recursive: bool = True) -&gt; Self:\n    r\"\"\"\n    Alias of [`defrost`][chanfig.Config.defrost].\n    \"\"\"\n    return self.defrost(recursive=recursive)\n</code></pre>"},{"location":"config/#chanfig.Config.unlocked","title":"unlocked","text":"Python<pre><code>unlocked()\n</code></pre> <p>Context manager which temporarily unlocks <code>Config</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c.freeze().dict()\n{}\n&gt;&gt;&gt; with c.unlocked():\n...     c['i.d'] = 1016\n&gt;&gt;&gt; c.defrost().dict()\n{'i': {'d': 1016}}\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>@contextmanager\ndef unlocked(self):\n    \"\"\"\n    Context manager which temporarily unlocks `Config`.\n\n    Examples:\n        &gt;&gt;&gt; c = Config()\n        &gt;&gt;&gt; c.freeze().dict()\n        {}\n        &gt;&gt;&gt; with c.unlocked():\n        ...     c['i.d'] = 1016\n        &gt;&gt;&gt; c.defrost().dict()\n        {'i': {'d': 1016}}\n    \"\"\"\n\n    was_frozen = self.getattr(\"frozen\", False)\n    try:\n        self.defrost()\n        yield self\n    finally:\n        if was_frozen:\n            self.freeze()\n</code></pre>"},{"location":"config/#chanfig.Config.get","title":"get","text":"Python<pre><code>get(name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any\n</code></pre> <p>Get value from <code>Config</code>.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If <code>Config</code> does not contain <code>name</code> and <code>default</code>/<code>default_factory</code> is not specified.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = Config(**{\"i.d\": 1016})\n&gt;&gt;&gt; d.get('i.d')\n1016\n&gt;&gt;&gt; d['i.d']\n1016\n&gt;&gt;&gt; d.i.d\n1016\n&gt;&gt;&gt; d.get('f', 2)\n2\n&gt;&gt;&gt; d.f\nConfig(&lt;class 'chanfig.config.Config'&gt;, )\n&gt;&gt;&gt; del d.f\n&gt;&gt;&gt; d.freeze()\nConfig(&lt;class 'chanfig.config.Config'&gt;,\n  ('i'): Config(&lt;class 'chanfig.config.Config'&gt;,\n    ('d'): 1016\n  )\n)\n&gt;&gt;&gt; d.f\nTraceback (most recent call last):\nAttributeError: 'Config' object has no attribute 'f'\n&gt;&gt;&gt; d[\"f.n\"]\nTraceback (most recent call last):\nKeyError: 'f.n'\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>def get(self, name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any:\n    r\"\"\"\n    Get value from `Config`.\n\n    Raises:\n        KeyError: If `Config` does not contain `name` and `default`/`default_factory` is not specified.\n\n    Examples:\n        &gt;&gt;&gt; d = Config(**{\"i.d\": 1016})\n        &gt;&gt;&gt; d.get('i.d')\n        1016\n        &gt;&gt;&gt; d['i.d']\n        1016\n        &gt;&gt;&gt; d.i.d\n        1016\n        &gt;&gt;&gt; d.get('f', 2)\n        2\n        &gt;&gt;&gt; d.f\n        Config(&lt;class 'chanfig.config.Config'&gt;, )\n        &gt;&gt;&gt; del d.f\n        &gt;&gt;&gt; d.freeze()\n        Config(&lt;class 'chanfig.config.Config'&gt;,\n          ('i'): Config(&lt;class 'chanfig.config.Config'&gt;,\n            ('d'): 1016\n          )\n        )\n        &gt;&gt;&gt; d.f\n        Traceback (most recent call last):\n        AttributeError: 'Config' object has no attribute 'f'\n        &gt;&gt;&gt; d[\"f.n\"]\n        Traceback (most recent call last):\n        KeyError: 'f.n'\n    \"\"\"\n\n    if not self.hasattr(\"default_factory\"):  # did not call super().__init__() in sub-class\n        self.setattr(\"default_factory\", Config)\n    if name in self or not self.getattr(\"frozen\", False):\n        return super().get(name, default, fallback)\n    raise KeyError(name)\n</code></pre>"},{"location":"config/#chanfig.Config.set","title":"set","text":"Python<pre><code>set(name: Any, value: Any, convert_mapping: bool | None = None) -&gt; None\n</code></pre> <p>Set value of <code>Config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <code>Any</code> required <code>bool | None</code> <p>Whether to convert <code>Mapping</code> to <code>NestedDict</code>. Defaults to self.convert_mapping.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>Config</code> is frozen.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c['i.d'] = 1016\n&gt;&gt;&gt; c.i.d\n1016\n&gt;&gt;&gt; c.freeze().dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c['i.d'] = 1016\nTraceback (most recent call last):\nValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n&gt;&gt;&gt; c.defrost().dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; c['i.d'] = 1016\n&gt;&gt;&gt; c.i.d\n1016\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>@frozen_check\ndef set(\n    self,\n    name: Any,\n    value: Any,\n    convert_mapping: bool | None = None,\n) -&gt; None:\n    r\"\"\"\n    Set value of `Config`.\n\n    Args:\n        name:\n        value:\n        convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n            Defaults to self.convert_mapping.\n\n    Raises:\n        ValueError: If `Config` is frozen.\n\n    Examples:\n        &gt;&gt;&gt; c = Config()\n        &gt;&gt;&gt; c['i.d'] = 1016\n        &gt;&gt;&gt; c.i.d\n        1016\n        &gt;&gt;&gt; c.freeze().dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c['i.d'] = 1016\n        Traceback (most recent call last):\n        ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n        &gt;&gt;&gt; c.defrost().dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; c['i.d'] = 1016\n        &gt;&gt;&gt; c.i.d\n        1016\n    \"\"\"\n\n    return super().set(name, value, convert_mapping)\n</code></pre>"},{"location":"config/#chanfig.Config.set(name)","title":"<code>name</code>","text":""},{"location":"config/#chanfig.Config.set(value)","title":"<code>value</code>","text":""},{"location":"config/#chanfig.Config.set(convert_mapping)","title":"<code>convert_mapping</code>","text":""},{"location":"config/#chanfig.Config.delete","title":"delete","text":"Python<pre><code>delete(name: Any) -&gt; None\n</code></pre> <p>Delete value from <code>Config</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = Config(**{\"i.d\": 1016, \"f.n\": \"chang\"})\n&gt;&gt;&gt; d.i.d\n1016\n&gt;&gt;&gt; d.f.n\n'chang'\n&gt;&gt;&gt; d.delete('i.d')\n&gt;&gt;&gt; \"i.d\" in d\nFalse\n&gt;&gt;&gt; d.i.d\nConfig(&lt;class 'chanfig.config.Config'&gt;, )\n&gt;&gt;&gt; \"i.d\" in d\nTrue\n&gt;&gt;&gt; del d.f.n\n&gt;&gt;&gt; d.f.n\nConfig(&lt;class 'chanfig.config.Config'&gt;, )\n&gt;&gt;&gt; del d.c\nTraceback (most recent call last):\nAttributeError: 'Config' object has no attribute 'c'\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>@frozen_check\ndef delete(self, name: Any) -&gt; None:\n    r\"\"\"\n    Delete value from `Config`.\n\n    Args:\n        name:\n\n    Examples:\n        &gt;&gt;&gt; d = Config(**{\"i.d\": 1016, \"f.n\": \"chang\"})\n        &gt;&gt;&gt; d.i.d\n        1016\n        &gt;&gt;&gt; d.f.n\n        'chang'\n        &gt;&gt;&gt; d.delete('i.d')\n        &gt;&gt;&gt; \"i.d\" in d\n        False\n        &gt;&gt;&gt; d.i.d\n        Config(&lt;class 'chanfig.config.Config'&gt;, )\n        &gt;&gt;&gt; \"i.d\" in d\n        True\n        &gt;&gt;&gt; del d.f.n\n        &gt;&gt;&gt; d.f.n\n        Config(&lt;class 'chanfig.config.Config'&gt;, )\n        &gt;&gt;&gt; del d.c\n        Traceback (most recent call last):\n        AttributeError: 'Config' object has no attribute 'c'\n    \"\"\"\n\n    super().delete(name)\n</code></pre>"},{"location":"config/#chanfig.Config.delete(name)","title":"<code>name</code>","text":""},{"location":"config/#chanfig.Config.pop","title":"pop","text":"Python<pre><code>pop(name: Any, default: Any = Null) -&gt; Any\n</code></pre> <p>Pop value from <code>Config</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; c = Config()\n&gt;&gt;&gt; c['i.d'] = 1016\n&gt;&gt;&gt; c.pop('i.d')\n1016\n&gt;&gt;&gt; c.pop('i.d', True)\nTrue\n&gt;&gt;&gt; c.freeze().dict()\n{'i': {}}\n&gt;&gt;&gt; c['i.d'] = 1016\nTraceback (most recent call last):\nValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n&gt;&gt;&gt; c.defrost().dict()\n{'i': {}}\n&gt;&gt;&gt; c['i.d'] = 1016\n&gt;&gt;&gt; c.pop('i.d')\n1016\n</code></pre> Source code in <code>chanfig/config.py</code> Python<pre><code>@frozen_check\ndef pop(self, name: Any, default: Any = Null) -&gt; Any:\n    r\"\"\"\n    Pop value from `Config`.\n\n    Examples:\n        &gt;&gt;&gt; c = Config()\n        &gt;&gt;&gt; c['i.d'] = 1016\n        &gt;&gt;&gt; c.pop('i.d')\n        1016\n        &gt;&gt;&gt; c.pop('i.d', True)\n        True\n        &gt;&gt;&gt; c.freeze().dict()\n        {'i': {}}\n        &gt;&gt;&gt; c['i.d'] = 1016\n        Traceback (most recent call last):\n        ValueError: Attempting to alter a frozen config. Run config.defrost() to defrost first.\n        &gt;&gt;&gt; c.defrost().dict()\n        {'i': {}}\n        &gt;&gt;&gt; c['i.d'] = 1016\n        &gt;&gt;&gt; c.pop('i.d')\n        1016\n    \"\"\"\n\n    return super().pop(name, default)\n</code></pre>"},{"location":"configclass/","title":"configclass","text":""},{"location":"configclass/#chanfig.configclasses","title":"chanfig.configclasses","text":""},{"location":"configclass/#chanfig.configclasses.configclass","title":"configclass","text":"Python<pre><code>configclass(cls: Any = None)\n</code></pre> <p>Construct a Config in <code>dataclass</code> style.</p> <p>This decorator creates a Config instance with the provided class attributes.</p> See Also <p><code>dataclass</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; @configclass\n... class DataloaderConfig:\n...     batch_size: int = 64\n...     num_workers: int = 4\n...     pin_memory: bool = True\n&gt;&gt;&gt; config = DataloaderConfig()\n&gt;&gt;&gt; print(config)\nDataloaderConfig(&lt;class 'chanfig.config.Config'&gt;,\n  ('batch_size'): 64\n  ('num_workers'): 4\n  ('pin_memory'): True\n)\n</code></pre> Source code in <code>chanfig/configclasses.py</code> Python<pre><code>def configclass(cls: Any = None):\n    \"\"\"\n    Construct a Config in [`dataclass`][dataclasses.dataclass] style.\n\n    This decorator creates a Config instance with the provided class attributes.\n\n    See Also:\n        [`dataclass`][dataclasses.dataclass]\n\n    Examples:\n        &gt;&gt;&gt; @configclass\n        ... class DataloaderConfig:\n        ...     batch_size: int = 64\n        ...     num_workers: int = 4\n        ...     pin_memory: bool = True\n        &gt;&gt;&gt; config = DataloaderConfig()\n        &gt;&gt;&gt; print(config)\n        DataloaderConfig(&lt;class 'chanfig.config.Config'&gt;,\n          ('batch_size'): 64\n          ('num_workers'): 4\n          ('pin_memory'): True\n        )\n    \"\"\"\n\n    warn(\n        \"This decorator is deprecated and may be removed in the future release. \"\n        \"All chanfig classes will copy variable identified in `__annotations__` by default.\"\n        \"This decorator is equivalent to inheriting from `Config`.\",\n        PendingDeprecationWarning,\n    )\n\n    def decorator(cls: Type[Any]):\n        if not issubclass(cls, Config):\n            config_cls = type(cls.__name__, (Config, cls), dict(cls.__dict__))\n            cls = config_cls\n\n        return cls\n\n    if cls is None:\n        return decorator\n    return decorator(cls)\n</code></pre>"},{"location":"default_dict/","title":"DefaultDict","text":""},{"location":"default_dict/#chanfig.DefaultDict","title":"chanfig.DefaultDict","text":"<p>               Bases: <code>FlatDict</code></p> <p><code>DefaultDict</code> inherits from <code>FlatDict</code> and incorporates support of <code>default_factory</code> in the same manner as <code>collections.defaultdict</code>. If <code>default_factory is not None</code>, the value will be set to <code>default_factory()</code> when you access a key that does not exist in <code>DefaultDict</code>.</p> <p>You may specify <code>DefaultDict(default_factory=FlatDict)</code> when creating <code>DefaultDict</code> or by calling <code>dict.setattr('default_factory', FlatDict)</code> for existing <code>DefaultDict</code> objects.</p> <p>Note that just like <code>collections.defaultdict</code>, <code>default_factory()</code> is called without any arguments.</p> <p>Attributes:</p> Name Type Description <code>default_factory</code> <p>Default factory for defaultdict behaviour.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>default_factory</code> is not callable.</p> Notes <p>Unlike <code>collections.defaultdict</code>, <code>DefaultDict</code> will not automatically create entries when name starts and ends with <code>__</code>. This is to avoid conflicts with Python magic methods. You can still creates them manually with <code>DefaultDict.fromkeys</code> or <code>DefaultDict.add</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = DefaultDict(list)\n&gt;&gt;&gt; d.a.append(1)\n&gt;&gt;&gt; d.a\n[1]\n&gt;&gt;&gt; d = DefaultDict([])\nTraceback (most recent call last):\nTypeError: `default_factory=[]` must be Callable, but got &lt;class 'list'&gt;.\n</code></pre> Source code in <code>chanfig/default_dict.py</code> Python<pre><code>class DefaultDict(FlatDict):\n    r\"\"\"\n    `DefaultDict` inherits from `FlatDict` and incorporates support of `default_factory`\n    in the same manner as `collections.defaultdict`.\n    If `default_factory is not None`, the value will be set to `default_factory()`\n    when you access a key that does not exist in `DefaultDict`.\n\n    You may specify `DefaultDict(default_factory=FlatDict)` when creating `DefaultDict` or\n    by calling `dict.setattr('default_factory', FlatDict)` for existing `DefaultDict` objects.\n\n    Note that just like `collections.defaultdict`, `default_factory()` is called without any arguments.\n\n    Attributes:\n        default_factory: Default factory for defaultdict behaviour.\n\n    Raises:\n        TypeError: If `default_factory` is not callable.\n\n    Notes:\n        Unlike `collections.defaultdict`, `DefaultDict` will not automatically create entries when name starts and ends\n        with `__`. This is to avoid conflicts with Python magic methods.\n        You can still creates them manually with `DefaultDict.fromkeys` or `DefaultDict.add`.\n\n    Examples:\n        &gt;&gt;&gt; d = DefaultDict(list)\n        &gt;&gt;&gt; d.a.append(1)\n        &gt;&gt;&gt; d.a\n        [1]\n        &gt;&gt;&gt; d = DefaultDict([])\n        Traceback (most recent call last):\n        TypeError: `default_factory=[]` must be Callable, but got &lt;class 'list'&gt;.\n    \"\"\"\n\n    default_factory = Null\n\n    def __init__(  # pylint: disable=W1113\n        self, default_factory: Callable | None = None, *args: Any, **kwargs: Any\n    ) -&gt; None:\n        super().__init__(*args, **kwargs)\n        if default_factory is not None:\n            if callable(default_factory):\n                self.setattr(\"default_factory\", default_factory)\n            else:\n                raise TypeError(\n                    f\"`default_factory={default_factory}` must be Callable, but got {type(default_factory)}.\"\n                )\n\n    def __missing__(self, name: Any, default=Null) -&gt; Any:  # pylint: disable=R1710\n        if default is Null:\n            if self.getattr(\"default_factory\") is Null or (\n                isinstance(name, str) and name.startswith(\"__\") and name.endswith(\"__\")\n            ):\n                raise KeyError(name) from None\n            default = self.getattr(\"default_factory\")()\n        if isinstance(default, FlatDict):\n            default.__dict__.update(self.__dict__)\n        super().set(name, default)\n        # CHANfiG might auto convert data type during `set`, which will change the value in place.\n        # So we need to `get` the value, instead of return `default`.\n        return self.get(name)\n\n    def __repr__(self) -&gt; str:\n        default_factory = self.getattr(\"default_factory\", None)\n        if default_factory is Null:\n            return super().__repr__()\n        super_repr = super().__repr__()[len(self.__class__.__name__) :]  # noqa: E203\n        if len(super_repr) == 2:\n            return f\"{self.__class__.__name__}({default_factory}, )\"\n        return f\"{self.__class__.__name__}({default_factory},\" + super_repr[1:]\n\n    def add(self, name: Any):\n        r\"\"\"\n        Add a new default factory to the dictionary.\n\n        Args:\n            name:\n\n        Raises:\n            ValueError: If `default_factory` is None.\n\n        Examples:\n            &gt;&gt;&gt; d = DefaultDict(default_factory=DefaultDict)\n            &gt;&gt;&gt; d.add('d')\n            DefaultDict()\n            &gt;&gt;&gt; d.get('d')\n            DefaultDict()\n            &gt;&gt;&gt; d['n'] = 'chang'\n            &gt;&gt;&gt; d.n\n            'chang'\n            &gt;&gt;&gt; d.n = 'liu'\n            &gt;&gt;&gt; d['n']\n            'liu'\n            &gt;&gt;&gt; d = DefaultDict()\n            &gt;&gt;&gt; d.add('a')\n            Traceback (most recent call last):\n            ValueError: Cannot add to a DefaultDict with no default_factory\n        \"\"\"\n        default_factory = self.getattr(\"default_factory\")\n        if default_factory is Null:\n            raise ValueError(\"Cannot add to a DefaultDict with no default_factory\")\n        self.set(name, default_factory())  # pylint: disable=E1102\n        return self.get(name)\n</code></pre>"},{"location":"default_dict/#chanfig.DefaultDict.add","title":"add","text":"Python<pre><code>add(name: Any)\n</code></pre> <p>Add a new default factory to the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>default_factory</code> is None.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = DefaultDict(default_factory=DefaultDict)\n&gt;&gt;&gt; d.add('d')\nDefaultDict()\n&gt;&gt;&gt; d.get('d')\nDefaultDict()\n&gt;&gt;&gt; d['n'] = 'chang'\n&gt;&gt;&gt; d.n\n'chang'\n&gt;&gt;&gt; d.n = 'liu'\n&gt;&gt;&gt; d['n']\n'liu'\n&gt;&gt;&gt; d = DefaultDict()\n&gt;&gt;&gt; d.add('a')\nTraceback (most recent call last):\nValueError: Cannot add to a DefaultDict with no default_factory\n</code></pre> Source code in <code>chanfig/default_dict.py</code> Python<pre><code>def add(self, name: Any):\n    r\"\"\"\n    Add a new default factory to the dictionary.\n\n    Args:\n        name:\n\n    Raises:\n        ValueError: If `default_factory` is None.\n\n    Examples:\n        &gt;&gt;&gt; d = DefaultDict(default_factory=DefaultDict)\n        &gt;&gt;&gt; d.add('d')\n        DefaultDict()\n        &gt;&gt;&gt; d.get('d')\n        DefaultDict()\n        &gt;&gt;&gt; d['n'] = 'chang'\n        &gt;&gt;&gt; d.n\n        'chang'\n        &gt;&gt;&gt; d.n = 'liu'\n        &gt;&gt;&gt; d['n']\n        'liu'\n        &gt;&gt;&gt; d = DefaultDict()\n        &gt;&gt;&gt; d.add('a')\n        Traceback (most recent call last):\n        ValueError: Cannot add to a DefaultDict with no default_factory\n    \"\"\"\n    default_factory = self.getattr(\"default_factory\")\n    if default_factory is Null:\n        raise ValueError(\"Cannot add to a DefaultDict with no default_factory\")\n    self.set(name, default_factory())  # pylint: disable=E1102\n    return self.get(name)\n</code></pre>"},{"location":"default_dict/#chanfig.DefaultDict.add(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/","title":"FlatDict","text":""},{"location":"flat_dict/#chanfig.FlatDict","title":"chanfig.FlatDict","text":"<p>               Bases: <code>dict</code></p> <p><code>FlatDict</code> with attribute-style access.</p> <p><code>FlatDict</code> inherits from built-in <code>dict</code>.</p> <p>It comes with many easy to use helper methods, such as <code>merge</code>, <code>sort</code>, <code>difference</code>, <code>intersect</code>.</p> <p>It also has full support for IO operations, such as <code>json</code> and <code>yaml</code>.</p> <p>Even better, <code>FlatDict</code> has pytorch support built-in. You can directly call <code>FlatDict.cpu()</code> or <code>FlatDict.to(\"cpu\")</code> to move all <code>torch.Tensor</code> objects across devices.</p> <p><code>FlatDict</code> works best with <code>Variable</code> objects. Simply call <code>flat_dict.a = Variable(1); flat_dict.b = flat_dict.a</code>, and their values will be synced.</p> <p>Even better, <code>FlatDict</code> support variable interpolation. Just set the value of one key to another key (surrounded by braces with $ at the begin, like ${xxx}), and calls <code>flat_dict.interpolate()</code>, <code>FlatDict</code> will interpolate their values and create <code>Variable</code> automatically.</p> <p><code>FlatDict</code> has many other easy to use helper methods, such as <code>difference</code>, <code>intersect</code>. And has full support for IO operations, such as <code>json</code> and <code>yaml</code>.</p> <p><code>FlatDict</code> also has pytorch support built-in. You can directly call <code>flat_dict.cpu()</code> or <code>flat_dict.to(\"cpu\")</code> to move all <code>torch.Tensor</code> objects across devices.</p> <p>Attributes:</p> Name Type Description <code>indent</code> <p>Indentation level in printing and dumping to json or yaml.</p> Notes <p><code>FlatDict</code> rewrite <code>__getattribute__</code> and <code>__getattr__</code> to supports attribute-style access to its members. Therefore, all internal attributes should be set and get through <code>flat_dict.setattr</code> and <code>flat_dict.getattr</code>.</p> <p>Although it is possible to override other internal methods, it is not recommended to do so.</p> <p><code>__class__</code>, <code>__dict__</code>, and <code>getattr</code> are reserved and cannot be overrode in any manner.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.d = 1016\n&gt;&gt;&gt; d['d']\n1016\n&gt;&gt;&gt; d['i'] = 1016\n&gt;&gt;&gt; d.i\n1016\n&gt;&gt;&gt; d.a = Variable(1)\n&gt;&gt;&gt; d.b = d.a\n&gt;&gt;&gt; d.a, d.b\n(1, 1)\n&gt;&gt;&gt; d.a += 1\n&gt;&gt;&gt; d.a, d.b\n(2, 2)\n&gt;&gt;&gt; d.a = 3\n&gt;&gt;&gt; d.a, d.b\n(3, 3)\n&gt;&gt;&gt; d.a = Variable('hello')\n&gt;&gt;&gt; f\"{d.a}, world!\"\n'hello, world!'\n&gt;&gt;&gt; d.a = d.a + ', world!'\n&gt;&gt;&gt; d.b\n'hello, world!'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>class FlatDict(dict, metaclass=Dict):\n    r\"\"\"\n    `FlatDict` with attribute-style access.\n\n    `FlatDict` inherits from built-in `dict`.\n\n    It comes with many easy to use helper methods, such as `merge`, `sort`, `difference`, `intersect`.\n\n    It also has full support for IO operations, such as `json` and `yaml`.\n\n    Even better, `FlatDict` has pytorch support built-in.\n    You can directly call `FlatDict.cpu()` or `FlatDict.to(\"cpu\")` to move all `torch.Tensor` objects across devices.\n\n    `FlatDict` works best with `Variable` objects.\n    Simply call `flat_dict.a = Variable(1); flat_dict.b = flat_dict.a`, and their values will be synced.\n\n    Even better, `FlatDict` support variable interpolation.\n    Just set the value of one key to another key (surrounded by braces with $ at the begin, like ${xxx}),\n    and calls `flat_dict.interpolate()`, `FlatDict` will interpolate their values and create `Variable` automatically.\n\n    `FlatDict` has many other easy to use helper methods, such as `difference`, `intersect`.\n    And has full support for IO operations, such as `json` and `yaml`.\n\n    `FlatDict` also has pytorch support built-in.\n    You can directly call `flat_dict.cpu()` or `flat_dict.to(\"cpu\")` to move all `torch.Tensor` objects across devices.\n\n    Attributes:\n        indent: Indentation level in printing and dumping to json or yaml.\n\n    Notes:\n        `FlatDict` rewrite `__getattribute__` and `__getattr__` to supports attribute-style access to its members.\n        Therefore, all internal attributes should be set and get through `flat_dict.setattr` and `flat_dict.getattr`.\n\n        Although it is possible to override other internal methods, it is not recommended to do so.\n\n        `__class__`, `__dict__`, and `getattr` are reserved and cannot be overrode in any manner.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.d = 1016\n        &gt;&gt;&gt; d['d']\n        1016\n        &gt;&gt;&gt; d['i'] = 1016\n        &gt;&gt;&gt; d.i\n        1016\n        &gt;&gt;&gt; d.a = Variable(1)\n        &gt;&gt;&gt; d.b = d.a\n        &gt;&gt;&gt; d.a, d.b\n        (1, 1)\n        &gt;&gt;&gt; d.a += 1\n        &gt;&gt;&gt; d.a, d.b\n        (2, 2)\n        &gt;&gt;&gt; d.a = 3\n        &gt;&gt;&gt; d.a, d.b\n        (3, 3)\n        &gt;&gt;&gt; d.a = Variable('hello')\n        &gt;&gt;&gt; f\"{d.a}, world!\"\n        'hello, world!'\n        &gt;&gt;&gt; d.a = d.a + ', world!'\n        &gt;&gt;&gt; d.b\n        'hello, world!'\n    \"\"\"\n\n    # pylint: disable=R0904\n\n    indent = 2\n\n    def __init__(self, *args: Any, **kwargs: Any) -&gt; None:\n        if len(args) == 1:\n            arg = args[0]\n            if isinstance(arg, (PathLike, str, bytes)):\n                arg = self.load(arg)\n            elif isinstance(arg, (Namespace,)):\n                arg = vars(arg)\n            args = (arg,)\n        self.merge(*args, **kwargs)\n        self._copy_class_attributes()\n\n    def _copy_class_attributes(self, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Move class attributes to instance.\n\n        Args:\n            recursive:\n        \"\"\"\n\n        def copy_cls_attributes(cls: type) -&gt; Mapping:\n            return {k: cls.__dict__[k] for k in get_annotations(cls).keys() if k in cls.__dict__}\n\n        if recursive:\n            for cls in self.__class__.__mro__:\n                self.merge(copy_cls_attributes(cls), overwrite=False)\n        else:\n            self.merge(copy_cls_attributes(self.__class__), overwrite=False)\n        return self\n\n    def __post_init__(self, *args, **kwargs) -&gt; None:\n        pass\n\n    def __getattribute__(self, name: Any) -&gt; Any:\n        if name in (\"keys\", \"values\", \"items\", \"getattr\", \"setattr\", \"delattr\", \"hasattr\", \"repr\", \"extra_repr\"):\n            return super().__getattribute__(name)\n        if (name not in (\"getattr\",) and not (name.startswith(\"__\") and name.endswith(\"__\"))) and name in self:\n            if name in dir(self.__class__):\n                value = super().__getattribute__(name)\n                if isinstance(value, (property, staticmethod, classmethod)) or callable(value):\n                    return value\n            return self.get(name)\n        return super().__getattribute__(name)\n\n    def get(self, name: Any, default: Any = None) -&gt; Any:\n        r\"\"\"\n        Get value from `FlatDict`.\n\n        Raises:\n            KeyError: If `FlatDict` does not contain `name` and `default` is not specified.\n            TypeError: If `name` is not hashable.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(d=1016)\n            &gt;&gt;&gt; d.get('d')\n            1016\n            &gt;&gt;&gt; d['d']\n            1016\n            &gt;&gt;&gt; d.d\n            1016\n            &gt;&gt;&gt; d.get('d', None)\n            1016\n            &gt;&gt;&gt; d.get('f', 2)\n            2\n            &gt;&gt;&gt; d.get('f')\n            &gt;&gt;&gt; d.get('f', Null)\n            Traceback (most recent call last):\n            KeyError: 'f'\n        \"\"\"\n\n        if name in self:\n            return dict.__getitem__(self, name)\n        if default is not Null:\n            return default\n        return self.__missing__(name)\n\n    def __getitem__(self, name: Any) -&gt; Any:\n        return self.get(name, default=Null)\n\n    def __getattr__(self, name: Any) -&gt; Any:\n        try:\n            return self.get(name, default=Null)\n        except KeyError:\n            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n\n    def set(self, name: Any, value: Any) -&gt; None:\n        r\"\"\"\n        Set value of `FlatDict`.\n\n        Args:\n            name:\n            value:\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict()\n            &gt;&gt;&gt; d.set('d', 1016)\n            &gt;&gt;&gt; d.get('d')\n            1016\n            &gt;&gt;&gt; d['n'] = 'chang'\n            &gt;&gt;&gt; d.n\n            'chang'\n            &gt;&gt;&gt; d.n = 'liu'\n            &gt;&gt;&gt; d['n']\n            'liu'\n        \"\"\"\n\n        if name is Null:\n            raise ValueError(\"name must not be null\")\n\n        if name in self and isinstance(self.get(name), Variable):\n            self.get(name).set(value)\n            return\n\n        annotations = get_annotations(self)\n        anno = annotations.get(name, Any)\n\n        if anno is not Any:\n            value = honor_annotation(value, anno)\n\n        dict.__setitem__(self, name, value)\n\n    def __setitem__(self, name: Any, value: Any) -&gt; None:\n        self.set(name, value)\n\n    def __setattr__(self, name: Any, value: Any) -&gt; None:\n        self.set(name, value)\n\n    def delete(self, name: Any) -&gt; None:\n        r\"\"\"\n        Delete value from `FlatDict`.\n\n        Args:\n            name:\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(d=1016, n='chang')\n            &gt;&gt;&gt; d.d\n            1016\n            &gt;&gt;&gt; d.n\n            'chang'\n            &gt;&gt;&gt; d.delete('d')\n            &gt;&gt;&gt; d.d\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'd'\n            &gt;&gt;&gt; del d.n\n            &gt;&gt;&gt; d.n\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'n'\n            &gt;&gt;&gt; del d.f\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'f'\n        \"\"\"\n\n        dict.__delitem__(self, name)\n\n    def __delitem__(self, name: Any) -&gt; None:\n        return self.delete(name)\n\n    def __delattr__(self, name: Any) -&gt; None:\n        try:\n            self.delete(name)\n        except KeyError:\n            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n\n    def __missing__(self, name: Any) -&gt; Any:  # pylint: disable=R1710\n        raise KeyError(name)\n\n    def validate(self) -&gt; None:\n        r\"\"\"\n        Validate `FlatDict`.\n\n        Raises:\n            TypeError: If value is not of the type declared in class annotations.\n            TypeError: If `Variable` has invalid type.\n            ValueError: If `Variable` has invalid value.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.islower()))\n            &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=str), n=Variable('chang', validator=lambda x: x.islower()))\n            Traceback (most recent call last):\n            TypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n            &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.isupper()))\n            Traceback (most recent call last):\n            ValueError: 'n' has invalid value. Value chang is not valid.\n        \"\"\"\n\n        self._validate(self)\n\n    @staticmethod\n    def _validate(obj) -&gt; None:\n        if isinstance(obj, FlatDict):\n            annos = get_annotations(obj)\n            for name, value in obj.items():\n                if annos and name in annos:\n                    conform_annotation(value, annos[name])\n                if isinstance(value, Variable):\n                    try:\n                        value.validate()\n                    except TypeError as exc:\n                        raise TypeError(f\"'{name}' has invalid type. {exc}\") from None\n                    except ValueError as exc:\n                        raise ValueError(f\"'{name}' has invalid value. {exc}\") from None\n\n    def getattr(self, name: str, default: Any = Null) -&gt; Any:\n        r\"\"\"\n        Get attribute of `FlatDict`.\n\n        Note that it won't retrieve value in `FlatDict`,\n\n        Args:\n            name:\n            default:\n\n        Returns:\n            value: If `FlatDict` does not contain `name`, return `default`.\n\n        Raises:\n            AttributeError: If `FlatDict` does not contain `name` and `default` is not specified.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1)\n            &gt;&gt;&gt; d.get('a')\n            1\n            &gt;&gt;&gt; d.getattr('a')\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'a'\n            &gt;&gt;&gt; d.getattr('b', 2)\n            2\n            &gt;&gt;&gt; d.setattr('b', 3)\n            &gt;&gt;&gt; d.getattr('b')\n            3\n        \"\"\"\n\n        if name in (\"indent\", \"separator\"):\n            return super().__getattribute__(name)\n\n        try:\n            if name in self.__dict__:\n                return self.__dict__[name]\n            for cls in self.__class__.__mro__:\n                annos = get_annotations(cls)\n                if name in cls.__dict__ and name not in annos:\n                    return cls.__dict__[name]\n            return super().getattr(name, default)  # type: ignore[misc]\n        except AttributeError:\n            if default is not Null:\n                return default\n            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n\n    def setattr(self, name: str, value: Any) -&gt; None:\n        r\"\"\"\n        Set attribute of `FlatDict`.\n\n        Note that it won't alter values in `FlatDict`.\n\n        Args:\n            name:\n            value:\n\n        Warns:\n            RuntimeWarning: If name already exists in `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict()\n            &gt;&gt;&gt; d.setattr('attr', 'value')\n            &gt;&gt;&gt; d.getattr('attr')\n            'value'\n            &gt;&gt;&gt; d.set('d', 1016)\n            &gt;&gt;&gt; d.setattr('d', 1031)  # RuntimeWarning: d already exists in FlatDict.\n            &gt;&gt;&gt; d.get('d')\n            1016\n            &gt;&gt;&gt; d.d\n            1016\n            &gt;&gt;&gt; d.getattr('d')\n            1031\n        \"\"\"\n\n        if name in self:\n            warn(\n                f\"{name} already exists in {self.__class__.__name__}.\\n\"\n                f\"Users must call `{self.__class__.__name__}.getattr()` to retrieve conflicting attribute value.\",\n                RuntimeWarning,\n            )\n        self.__dict__[name] = value\n\n    def delattr(self, name: str) -&gt; None:\n        r\"\"\"\n        Delete attribute of `FlatDict`.\n\n        Note that it won't delete values in `FlatDict`.\n\n        Args:\n            name:\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict()\n            &gt;&gt;&gt; d.setattr('name', 'chang')\n            &gt;&gt;&gt; d.getattr('name')\n            'chang'\n            &gt;&gt;&gt; d.delattr('name')\n            &gt;&gt;&gt; d.getattr('name')\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'name'\n        \"\"\"\n\n        if name not in self.__dict__:\n            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n        del self.__dict__[name]\n\n    def hasattr(self, name: str) -&gt; bool:\n        r\"\"\"\n        Determine if an attribute exists in `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict()\n            &gt;&gt;&gt; d.setattr('name', 'chang')\n            &gt;&gt;&gt; d.hasattr('name')\n            True\n            &gt;&gt;&gt; d.delattr('name')\n            &gt;&gt;&gt; d.hasattr('name')\n            False\n        \"\"\"\n\n        try:\n            if name in self.__dict__ or name in self.__class__.__dict__:\n                return True\n            return super().hasattr(name)  # type: ignore[misc]\n        except AttributeError:\n            return False\n\n    def popattr(self, name: str, default: Any = Null) -&gt; Any:\n        r\"\"\"\n        Pop attribute of `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.popattr('a')\n            Traceback (most recent call last):\n            AttributeError: 'FlatDict' object has no attribute 'a'\n            &gt;&gt;&gt; d.setattr('a', 1)\n            &gt;&gt;&gt; d.popattr('a')\n            1\n        \"\"\"\n\n        if name not in self.__dict__ and default is Null:\n            raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n        return self.__dict__.pop(name, default)\n\n    def dict(self, flatten: bool = False) -&gt; Mapping | Sequence | Set:\n        r\"\"\"\n        Convert `FlatDict` to other `Mapping`.\n\n        Args:\n            flatten: Whether to flatten [`NestedDict`][chanfig.NestedDict].\n\n        See Also:\n            [`to_dict`][chanfig.utils.conversion.to_dict]: Implementation of `dict`.\n\n        **Alias**:\n\n        + `to_dict`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        return to_dict(self, flatten)\n\n    def to_dict(self, flatten: bool = False) -&gt; Mapping | Sequence | Set:\n        r\"\"\"\n        Alias of [`dict`][chanfig.FlatDict.dict].\n        \"\"\"\n\n        return self.dict(flatten)\n\n    @classmethod\n    def from_dict(cls, obj: Mapping | Sequence) -&gt; Any:  # pylint: disable=R0911\n        r\"\"\"\n        Convert `Mapping` or `Sequence` to `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; FlatDict.from_dict({'a': 1, 'b': 2, 'c': 3})\n            FlatDict(\n              ('a'): 1\n              ('b'): 2\n              ('c'): 3\n            )\n            &gt;&gt;&gt; FlatDict.from_dict([('a', 1), ('b', 2), ('c', 3)])\n            FlatDict(\n              ('a'): 1\n              ('b'): 2\n              ('c'): 3\n            )\n            &gt;&gt;&gt; FlatDict.from_dict([{'a': 1}, {'b': 2}, {'c': 3}])\n            [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n            &gt;&gt;&gt; FlatDict.from_dict({1, 2, 3})\n            {1, 2, 3}\n        \"\"\"\n\n        return to_chanfig(obj, cls)\n\n    def sort(self, key: Callable | None = None, reverse: bool = False) -&gt; Self:\n        r\"\"\"\n        Sort `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.sort().dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; d = FlatDict(b=2, c=3, a=1)\n            &gt;&gt;&gt; d.sort().dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; a = [1]\n            &gt;&gt;&gt; d = FlatDict(z=0, a=a)\n            &gt;&gt;&gt; a.append(2)\n            &gt;&gt;&gt; d.sort().dict()\n            {'a': [1, 2], 'z': 0}\n        \"\"\"\n\n        items = sorted(self.items(), key=key, reverse=reverse)\n        self.clear()\n        for k, v in items:  # pylint: disable=C0103\n            self[k] = v\n        return self\n\n    def interpolate(  # pylint: disable=R0912\n        self, use_variable: bool = True, interpolators: MutableMapping | None = None, unsafe_eval: bool = False\n    ) -&gt; Self:\n        r\"\"\"\n        Perform Variable interpolation.\n\n        Variable interpolation allows you to set the value of one key to be the value of another key easily.\n\n        Args:\n            use_variable: Whether to convert values to `Variable` objects.\n            interpolators: Mapping contains values for interpolation. Defaults to `self`.\n            unsafe_eval: Whether to evaluate interpolated values.\n\n        Raises:\n            ValueError: If value is not interpolatable.\n            ValueError: If reference to itself.\n            ValueError: If has circular reference.\n\n        See Also:\n            [Variable][`chanfig.Variable`]: Mutable wrapper of immutable objects.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n            &gt;&gt;&gt; d.interpolate(unsafe_eval=True).dict()\n            {'a': 1, 'b': 1, 'c': 1.1}\n            &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n            &gt;&gt;&gt; d.interpolate().dict()\n            {'a': 1, 'b': 1, 'c': '1.1'}\n            &gt;&gt;&gt; isinstance(d.a, Variable)\n            True\n            &gt;&gt;&gt; d.a += 1\n            &gt;&gt;&gt; d.dict()\n            {'a': 2, 'b': 2, 'c': '1.1'}\n            &gt;&gt;&gt; d.a is d.b\n            True\n            &gt;&gt;&gt; d.b is d.c\n            False\n            &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${b}\")\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': '${a}', 'c': '${b}'}\n            &gt;&gt;&gt; d.interpolate(False).dict()\n            {'a': 1, 'b': 1, 'c': 1}\n            &gt;&gt;&gt; isinstance(d.a, Variable)\n            False\n            &gt;&gt;&gt; d.a += 1\n            &gt;&gt;&gt; d.dict()\n            {'a': 2, 'b': 1, 'c': 1}\n            &gt;&gt;&gt; d = FlatDict(a=1, b=\"${b}\", c=\"${b}\")\n            &gt;&gt;&gt; d.interpolate().dict()\n            Traceback (most recent call last):\n            ValueError: Cannot interpolate b to itself.\n            &gt;&gt;&gt; d = FlatDict(a=\"${b}\", b=\"${c}\", c=\"${d}\", d=\"${a}\")\n            &gt;&gt;&gt; d.interpolate().dict()\n            Traceback (most recent call last):\n            ValueError: Circular reference found: a-&gt;b-&gt;c-&gt;d-&gt;a.\n            &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${d}\")\n            &gt;&gt;&gt; d.interpolate().dict()\n            Traceback (most recent call last):\n            ValueError: d is not found in FlatDict(\n              ('a'): 1\n              ('b'): '${a}'\n              ('c'): '${d}'\n            ).\n        \"\"\"\n        # pylint: disable=C0103\n\n        interpolators = interpolators or self\n        placeholders: dict[str, list[str]] = {}\n        for key, value in self.all_items():\n            if isinstance(value, list):\n                for v in value:\n                    self.find_placeholders(key, v, placeholders)\n            elif isinstance(value, Mapping):\n                for v in value.values():\n                    self.find_placeholders(key, v, placeholders)\n            else:\n                self.find_placeholders(key, value, placeholders)\n        circular_references = find_circular_reference(placeholders)\n        if circular_references:\n            raise ValueError(f\"Circular reference found: {'-&gt;'.join(circular_references)}.\")\n        if use_variable:\n            placeholder_names = {i for j in placeholders.values() for i in j}\n            for name in list(placeholder_names.difference(placeholders.keys())):\n                if name not in interpolators:\n                    raise ValueError(f\"{name} is not found in {interpolators}.\")\n                if not isinstance(interpolators[name], Variable):\n                    interpolators[name] = Variable(interpolators[name])\n        for key, value in placeholders.items():\n            if isinstance(self[key], list):\n                for index, v in enumerate(self[key]):\n                    self[key][index] = self.substitute(v, interpolators, value)\n            elif isinstance(self[key], Mapping):\n                for k, v in self[key].items():\n                    self[key][k] = self.substitute(v, interpolators, value)\n            else:\n                self[key] = self.substitute(self[key], interpolators, value)\n            if unsafe_eval and isinstance(self[key], str):\n                with suppress(SyntaxError):\n                    if isinstance(self[key], Variable):\n                        self[key].set(eval(self[key].value))\n                    else:\n                        self[key] = eval(self[key])  # pylint: disable=W0123\n        return self\n\n    @staticmethod\n    def find_placeholders(key, value, placeholders):\n        placeholder = find_placeholders(value)\n        if placeholder:\n            for index, name in enumerate(placeholder):\n                if name.startswith(\".\"):\n                    placeholder[index] = key.rsplit(\".\", 1)[0] + name\n                if key == name:\n                    raise ValueError(f\"Cannot interpolate {key} to itself.\")\n            placeholders[key] = placeholder\n\n    @staticmethod\n    def substitute(placeholder, interpolators, value):\n        try:\n            if len(value) == 1 and placeholder.startswith(\"${\") and placeholder.endswith(\"}\"):\n                return interpolators[value[0]]\n            return placeholder.replace(\"$\", \"\").format(**interpolators)\n        except KeyError as exc:\n            raise ValueError(f\"{exc} is not found in {interpolators}.\") from None\n\n    def merge(self, *args: Any, overwrite: bool = True, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Merge `other` into `FlatDict`.\n\n        Args:\n            *args: `Mapping` or `Sequence` to be merged.\n            overwrite: Whether to overwrite existing values.\n            **kwargs: `Mapping` to be merged.\n\n        **Alias**:\n\n        + `union`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; d.merge(n).dict()\n            {'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n            &gt;&gt;&gt; d.merge(l).dict()\n            {'a': 1, 'b': 'b', 'c': 3, 'd': 4}\n            &gt;&gt;&gt; FlatDict(a=1, b=1, c=1).union(FlatDict(b='b', c='c', d='d')).dict()  # alias\n            {'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; d = FlatDict()\n            &gt;&gt;&gt; d.merge({1: 1, 2: 2, 3:3}).dict()\n            {1: 1, 2: 2, 3: 3}\n            &gt;&gt;&gt; d.merge(d.clone()).dict()\n            {1: 1, 2: 2, 3: 3}\n            &gt;&gt;&gt; d.merge({1:3, 2:1, 3: 2, 4: 4, 5: 5}, overwrite=False).dict()\n            {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n        \"\"\"\n\n        if len(args) == 1:\n            args = args[0]\n            if isinstance(args, (PathLike, str, bytes)):\n                args = self.load(args)  # type: ignore[assignment]\n                warn(\n                    \"merge file is deprecated and maybe removed in a future release. Use `merge_from_file` instead.\",\n                    PendingDeprecationWarning,\n                )\n            self._merge(self, args, overwrite=overwrite)\n        elif len(args) &gt; 1:\n            self._merge(self, args, overwrite=overwrite)\n        if kwargs:\n            self._merge(self, kwargs, overwrite=overwrite)\n        return self\n\n    @staticmethod\n    def _merge(this: FlatDict, that: Iterable, overwrite: bool = True) -&gt; Mapping:\n        if not that:\n            return this\n        if isinstance(that, Mapping):\n            that = that.items()\n        for key, value in that:\n            if key in this and isinstance(this[key], Mapping):\n                if isinstance(value, Mapping):\n                    FlatDict._merge(this[key], value)\n                elif overwrite:\n                    if isinstance(value, FlatDict):\n                        this.set(key, value)\n                    else:\n                        this[key] = value\n            elif overwrite or key not in this:\n                this.set(key, value)\n        return this\n\n    def union(self, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Alias of [`merge`][chanfig.FlatDict.merge].\n        \"\"\"\n        return self.merge(*args, **kwargs)\n\n    def merge_from_file(self, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Merge content of `file` into `FlatDict`.\n\n        Args:\n            file (File):\n            *args: Passed to [`load`][chanfig.FlatDict.load].\n            **kwargs: Passed to [`load`][chanfig.FlatDict.load].\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=1)\n            &gt;&gt;&gt; d.merge_from_file(\"tests/test.yaml\").dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        return self.merge(self.load(file, *args, **kwargs))\n\n    def intersect(self, other: Mapping | Iterable | PathStr) -&gt; Self:\n        r\"\"\"\n        Intersection of `FlatDict` and `other`.\n\n        Args:\n            other (Mapping | Iterable | PathStr):\n\n        **Alias**:\n\n        + `inter`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; d.intersect(n).dict()\n            {}\n            &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n            &gt;&gt;&gt; d.intersect(l).dict()\n            {'c': 3}\n            &gt;&gt;&gt; d.merge(l).intersect(\"tests/test.yaml\").dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; d.intersect(1)\n            Traceback (most recent call last):\n            TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n            &gt;&gt;&gt; d.inter(FlatDict(b='b', c='c', d='d')).dict()  # alias\n            {}\n        \"\"\"\n\n        if isinstance(other, (PathLike, str, bytes)):\n            other = self.load(other)\n        if isinstance(other, (Mapping,)):\n            other = other.items()\n        if not isinstance(other, Iterable):\n            raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n        return self.empty(**{key: value for key, value in other if key in self and self[key] == value})  # type: ignore\n\n    def inter(self, other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Alias of [`intersect`][chanfig.FlatDict.intersect].\n        \"\"\"\n        return self.intersect(other, *args, **kwargs)\n\n    def difference(self, other: Mapping | Iterable | PathStr) -&gt; Self:\n        r\"\"\"\n        Difference between `FlatDict` and `other`.\n\n        Args:\n            other:\n\n        **Alias**:\n\n        + `diff`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; d.difference(n).dict()\n            {'b': 'b', 'c': 'c', 'd': 'd'}\n            &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n            &gt;&gt;&gt; d.difference(l).dict()\n            {'d': 4}\n            &gt;&gt;&gt; d.merge(l).difference(\"tests/test.yaml\").dict()\n            {}\n            &gt;&gt;&gt; d.difference(1)\n            Traceback (most recent call last):\n            TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n            &gt;&gt;&gt; FlatDict(a=1, b=1, c=1).diff(FlatDict(b='b', c='c', d='d')).dict()  # alias\n            {'b': 'b', 'c': 'c', 'd': 'd'}\n        \"\"\"\n\n        if isinstance(other, (PathLike, str, bytes)):\n            other = self.load(other)\n        if isinstance(other, (Mapping,)):\n            other = other.items()\n        if not isinstance(other, Iterable):\n            raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n        return self.empty(\n            **{key: value for key, value in other if key not in self or self[key] != value}  # type: ignore[misc]\n        )\n\n    def diff(self, other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Alias of [`difference`][chanfig.FlatDict.difference].\n        \"\"\"\n        return self.difference(other, *args, **kwargs)\n\n    def to(self, cls: str | TorchDevice | TorchDType) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Convert values of `FlatDict` to target `cls`.\n\n        Args:\n            cls (str | torch.device | torch.dtype):\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.to(int)\n            Traceback (most recent call last):\n            TypeError: to() only support torch.dtype and torch.device, but got &lt;class 'int'&gt;.\n        \"\"\"\n\n        # pylint: disable=C0103\n\n        if isinstance(cls, (str, TorchDevice, TorchDType)):\n            for k, v in self.all_items():\n                if hasattr(v, \"to\"):\n                    self[k] = v.to(cls)\n            return self\n\n        raise TypeError(f\"to() only support torch.dtype and torch.device, but got {cls}.\")\n\n    def cpu(self) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Move all tensors to cpu.\n\n        Examples:\n            &gt;&gt;&gt; import torch\n            &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n            &gt;&gt;&gt; d.cpu().dict()  # doctest: +SKIP\n            {'a': tensor(1, device='cpu')}\n        \"\"\"\n\n        return self.to(TorchDevice(\"cpu\"))\n\n    def gpu(self) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Move all tensors to gpu.\n\n        **Alias**:\n\n        + `cuda`\n\n        Examples:\n            &gt;&gt;&gt; import torch\n            &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n            &gt;&gt;&gt; d.gpu().dict()  # doctest: +SKIP\n            {'a': tensor(1, device='cuda:0')}\n            &gt;&gt;&gt; d.cuda().dict()  # alias  # doctest: +SKIP\n            {'a': tensor(1, device='cuda:0')}\n        \"\"\"\n\n        return self.to(TorchDevice(\"cuda\"))\n\n    def cuda(self) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Alias of [`gpu`][chanfig.FlatDict.gpu].\n        \"\"\"\n        return self.gpu()\n\n    def tpu(self) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Move all tensors to tpu.\n\n        **Alias**:\n\n        + `xla`\n\n        Examples:\n            &gt;&gt;&gt; import torch\n            &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n            &gt;&gt;&gt; d.tpu().dict()  # doctest: +SKIP\n            {'a': tensor(1, device='xla:0')}\n            &gt;&gt;&gt; d.xla().dict()  # alias  # doctest: +SKIP\n            {'a': tensor(1, device='xla:0')}\n        \"\"\"\n\n        return self.to(TorchDevice(\"xla\"))\n\n    def xla(self) -&gt; Self:  # pragma: no cover\n        r\"\"\"\n        Alias of [`tpu`][chanfig.FlatDict.tpu].\n        \"\"\"\n        return self.tpu()\n\n    def copy(self) -&gt; Self:\n        r\"\"\"\n        Create a shallow copy of `FlatDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=[])\n            &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n            &gt;&gt;&gt; c = d.copy()\n            &gt;&gt;&gt; c.dict()\n            {'a': []}\n            &gt;&gt;&gt; d.a.append(1)\n            &gt;&gt;&gt; c.dict()\n            {'a': [1]}\n            &gt;&gt;&gt; c.getattr(\"name\")\n            'Chang'\n        \"\"\"\n\n        return copy(self)\n\n    def __deepcopy__(self, memo: Mapping | None = None) -&gt; Self:\n        # pylint: disable=C0103\n\n        if memo is not None and id(self) in memo:\n            return memo[id(self)]\n        ret = self.empty()\n        ret.__dict__.update(deepcopy(self.__dict__))\n        for k, v in self.items():\n            if isinstance(v, FlatDict):\n                ret[k] = v.deepcopy(memo=memo)\n            else:\n                ret[k] = deepcopy(v)\n        return ret\n\n    def deepcopy(self, memo: Mapping | None = None) -&gt; Self:  # pylint: disable=W0613\n        r\"\"\"\n        Create a deep copy of `FlatDict`.\n\n        **Alias**:\n\n        + `clone`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=[])\n            &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n            &gt;&gt;&gt; c = d.deepcopy()\n            &gt;&gt;&gt; c.dict()\n            {'a': []}\n            &gt;&gt;&gt; d.a.append(1)\n            &gt;&gt;&gt; c.dict()\n            {'a': []}\n            &gt;&gt;&gt; c.getattr(\"name\")\n            'Chang'\n            &gt;&gt;&gt; d == d.clone()  # alias\n            True\n        \"\"\"\n\n        return deepcopy(self)\n\n    def clone(self, memo: Mapping | None = None) -&gt; Self:\n        r\"\"\"\n        Alias of [`deepcopy`][chanfig.FlatDict.deepcopy].\n        \"\"\"\n        return self.deepcopy(memo=memo)\n\n    def save(  # pylint: disable=W1113\n        self, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n    ) -&gt; None:\n        r\"\"\"\n        Save `FlatDict` to file.\n\n        Raises:\n            ValueError: If save to `IO` and `method` is not specified.\n            TypeError: If save to unsupported extension.\n\n        **Alias**:\n\n        + `save`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.save(\"tests/test.yaml\")\n            &gt;&gt;&gt; d.save(\"test.conf\")\n            Traceback (most recent call last):\n            TypeError: `file='test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n            &gt;&gt;&gt; with open(\"test.yaml\", \"w\") as f:\n            ...     d.save(f)\n            Traceback (most recent call last):\n            ValueError: `method` must be specified when saving to IO.\n        \"\"\"\n\n        if method is None:\n            if isinstance(file, (IOBase, IO)):\n                raise ValueError(\"`method` must be specified when saving to IO.\")\n            method = splitext(file)[-1][1:]\n        extension = method.lower()\n        if extension in YAML_EXTENSIONS:\n            return self.yaml(file=file, *args, **kwargs)  # type: ignore[misc]  # noqa: B026\n        if extension in JSON_EXTENSIONS:\n            return self.json(file=file, *args, **kwargs)  # type: ignore[misc]  # noqa: B026\n        raise TypeError(f\"`file={file!r}` should be in {JSON_EXTENSIONS} or {YAML_EXTENSIONS}, but got {extension}.\")\n\n    def dump(  # pylint: disable=W1113\n        self, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n    ) -&gt; None:\n        r\"\"\"\n        Alias of [`save`][chanfig.FlatDict.save].\n        \"\"\"\n        return self.save(file, method, *args, **kwargs)\n\n    @classmethod\n    def load(  # pylint: disable=W1113\n        cls, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n    ) -&gt; Self:\n        \"\"\"\n        Load `FlatDict` from file.\n\n        Args:\n            file: File to load from.\n            method: File type, should be in `JSON_EXTENSIONS` or `YAML_EXTENSIONS`.\n\n        Raises:\n            ValueError: If load from `IO` and `method` is not specified.\n            TypeError: If dump to unsupported extension.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict.load(\"tests/test.yaml\")\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; d.load(\"tests/test.conf\")\n            Traceback (most recent call last):\n            TypeError: `file='tests/test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n            &gt;&gt;&gt; with open(\"tests/test.yaml\") as f:\n            ...     d.load(f)\n            Traceback (most recent call last):\n            ValueError: `method` must be specified when loading from IO.\n        \"\"\"\n\n        if method is None:\n            if isinstance(file, (IOBase, IO)):\n                raise ValueError(\"`method` must be specified when loading from IO.\")\n            method = splitext(file)[-1][1:]\n        extension = method.lower()\n        if extension in JSON_EXTENSIONS:\n            return cls.from_json(file, *args, **kwargs)\n        if extension in YAML_EXTENSIONS:\n            return cls.from_yaml(file, *args, **kwargs)\n        raise TypeError(f\"`file={file!r}` should be in {JSON_EXTENSIONS} or {YAML_EXTENSIONS}, but got {extension}.\")\n\n    def json(self, file: File, *args: Any, **kwargs: Any) -&gt; None:\n        r\"\"\"\n        Dump `FlatDict` to json file.\n\n        This method internally calls `self.jsons()` to generate json string.\n        You may overwrite `jsons` in case something is not json serializable.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.json(\"tests/test.json\")\n        \"\"\"\n\n        with self.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n            fp.write(self.jsons(*args, **kwargs))\n\n    @classmethod\n    def from_json(cls, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Construct `FlatDict` from json file.\n\n        This method internally calls `self.from_jsons()` to construct object from json string.\n        You may overwrite `from_jsons` in case something is not json serializable.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict.from_json('tests/test.json')\n            &gt;&gt;&gt; d.dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        with cls.open(file) as fp:  # pylint: disable=C0103\n            if isinstance(file, (IOBase, IO)):\n                return cls.from_jsons(fp.getvalue(), *args, **kwargs)  # type: ignore[union-attr]\n            return cls.from_jsons(fp.read(), *args, **kwargs)\n\n    def jsons(self, *args: Any, **kwargs: Any) -&gt; str:\n        r\"\"\"\n        Dump `FlatDict` to json string.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.jsons()\n            '{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}'\n        \"\"\"\n\n        kwargs.setdefault(\"cls\", JsonEncoder)\n        kwargs.setdefault(\"indent\", self.getattr(\"indent\", 2))\n        return json_dumps(self.dict(), *args, **kwargs)\n\n    @classmethod\n    def from_jsons(cls, string: str, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Construct `FlatDict` from json string.\n\n        Examples:\n            &gt;&gt;&gt; FlatDict.from_jsons('{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}').dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; FlatDict.from_jsons('[[\"a\", 1], [\"b\", 2], [\"c\", 3]]').dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; FlatDict.from_jsons('[{\"a\": 1}, {\"b\": 2}, {\"c\": 3}]')\n            [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n        \"\"\"\n\n        return cls.from_dict(json_loads(string, *args, **kwargs))\n\n    def yaml(self, file: File, *args: Any, **kwargs: Any) -&gt; None:\n        r\"\"\"\n        Dump `FlatDict` to yaml file.\n\n        This method internally calls `self.yamls()` to generate yaml string.\n        You may overwrite `yamls` in case something is not yaml serializable.\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n            &gt;&gt;&gt; d.yaml(\"tests/test.yaml\")\n        \"\"\"\n\n        with self.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n            self.yamls(fp, *args, **kwargs)\n\n    @classmethod\n    def from_yaml(cls, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Construct `FlatDict` from yaml file.\n\n        This method internally calls `self.from_yamls()` to construct object from yaml string.\n        You may overwrite `from_yamls` in case something is not yaml serializable.\n\n        Examples:\n            &gt;&gt;&gt; FlatDict.from_yaml('tests/test.yaml').dict()\n            {'a': 1, 'b': 2, 'c': 3}\n        \"\"\"\n\n        kwargs.setdefault(\"Loader\", YamlLoader)\n        with cls.open(file) as fp:  # pylint: disable=C0103\n            if isinstance(file, (IOBase, IO)):\n                return cls.from_yamls(fp.getvalue(), *args, **kwargs)  # type: ignore[union-attr]\n            content = yaml_load(fp, *args, **kwargs)\n            return cls.from_dict(content)\n\n    def yamls(self, *args: Any, **kwargs: Any) -&gt; str:\n        r\"\"\"\n        Dump `FlatDict` to yaml string.\n\n        Examples:\n            &gt;&gt;&gt; FlatDict(a=1, b=2, c=3).yamls()\n            'a: 1\\nb: 2\\nc: 3\\n'\n        \"\"\"\n\n        kwargs.setdefault(\"Dumper\", YamlDumper)\n        kwargs.setdefault(\"indent\", self.getattr(\"indent\", 2))\n        return yaml_dump(self.dict(), *args, **kwargs)\n\n    @classmethod\n    def from_yamls(cls, string: str, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Construct `FlatDict` from yaml string.\n\n        Examples:\n            &gt;&gt;&gt; FlatDict.from_yamls('a: 1\\nb: 2\\nc: 3\\n').dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; FlatDict.from_yamls('- - a\\n  - 1\\n- - b\\n  - 2\\n- - c\\n  - 3\\n').dict()\n            {'a': 1, 'b': 2, 'c': 3}\n            &gt;&gt;&gt; FlatDict.from_yamls('- a: 1\\n- b: 2\\n- c: 3\\n')\n            [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n        \"\"\"\n\n        kwargs.setdefault(\"Loader\", YamlLoader)\n        return cls.from_dict(yaml_load(string, *args, **kwargs))\n\n    @staticmethod\n    @contextmanager\n    def open(file: File, *args: Any, encoding: str = \"utf-8\", **kwargs: Any) -&gt; Generator[IOBase | IO, Any, Any]:\n        r\"\"\"\n        Open file IO from file path or IO.\n\n        This methods extends the ability of built-in `open` by allowing it to accept an `IOBase` object.\n\n        Args:\n            file: File path or IO.\n            *args: Additional arguments passed to `open`.\n                Defaults to ().\n            **kwargs: Any\n                Additional keyword arguments passed to `open`.\n                Defaults to {}.\n\n        Yields:\n            (Generator[IOBase | IO, Any, Any]):\n\n        Examples:\n            &gt;&gt;&gt; with FlatDict.open(\"tests/test.yaml\") as fp:\n            ...     print(fp.read())\n            a: 1\n            b: 2\n            c: 3\n            &lt;BLANKLINE&gt;\n            &gt;&gt;&gt; io = open(\"tests/test.yaml\")\n            &gt;&gt;&gt; with FlatDict.open(io) as fp:\n            ...     print(fp.read())\n            a: 1\n            b: 2\n            c: 3\n            &lt;BLANKLINE&gt;\n            &gt;&gt;&gt; with FlatDict.open(123, mode=\"w\") as fp:\n            ...     print(fp.read())\n            Traceback (most recent call last):\n            TypeError: expected str, bytes, os.PathLike, IO or IOBase, not int\n        \"\"\"\n\n        if isinstance(file, (IOBase, IO)):\n            yield file\n        elif isinstance(file, (PathLike, str, bytes)):\n            try:\n                file = open(file, *args, encoding=encoding, **kwargs)  # type: ignore[call-overload] # noqa: SIM115\n                yield file  # type: ignore[misc]\n            finally:\n                with suppress(Exception):\n                    file.close()  # type: ignore[union-attr]\n        else:\n            raise TypeError(f\"expected str, bytes, os.PathLike, IO or IOBase, not {type(file).__name__}\")\n\n    @classmethod\n    def empty(cls, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Initialise an empty `FlatDict`.\n\n        This method is helpful when you inheriting `FlatDict` with default values defined in `__init__()`.\n        As use `type(self)()` in this case would copy all the default values, which might not be desired.\n\n        This method will preserve everything in `FlatDict.__class__.__dict__`.\n\n        See Also:\n            [`empty_like`][chanfig.FlatDict.empty_like]\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=[])\n            &gt;&gt;&gt; c = d.empty()\n            &gt;&gt;&gt; c.dict()\n            {}\n        \"\"\"\n\n        empty = cls.__new__(cls)\n        empty.merge(*args, **kwargs)  # pylint: disable=W0212\n        return empty\n\n    def empty_like(self, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Initialise an empty copy of `FlatDict`.\n\n        This method will preserve everything in `FlatDict.__class__.__dict__` and `FlatDict.__dict__`.\n\n        For example, `property`s are saved in `__dict__`, they will keep their original reference after calling this\n        method.\n\n        See Also:\n            [`empty`][chanfig.FlatDict.empty]\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=[])\n            &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n            &gt;&gt;&gt; c = d.empty_like()\n            &gt;&gt;&gt; c.dict()\n            {}\n            &gt;&gt;&gt; c.getattr(\"name\")\n            'Chang'\n        \"\"\"\n\n        empty = self.empty(*args, **kwargs)\n        empty.__dict__.update(self.__dict__)\n        return empty\n\n    def all_keys(self) -&gt; Generator:\n        r\"\"\"\n        Equivalent to `keys`.\n\n        This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n        See Also:\n            [`all_keys`][chanfig.NestedDict.all_keys]\n        \"\"\"\n        yield from self.keys()\n\n    def all_values(self) -&gt; Generator:\n        r\"\"\"\n        Equivalent to `keys`.\n\n        This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n        See Also:\n            [`all_values`][chanfig.NestedDict.all_values]\n        \"\"\"\n        yield from self.values()\n\n    def all_items(self) -&gt; Generator:\n        r\"\"\"\n        Equivalent to `keys`.\n\n        This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n        See Also:\n            [`all_items`][chanfig.NestedDict.all_items]\n        \"\"\"\n        yield from self.items()\n\n    def dropnull(self) -&gt; Self:\n        r\"\"\"\n        Drop key-value pairs with `Null` value.\n\n        **Alias**:\n\n        + `dropna`\n\n        Examples:\n            &gt;&gt;&gt; d = FlatDict(a=Null, b=Null, c=3)\n            &gt;&gt;&gt; d.dict()\n            {'a': Null, 'b': Null, 'c': 3}\n            &gt;&gt;&gt; d.dropnull().dict()\n            {'c': 3}\n            &gt;&gt;&gt; d.dropna().dict()  # alias\n            {'c': 3}\n        \"\"\"\n\n        return self.empty({k: v for k, v in self.all_items() if v is not Null})\n\n    def dropna(self) -&gt; Self:\n        r\"\"\"\n        Alias of [`dropnull`][chanfig.FlatDict.dropnull].\n        \"\"\"\n        return self.dropnull()\n\n    def extra_repr(self) -&gt; str:  # pylint: disable=C0116\n        return \"\"\n\n    def __repr__(self) -&gt; str:\n        extra_lines = []\n        extra_repr = self.extra_repr()\n        # empty string will be split into list ['']\n        if extra_repr:\n            extra_lines = extra_repr.split(\"\\n\")\n        child_lines = []\n        for key, value in self.items():\n            key_repr = repr(key)\n            value_repr = repr(value)\n            value_repr = self._add_indent(value_repr)\n            child_lines.append(f\"({key_repr}): {value_repr}\")\n            # child_lines.append(f\"{key_repr}: {value_repr}\")\n        lines = extra_lines + child_lines\n\n        main_repr = self.__class__.__name__ + \"(\"\n        if lines:\n            # simple one-liner info, which most builtin Modules will use\n            if len(extra_lines) == 1 and not child_lines:\n                main_repr += extra_lines[0]\n            elif len(child_lines) == 1 and not extra_lines and len(child_lines[0]) &lt; 10:\n                main_repr += child_lines[0]\n            else:\n                main_repr += \"\\n  \" + \"\\n  \".join(lines) + \"\\n\"\n\n        main_repr += \")\"\n        return main_repr\n\n    def _add_indent(self, text: str) -&gt; str:\n        lines = text.split(\"\\n\")\n        # don't do anything for single-line stuff\n        if len(lines) == 1:\n            return text\n        first = lines.pop(0)\n        lines = [(self.getattr(\"indent\", 2) * \" \") + line for line in lines]\n        text = \"\\n\".join(lines)\n        text = first + \"\\n\" + text\n        return text\n\n    def __hash__(self):\n        return hash(frozenset(self.items()))\n\n    # iptyhon\n    def _ipython_display_(self):  # pragma: no cover\n        return repr(self)\n\n    # iptyhon\n    def _ipython_canary_method_should_not_exist_(self):  # pragma: no cover\n        return None\n\n    # rich\n    def aihwerij235234ljsdnp34ksodfipwoe234234jlskjdf(self):  # pragma: no cover\n        return None\n\n    def __rich__(self):  # pragma: no cover\n        return self.__repr__()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.get","title":"get","text":"Python<pre><code>get(name: Any, default: Any = None) -&gt; Any\n</code></pre> <p>Get value from <code>FlatDict</code>.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If <code>FlatDict</code> does not contain <code>name</code> and <code>default</code> is not specified.</p> <code>TypeError</code> <p>If <code>name</code> is not hashable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(d=1016)\n&gt;&gt;&gt; d.get('d')\n1016\n&gt;&gt;&gt; d['d']\n1016\n&gt;&gt;&gt; d.d\n1016\n&gt;&gt;&gt; d.get('d', None)\n1016\n&gt;&gt;&gt; d.get('f', 2)\n2\n&gt;&gt;&gt; d.get('f')\n&gt;&gt;&gt; d.get('f', Null)\nTraceback (most recent call last):\nKeyError: 'f'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def get(self, name: Any, default: Any = None) -&gt; Any:\n    r\"\"\"\n    Get value from `FlatDict`.\n\n    Raises:\n        KeyError: If `FlatDict` does not contain `name` and `default` is not specified.\n        TypeError: If `name` is not hashable.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(d=1016)\n        &gt;&gt;&gt; d.get('d')\n        1016\n        &gt;&gt;&gt; d['d']\n        1016\n        &gt;&gt;&gt; d.d\n        1016\n        &gt;&gt;&gt; d.get('d', None)\n        1016\n        &gt;&gt;&gt; d.get('f', 2)\n        2\n        &gt;&gt;&gt; d.get('f')\n        &gt;&gt;&gt; d.get('f', Null)\n        Traceback (most recent call last):\n        KeyError: 'f'\n    \"\"\"\n\n    if name in self:\n        return dict.__getitem__(self, name)\n    if default is not Null:\n        return default\n    return self.__missing__(name)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.set","title":"set","text":"Python<pre><code>set(name: Any, value: Any) -&gt; None\n</code></pre> <p>Set value of <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <code>Any</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.set('d', 1016)\n&gt;&gt;&gt; d.get('d')\n1016\n&gt;&gt;&gt; d['n'] = 'chang'\n&gt;&gt;&gt; d.n\n'chang'\n&gt;&gt;&gt; d.n = 'liu'\n&gt;&gt;&gt; d['n']\n'liu'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def set(self, name: Any, value: Any) -&gt; None:\n    r\"\"\"\n    Set value of `FlatDict`.\n\n    Args:\n        name:\n        value:\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.set('d', 1016)\n        &gt;&gt;&gt; d.get('d')\n        1016\n        &gt;&gt;&gt; d['n'] = 'chang'\n        &gt;&gt;&gt; d.n\n        'chang'\n        &gt;&gt;&gt; d.n = 'liu'\n        &gt;&gt;&gt; d['n']\n        'liu'\n    \"\"\"\n\n    if name is Null:\n        raise ValueError(\"name must not be null\")\n\n    if name in self and isinstance(self.get(name), Variable):\n        self.get(name).set(value)\n        return\n\n    annotations = get_annotations(self)\n    anno = annotations.get(name, Any)\n\n    if anno is not Any:\n        value = honor_annotation(value, anno)\n\n    dict.__setitem__(self, name, value)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.set(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.set(value)","title":"<code>value</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.delete","title":"delete","text":"Python<pre><code>delete(name: Any) -&gt; None\n</code></pre> <p>Delete value from <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(d=1016, n='chang')\n&gt;&gt;&gt; d.d\n1016\n&gt;&gt;&gt; d.n\n'chang'\n&gt;&gt;&gt; d.delete('d')\n&gt;&gt;&gt; d.d\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'd'\n&gt;&gt;&gt; del d.n\n&gt;&gt;&gt; d.n\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'n'\n&gt;&gt;&gt; del d.f\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'f'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def delete(self, name: Any) -&gt; None:\n    r\"\"\"\n    Delete value from `FlatDict`.\n\n    Args:\n        name:\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(d=1016, n='chang')\n        &gt;&gt;&gt; d.d\n        1016\n        &gt;&gt;&gt; d.n\n        'chang'\n        &gt;&gt;&gt; d.delete('d')\n        &gt;&gt;&gt; d.d\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'd'\n        &gt;&gt;&gt; del d.n\n        &gt;&gt;&gt; d.n\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'n'\n        &gt;&gt;&gt; del d.f\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'f'\n    \"\"\"\n\n    dict.__delitem__(self, name)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.delete(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.validate","title":"validate","text":"Python<pre><code>validate() -&gt; None\n</code></pre> <p>Validate <code>FlatDict</code>.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If value is not of the type declared in class annotations.</p> <code>TypeError</code> <p>If <code>Variable</code> has invalid type.</p> <code>ValueError</code> <p>If <code>Variable</code> has invalid value.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.islower()))\n&gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=str), n=Variable('chang', validator=lambda x: x.islower()))\nTraceback (most recent call last):\nTypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n&gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.isupper()))\nTraceback (most recent call last):\nValueError: 'n' has invalid value. Value chang is not valid.\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def validate(self) -&gt; None:\n    r\"\"\"\n    Validate `FlatDict`.\n\n    Raises:\n        TypeError: If value is not of the type declared in class annotations.\n        TypeError: If `Variable` has invalid type.\n        ValueError: If `Variable` has invalid value.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.islower()))\n        &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=str), n=Variable('chang', validator=lambda x: x.islower()))\n        Traceback (most recent call last):\n        TypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n        &gt;&gt;&gt; d = FlatDict(d=Variable(1016, type=int), n=Variable('chang', validator=lambda x: x.isupper()))\n        Traceback (most recent call last):\n        ValueError: 'n' has invalid value. Value chang is not valid.\n    \"\"\"\n\n    self._validate(self)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.getattr","title":"getattr","text":"Python<pre><code>getattr(name: str, default: Any = Null) -&gt; Any\n</code></pre> <p>Get attribute of <code>FlatDict</code>.</p> <p>Note that it won\u2019t retrieve value in <code>FlatDict</code>,</p> <p>Parameters:</p> Name Type Description Default <code>str</code> required <code>Any</code> <code>Null</code> <p>Returns:</p> Name Type Description <code>value</code> <code>Any</code> <p>If <code>FlatDict</code> does not contain <code>name</code>, return <code>default</code>.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If <code>FlatDict</code> does not contain <code>name</code> and <code>default</code> is not specified.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1)\n&gt;&gt;&gt; d.get('a')\n1\n&gt;&gt;&gt; d.getattr('a')\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'a'\n&gt;&gt;&gt; d.getattr('b', 2)\n2\n&gt;&gt;&gt; d.setattr('b', 3)\n&gt;&gt;&gt; d.getattr('b')\n3\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def getattr(self, name: str, default: Any = Null) -&gt; Any:\n    r\"\"\"\n    Get attribute of `FlatDict`.\n\n    Note that it won't retrieve value in `FlatDict`,\n\n    Args:\n        name:\n        default:\n\n    Returns:\n        value: If `FlatDict` does not contain `name`, return `default`.\n\n    Raises:\n        AttributeError: If `FlatDict` does not contain `name` and `default` is not specified.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1)\n        &gt;&gt;&gt; d.get('a')\n        1\n        &gt;&gt;&gt; d.getattr('a')\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'a'\n        &gt;&gt;&gt; d.getattr('b', 2)\n        2\n        &gt;&gt;&gt; d.setattr('b', 3)\n        &gt;&gt;&gt; d.getattr('b')\n        3\n    \"\"\"\n\n    if name in (\"indent\", \"separator\"):\n        return super().__getattribute__(name)\n\n    try:\n        if name in self.__dict__:\n            return self.__dict__[name]\n        for cls in self.__class__.__mro__:\n            annos = get_annotations(cls)\n            if name in cls.__dict__ and name not in annos:\n                return cls.__dict__[name]\n        return super().getattr(name, default)  # type: ignore[misc]\n    except AttributeError:\n        if default is not Null:\n            return default\n        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.getattr(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.getattr(default)","title":"<code>default</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.setattr","title":"setattr","text":"Python<pre><code>setattr(name: str, value: Any) -&gt; None\n</code></pre> <p>Set attribute of <code>FlatDict</code>.</p> <p>Note that it won\u2019t alter values in <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> required <code>Any</code> required <p>Warns:</p> Type Description <code>RuntimeWarning</code> <p>If name already exists in <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.setattr('attr', 'value')\n&gt;&gt;&gt; d.getattr('attr')\n'value'\n&gt;&gt;&gt; d.set('d', 1016)\n&gt;&gt;&gt; d.setattr('d', 1031)  # RuntimeWarning: d already exists in FlatDict.\n&gt;&gt;&gt; d.get('d')\n1016\n&gt;&gt;&gt; d.d\n1016\n&gt;&gt;&gt; d.getattr('d')\n1031\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def setattr(self, name: str, value: Any) -&gt; None:\n    r\"\"\"\n    Set attribute of `FlatDict`.\n\n    Note that it won't alter values in `FlatDict`.\n\n    Args:\n        name:\n        value:\n\n    Warns:\n        RuntimeWarning: If name already exists in `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.setattr('attr', 'value')\n        &gt;&gt;&gt; d.getattr('attr')\n        'value'\n        &gt;&gt;&gt; d.set('d', 1016)\n        &gt;&gt;&gt; d.setattr('d', 1031)  # RuntimeWarning: d already exists in FlatDict.\n        &gt;&gt;&gt; d.get('d')\n        1016\n        &gt;&gt;&gt; d.d\n        1016\n        &gt;&gt;&gt; d.getattr('d')\n        1031\n    \"\"\"\n\n    if name in self:\n        warn(\n            f\"{name} already exists in {self.__class__.__name__}.\\n\"\n            f\"Users must call `{self.__class__.__name__}.getattr()` to retrieve conflicting attribute value.\",\n            RuntimeWarning,\n        )\n    self.__dict__[name] = value\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.setattr(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.setattr(value)","title":"<code>value</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.delattr","title":"delattr","text":"Python<pre><code>delattr(name: str) -&gt; None\n</code></pre> <p>Delete attribute of <code>FlatDict</code>.</p> <p>Note that it won\u2019t delete values in <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>str</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.setattr('name', 'chang')\n&gt;&gt;&gt; d.getattr('name')\n'chang'\n&gt;&gt;&gt; d.delattr('name')\n&gt;&gt;&gt; d.getattr('name')\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'name'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def delattr(self, name: str) -&gt; None:\n    r\"\"\"\n    Delete attribute of `FlatDict`.\n\n    Note that it won't delete values in `FlatDict`.\n\n    Args:\n        name:\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.setattr('name', 'chang')\n        &gt;&gt;&gt; d.getattr('name')\n        'chang'\n        &gt;&gt;&gt; d.delattr('name')\n        &gt;&gt;&gt; d.getattr('name')\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'name'\n    \"\"\"\n\n    if name not in self.__dict__:\n        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n    del self.__dict__[name]\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.delattr(name)","title":"<code>name</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.hasattr","title":"hasattr","text":"Python<pre><code>hasattr(name: str) -&gt; bool\n</code></pre> <p>Determine if an attribute exists in <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.setattr('name', 'chang')\n&gt;&gt;&gt; d.hasattr('name')\nTrue\n&gt;&gt;&gt; d.delattr('name')\n&gt;&gt;&gt; d.hasattr('name')\nFalse\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def hasattr(self, name: str) -&gt; bool:\n    r\"\"\"\n    Determine if an attribute exists in `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.setattr('name', 'chang')\n        &gt;&gt;&gt; d.hasattr('name')\n        True\n        &gt;&gt;&gt; d.delattr('name')\n        &gt;&gt;&gt; d.hasattr('name')\n        False\n    \"\"\"\n\n    try:\n        if name in self.__dict__ or name in self.__class__.__dict__:\n            return True\n        return super().hasattr(name)  # type: ignore[misc]\n    except AttributeError:\n        return False\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.popattr","title":"popattr","text":"Python<pre><code>popattr(name: str, default: Any = Null) -&gt; Any\n</code></pre> <p>Pop attribute of <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.popattr('a')\nTraceback (most recent call last):\nAttributeError: 'FlatDict' object has no attribute 'a'\n&gt;&gt;&gt; d.setattr('a', 1)\n&gt;&gt;&gt; d.popattr('a')\n1\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def popattr(self, name: str, default: Any = Null) -&gt; Any:\n    r\"\"\"\n    Pop attribute of `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.popattr('a')\n        Traceback (most recent call last):\n        AttributeError: 'FlatDict' object has no attribute 'a'\n        &gt;&gt;&gt; d.setattr('a', 1)\n        &gt;&gt;&gt; d.popattr('a')\n        1\n    \"\"\"\n\n    if name not in self.__dict__ and default is Null:\n        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\") from None\n    return self.__dict__.pop(name, default)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.dict","title":"dict","text":"Python<pre><code>dict(flatten: bool = False) -&gt; Mapping | Sequence | Set\n</code></pre> <p>Convert <code>FlatDict</code> to other <code>Mapping</code>.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to flatten <code>NestedDict</code>.</p> <code>False</code> See Also <p>[<code>to_dict</code>][chanfig.utils.conversion.to_dict]: Implementation of <code>dict</code>.</p> <p>Alias:</p> <ul> <li><code>to_dict</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def dict(self, flatten: bool = False) -&gt; Mapping | Sequence | Set:\n    r\"\"\"\n    Convert `FlatDict` to other `Mapping`.\n\n    Args:\n        flatten: Whether to flatten [`NestedDict`][chanfig.NestedDict].\n\n    See Also:\n        [`to_dict`][chanfig.utils.conversion.to_dict]: Implementation of `dict`.\n\n    **Alias**:\n\n    + `to_dict`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    return to_dict(self, flatten)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.dict(flatten)","title":"<code>flatten</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.to_dict","title":"to_dict","text":"Python<pre><code>to_dict(flatten: bool = False) -&gt; Mapping | Sequence | Set\n</code></pre> <p>Alias of <code>dict</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def to_dict(self, flatten: bool = False) -&gt; Mapping | Sequence | Set:\n    r\"\"\"\n    Alias of [`dict`][chanfig.FlatDict.dict].\n    \"\"\"\n\n    return self.dict(flatten)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.from_dict","title":"from_dict  <code>classmethod</code>","text":"Python<pre><code>from_dict(obj: Mapping | Sequence) -&gt; Any\n</code></pre> <p>Convert <code>Mapping</code> or <code>Sequence</code> to <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; FlatDict.from_dict({'a': 1, 'b': 2, 'c': 3})\nFlatDict(\n  ('a'): 1\n  ('b'): 2\n  ('c'): 3\n)\n&gt;&gt;&gt; FlatDict.from_dict([('a', 1), ('b', 2), ('c', 3)])\nFlatDict(\n  ('a'): 1\n  ('b'): 2\n  ('c'): 3\n)\n&gt;&gt;&gt; FlatDict.from_dict([{'a': 1}, {'b': 2}, {'c': 3}])\n[FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n&gt;&gt;&gt; FlatDict.from_dict({1, 2, 3})\n{1, 2, 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef from_dict(cls, obj: Mapping | Sequence) -&gt; Any:  # pylint: disable=R0911\n    r\"\"\"\n    Convert `Mapping` or `Sequence` to `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; FlatDict.from_dict({'a': 1, 'b': 2, 'c': 3})\n        FlatDict(\n          ('a'): 1\n          ('b'): 2\n          ('c'): 3\n        )\n        &gt;&gt;&gt; FlatDict.from_dict([('a', 1), ('b', 2), ('c', 3)])\n        FlatDict(\n          ('a'): 1\n          ('b'): 2\n          ('c'): 3\n        )\n        &gt;&gt;&gt; FlatDict.from_dict([{'a': 1}, {'b': 2}, {'c': 3}])\n        [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n        &gt;&gt;&gt; FlatDict.from_dict({1, 2, 3})\n        {1, 2, 3}\n    \"\"\"\n\n    return to_chanfig(obj, cls)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.sort","title":"sort","text":"Python<pre><code>sort(key: Callable | None = None, reverse: bool = False) -&gt; Self\n</code></pre> <p>Sort <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.sort().dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; d = FlatDict(b=2, c=3, a=1)\n&gt;&gt;&gt; d.sort().dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; a = [1]\n&gt;&gt;&gt; d = FlatDict(z=0, a=a)\n&gt;&gt;&gt; a.append(2)\n&gt;&gt;&gt; d.sort().dict()\n{'a': [1, 2], 'z': 0}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def sort(self, key: Callable | None = None, reverse: bool = False) -&gt; Self:\n    r\"\"\"\n    Sort `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.sort().dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; d = FlatDict(b=2, c=3, a=1)\n        &gt;&gt;&gt; d.sort().dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; a = [1]\n        &gt;&gt;&gt; d = FlatDict(z=0, a=a)\n        &gt;&gt;&gt; a.append(2)\n        &gt;&gt;&gt; d.sort().dict()\n        {'a': [1, 2], 'z': 0}\n    \"\"\"\n\n    items = sorted(self.items(), key=key, reverse=reverse)\n    self.clear()\n    for k, v in items:  # pylint: disable=C0103\n        self[k] = v\n    return self\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.interpolate","title":"interpolate","text":"Python<pre><code>interpolate(use_variable: bool = True, interpolators: MutableMapping | None = None, unsafe_eval: bool = False) -&gt; Self\n</code></pre> <p>Perform Variable interpolation.</p> <p>Variable interpolation allows you to set the value of one key to be the value of another key easily.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to convert values to <code>Variable</code> objects.</p> <code>True</code> <code>MutableMapping | None</code> <p>Mapping contains values for interpolation. Defaults to <code>self</code>.</p> <code>None</code> <code>bool</code> <p>Whether to evaluate interpolated values.</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If value is not interpolatable.</p> <code>ValueError</code> <p>If reference to itself.</p> <code>ValueError</code> <p>If has circular reference.</p> See Also <p>[Variable][<code>chanfig.Variable</code>]: Mutable wrapper of immutable objects.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n&gt;&gt;&gt; d.interpolate(unsafe_eval=True).dict()\n{'a': 1, 'b': 1, 'c': 1.1}\n&gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n&gt;&gt;&gt; d.interpolate().dict()\n{'a': 1, 'b': 1, 'c': '1.1'}\n&gt;&gt;&gt; isinstance(d.a, Variable)\nTrue\n&gt;&gt;&gt; d.a += 1\n&gt;&gt;&gt; d.dict()\n{'a': 2, 'b': 2, 'c': '1.1'}\n&gt;&gt;&gt; d.a is d.b\nTrue\n&gt;&gt;&gt; d.b is d.c\nFalse\n&gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${b}\")\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': '${a}', 'c': '${b}'}\n&gt;&gt;&gt; d.interpolate(False).dict()\n{'a': 1, 'b': 1, 'c': 1}\n&gt;&gt;&gt; isinstance(d.a, Variable)\nFalse\n&gt;&gt;&gt; d.a += 1\n&gt;&gt;&gt; d.dict()\n{'a': 2, 'b': 1, 'c': 1}\n&gt;&gt;&gt; d = FlatDict(a=1, b=\"${b}\", c=\"${b}\")\n&gt;&gt;&gt; d.interpolate().dict()\nTraceback (most recent call last):\nValueError: Cannot interpolate b to itself.\n&gt;&gt;&gt; d = FlatDict(a=\"${b}\", b=\"${c}\", c=\"${d}\", d=\"${a}\")\n&gt;&gt;&gt; d.interpolate().dict()\nTraceback (most recent call last):\nValueError: Circular reference found: a-&gt;b-&gt;c-&gt;d-&gt;a.\n&gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${d}\")\n&gt;&gt;&gt; d.interpolate().dict()\nTraceback (most recent call last):\nValueError: d is not found in FlatDict(\n  ('a'): 1\n  ('b'): '${a}'\n  ('c'): '${d}'\n).\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def interpolate(  # pylint: disable=R0912\n    self, use_variable: bool = True, interpolators: MutableMapping | None = None, unsafe_eval: bool = False\n) -&gt; Self:\n    r\"\"\"\n    Perform Variable interpolation.\n\n    Variable interpolation allows you to set the value of one key to be the value of another key easily.\n\n    Args:\n        use_variable: Whether to convert values to `Variable` objects.\n        interpolators: Mapping contains values for interpolation. Defaults to `self`.\n        unsafe_eval: Whether to evaluate interpolated values.\n\n    Raises:\n        ValueError: If value is not interpolatable.\n        ValueError: If reference to itself.\n        ValueError: If has circular reference.\n\n    See Also:\n        [Variable][`chanfig.Variable`]: Mutable wrapper of immutable objects.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n        &gt;&gt;&gt; d.interpolate(unsafe_eval=True).dict()\n        {'a': 1, 'b': 1, 'c': 1.1}\n        &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${a}.${b}\")\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': '${a}', 'c': '${a}.${b}'}\n        &gt;&gt;&gt; d.interpolate().dict()\n        {'a': 1, 'b': 1, 'c': '1.1'}\n        &gt;&gt;&gt; isinstance(d.a, Variable)\n        True\n        &gt;&gt;&gt; d.a += 1\n        &gt;&gt;&gt; d.dict()\n        {'a': 2, 'b': 2, 'c': '1.1'}\n        &gt;&gt;&gt; d.a is d.b\n        True\n        &gt;&gt;&gt; d.b is d.c\n        False\n        &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${b}\")\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': '${a}', 'c': '${b}'}\n        &gt;&gt;&gt; d.interpolate(False).dict()\n        {'a': 1, 'b': 1, 'c': 1}\n        &gt;&gt;&gt; isinstance(d.a, Variable)\n        False\n        &gt;&gt;&gt; d.a += 1\n        &gt;&gt;&gt; d.dict()\n        {'a': 2, 'b': 1, 'c': 1}\n        &gt;&gt;&gt; d = FlatDict(a=1, b=\"${b}\", c=\"${b}\")\n        &gt;&gt;&gt; d.interpolate().dict()\n        Traceback (most recent call last):\n        ValueError: Cannot interpolate b to itself.\n        &gt;&gt;&gt; d = FlatDict(a=\"${b}\", b=\"${c}\", c=\"${d}\", d=\"${a}\")\n        &gt;&gt;&gt; d.interpolate().dict()\n        Traceback (most recent call last):\n        ValueError: Circular reference found: a-&gt;b-&gt;c-&gt;d-&gt;a.\n        &gt;&gt;&gt; d = FlatDict(a=1, b=\"${a}\", c=\"${d}\")\n        &gt;&gt;&gt; d.interpolate().dict()\n        Traceback (most recent call last):\n        ValueError: d is not found in FlatDict(\n          ('a'): 1\n          ('b'): '${a}'\n          ('c'): '${d}'\n        ).\n    \"\"\"\n    # pylint: disable=C0103\n\n    interpolators = interpolators or self\n    placeholders: dict[str, list[str]] = {}\n    for key, value in self.all_items():\n        if isinstance(value, list):\n            for v in value:\n                self.find_placeholders(key, v, placeholders)\n        elif isinstance(value, Mapping):\n            for v in value.values():\n                self.find_placeholders(key, v, placeholders)\n        else:\n            self.find_placeholders(key, value, placeholders)\n    circular_references = find_circular_reference(placeholders)\n    if circular_references:\n        raise ValueError(f\"Circular reference found: {'-&gt;'.join(circular_references)}.\")\n    if use_variable:\n        placeholder_names = {i for j in placeholders.values() for i in j}\n        for name in list(placeholder_names.difference(placeholders.keys())):\n            if name not in interpolators:\n                raise ValueError(f\"{name} is not found in {interpolators}.\")\n            if not isinstance(interpolators[name], Variable):\n                interpolators[name] = Variable(interpolators[name])\n    for key, value in placeholders.items():\n        if isinstance(self[key], list):\n            for index, v in enumerate(self[key]):\n                self[key][index] = self.substitute(v, interpolators, value)\n        elif isinstance(self[key], Mapping):\n            for k, v in self[key].items():\n                self[key][k] = self.substitute(v, interpolators, value)\n        else:\n            self[key] = self.substitute(self[key], interpolators, value)\n        if unsafe_eval and isinstance(self[key], str):\n            with suppress(SyntaxError):\n                if isinstance(self[key], Variable):\n                    self[key].set(eval(self[key].value))\n                else:\n                    self[key] = eval(self[key])  # pylint: disable=W0123\n    return self\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.interpolate(use_variable)","title":"<code>use_variable</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.interpolate(interpolators)","title":"<code>interpolators</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.interpolate(unsafe_eval)","title":"<code>unsafe_eval</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.merge","title":"merge","text":"Python<pre><code>merge(*args: Any, overwrite: bool = True, **kwargs: Any) -&gt; Self\n</code></pre> <p>Merge <code>other</code> into <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p><code>Mapping</code> or <code>Sequence</code> to be merged.</p> <code>()</code> <code>bool</code> <p>Whether to overwrite existing values.</p> <code>True</code> <code>Any</code> <p><code>Mapping</code> to be merged.</p> <code>{}</code> <p>Alias:</p> <ul> <li><code>union</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; d.merge(n).dict()\n{'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n&gt;&gt;&gt; d.merge(l).dict()\n{'a': 1, 'b': 'b', 'c': 3, 'd': 4}\n&gt;&gt;&gt; FlatDict(a=1, b=1, c=1).union(FlatDict(b='b', c='c', d='d')).dict()  # alias\n{'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; d = FlatDict()\n&gt;&gt;&gt; d.merge({1: 1, 2: 2, 3:3}).dict()\n{1: 1, 2: 2, 3: 3}\n&gt;&gt;&gt; d.merge(d.clone()).dict()\n{1: 1, 2: 2, 3: 3}\n&gt;&gt;&gt; d.merge({1:3, 2:1, 3: 2, 4: 4, 5: 5}, overwrite=False).dict()\n{1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def merge(self, *args: Any, overwrite: bool = True, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Merge `other` into `FlatDict`.\n\n    Args:\n        *args: `Mapping` or `Sequence` to be merged.\n        overwrite: Whether to overwrite existing values.\n        **kwargs: `Mapping` to be merged.\n\n    **Alias**:\n\n    + `union`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; d.merge(n).dict()\n        {'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n        &gt;&gt;&gt; d.merge(l).dict()\n        {'a': 1, 'b': 'b', 'c': 3, 'd': 4}\n        &gt;&gt;&gt; FlatDict(a=1, b=1, c=1).union(FlatDict(b='b', c='c', d='d')).dict()  # alias\n        {'a': 1, 'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; d = FlatDict()\n        &gt;&gt;&gt; d.merge({1: 1, 2: 2, 3:3}).dict()\n        {1: 1, 2: 2, 3: 3}\n        &gt;&gt;&gt; d.merge(d.clone()).dict()\n        {1: 1, 2: 2, 3: 3}\n        &gt;&gt;&gt; d.merge({1:3, 2:1, 3: 2, 4: 4, 5: 5}, overwrite=False).dict()\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n    \"\"\"\n\n    if len(args) == 1:\n        args = args[0]\n        if isinstance(args, (PathLike, str, bytes)):\n            args = self.load(args)  # type: ignore[assignment]\n            warn(\n                \"merge file is deprecated and maybe removed in a future release. Use `merge_from_file` instead.\",\n                PendingDeprecationWarning,\n            )\n        self._merge(self, args, overwrite=overwrite)\n    elif len(args) &gt; 1:\n        self._merge(self, args, overwrite=overwrite)\n    if kwargs:\n        self._merge(self, kwargs, overwrite=overwrite)\n    return self\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.merge(*args)","title":"<code>*args</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.merge(overwrite)","title":"<code>overwrite</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.merge(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.union","title":"union","text":"Python<pre><code>union(*args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Alias of <code>merge</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def union(self, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Alias of [`merge`][chanfig.FlatDict.merge].\n    \"\"\"\n    return self.merge(*args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.merge_from_file","title":"merge_from_file","text":"Python<pre><code>merge_from_file(file: File, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Merge content of <code>file</code> into <code>FlatDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>File</code> required <code>Any</code> <p>Passed to <code>load</code>.</p> <code>()</code> <code>Any</code> <p>Passed to <code>load</code>.</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=1)\n&gt;&gt;&gt; d.merge_from_file(\"tests/test.yaml\").dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def merge_from_file(self, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Merge content of `file` into `FlatDict`.\n\n    Args:\n        file (File):\n        *args: Passed to [`load`][chanfig.FlatDict.load].\n        **kwargs: Passed to [`load`][chanfig.FlatDict.load].\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=1)\n        &gt;&gt;&gt; d.merge_from_file(\"tests/test.yaml\").dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    return self.merge(self.load(file, *args, **kwargs))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.merge_from_file(file)","title":"<code>file</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.merge_from_file(*args)","title":"<code>*args</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.merge_from_file(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.intersect","title":"intersect","text":"Python<pre><code>intersect(other: Mapping | Iterable | PathStr) -&gt; Self\n</code></pre> <p>Intersection of <code>FlatDict</code> and <code>other</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Mapping | Iterable | PathStr</code> required <p>Alias:</p> <ul> <li><code>inter</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; d.intersect(n).dict()\n{}\n&gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n&gt;&gt;&gt; d.intersect(l).dict()\n{'c': 3}\n&gt;&gt;&gt; d.merge(l).intersect(\"tests/test.yaml\").dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; d.intersect(1)\nTraceback (most recent call last):\nTypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n&gt;&gt;&gt; d.inter(FlatDict(b='b', c='c', d='d')).dict()  # alias\n{}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def intersect(self, other: Mapping | Iterable | PathStr) -&gt; Self:\n    r\"\"\"\n    Intersection of `FlatDict` and `other`.\n\n    Args:\n        other (Mapping | Iterable | PathStr):\n\n    **Alias**:\n\n    + `inter`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; d.intersect(n).dict()\n        {}\n        &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n        &gt;&gt;&gt; d.intersect(l).dict()\n        {'c': 3}\n        &gt;&gt;&gt; d.merge(l).intersect(\"tests/test.yaml\").dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; d.intersect(1)\n        Traceback (most recent call last):\n        TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n        &gt;&gt;&gt; d.inter(FlatDict(b='b', c='c', d='d')).dict()  # alias\n        {}\n    \"\"\"\n\n    if isinstance(other, (PathLike, str, bytes)):\n        other = self.load(other)\n    if isinstance(other, (Mapping,)):\n        other = other.items()\n    if not isinstance(other, Iterable):\n        raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n    return self.empty(**{key: value for key, value in other if key in self and self[key] == value})  # type: ignore\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.intersect(other)","title":"<code>other</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.inter","title":"inter","text":"Python<pre><code>inter(other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Alias of <code>intersect</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def inter(self, other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Alias of [`intersect`][chanfig.FlatDict.intersect].\n    \"\"\"\n    return self.intersect(other, *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.difference","title":"difference","text":"Python<pre><code>difference(other: Mapping | Iterable | PathStr) -&gt; Self\n</code></pre> <p>Difference between <code>FlatDict</code> and <code>other</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Mapping | Iterable | PathStr</code> required <p>Alias:</p> <ul> <li><code>diff</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; d.difference(n).dict()\n{'b': 'b', 'c': 'c', 'd': 'd'}\n&gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n&gt;&gt;&gt; d.difference(l).dict()\n{'d': 4}\n&gt;&gt;&gt; d.merge(l).difference(\"tests/test.yaml\").dict()\n{}\n&gt;&gt;&gt; d.difference(1)\nTraceback (most recent call last):\nTypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n&gt;&gt;&gt; FlatDict(a=1, b=1, c=1).diff(FlatDict(b='b', c='c', d='d')).dict()  # alias\n{'b': 'b', 'c': 'c', 'd': 'd'}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def difference(self, other: Mapping | Iterable | PathStr) -&gt; Self:\n    r\"\"\"\n    Difference between `FlatDict` and `other`.\n\n    Args:\n        other:\n\n    **Alias**:\n\n    + `diff`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; n = {'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; d.difference(n).dict()\n        {'b': 'b', 'c': 'c', 'd': 'd'}\n        &gt;&gt;&gt; l = [('c', 3), ('d', 4)]\n        &gt;&gt;&gt; d.difference(l).dict()\n        {'d': 4}\n        &gt;&gt;&gt; d.merge(l).difference(\"tests/test.yaml\").dict()\n        {}\n        &gt;&gt;&gt; d.difference(1)\n        Traceback (most recent call last):\n        TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n        &gt;&gt;&gt; FlatDict(a=1, b=1, c=1).diff(FlatDict(b='b', c='c', d='d')).dict()  # alias\n        {'b': 'b', 'c': 'c', 'd': 'd'}\n    \"\"\"\n\n    if isinstance(other, (PathLike, str, bytes)):\n        other = self.load(other)\n    if isinstance(other, (Mapping,)):\n        other = other.items()\n    if not isinstance(other, Iterable):\n        raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n    return self.empty(\n        **{key: value for key, value in other if key not in self or self[key] != value}  # type: ignore[misc]\n    )\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.difference(other)","title":"<code>other</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.diff","title":"diff","text":"Python<pre><code>diff(other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Alias of <code>difference</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def diff(self, other: Mapping | Iterable | PathStr, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Alias of [`difference`][chanfig.FlatDict.difference].\n    \"\"\"\n    return self.difference(other, *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.to","title":"to","text":"Python<pre><code>to(cls: str | device | dtype) -&gt; Self\n</code></pre> <p>Convert values of <code>FlatDict</code> to target <code>cls</code>.</p> <p>Parameters:</p> Name Type Description Default <code>str | device | dtype</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.to(int)\nTraceback (most recent call last):\nTypeError: to() only support torch.dtype and torch.device, but got &lt;class 'int'&gt;.\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def to(self, cls: str | TorchDevice | TorchDType) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Convert values of `FlatDict` to target `cls`.\n\n    Args:\n        cls (str | torch.device | torch.dtype):\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.to(int)\n        Traceback (most recent call last):\n        TypeError: to() only support torch.dtype and torch.device, but got &lt;class 'int'&gt;.\n    \"\"\"\n\n    # pylint: disable=C0103\n\n    if isinstance(cls, (str, TorchDevice, TorchDType)):\n        for k, v in self.all_items():\n            if hasattr(v, \"to\"):\n                self[k] = v.to(cls)\n        return self\n\n    raise TypeError(f\"to() only support torch.dtype and torch.device, but got {cls}.\")\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.to(cls)","title":"<code>cls</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.cpu","title":"cpu","text":"Python<pre><code>cpu() -&gt; Self\n</code></pre> <p>Move all tensors to cpu.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n&gt;&gt;&gt; d.cpu().dict()\n{'a': tensor(1, device='cpu')}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def cpu(self) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Move all tensors to cpu.\n\n    Examples:\n        &gt;&gt;&gt; import torch\n        &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n        &gt;&gt;&gt; d.cpu().dict()  # doctest: +SKIP\n        {'a': tensor(1, device='cpu')}\n    \"\"\"\n\n    return self.to(TorchDevice(\"cpu\"))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.gpu","title":"gpu","text":"Python<pre><code>gpu() -&gt; Self\n</code></pre> <p>Move all tensors to gpu.</p> <p>Alias:</p> <ul> <li><code>cuda</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n&gt;&gt;&gt; d.gpu().dict()\n{'a': tensor(1, device='cuda:0')}\n&gt;&gt;&gt; d.cuda().dict()  # alias\n{'a': tensor(1, device='cuda:0')}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def gpu(self) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Move all tensors to gpu.\n\n    **Alias**:\n\n    + `cuda`\n\n    Examples:\n        &gt;&gt;&gt; import torch\n        &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n        &gt;&gt;&gt; d.gpu().dict()  # doctest: +SKIP\n        {'a': tensor(1, device='cuda:0')}\n        &gt;&gt;&gt; d.cuda().dict()  # alias  # doctest: +SKIP\n        {'a': tensor(1, device='cuda:0')}\n    \"\"\"\n\n    return self.to(TorchDevice(\"cuda\"))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.cuda","title":"cuda","text":"Python<pre><code>cuda() -&gt; Self\n</code></pre> <p>Alias of <code>gpu</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def cuda(self) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Alias of [`gpu`][chanfig.FlatDict.gpu].\n    \"\"\"\n    return self.gpu()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.tpu","title":"tpu","text":"Python<pre><code>tpu() -&gt; Self\n</code></pre> <p>Move all tensors to tpu.</p> <p>Alias:</p> <ul> <li><code>xla</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n&gt;&gt;&gt; d.tpu().dict()\n{'a': tensor(1, device='xla:0')}\n&gt;&gt;&gt; d.xla().dict()  # alias\n{'a': tensor(1, device='xla:0')}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def tpu(self) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Move all tensors to tpu.\n\n    **Alias**:\n\n    + `xla`\n\n    Examples:\n        &gt;&gt;&gt; import torch\n        &gt;&gt;&gt; d = FlatDict(a=torch.tensor(1))\n        &gt;&gt;&gt; d.tpu().dict()  # doctest: +SKIP\n        {'a': tensor(1, device='xla:0')}\n        &gt;&gt;&gt; d.xla().dict()  # alias  # doctest: +SKIP\n        {'a': tensor(1, device='xla:0')}\n    \"\"\"\n\n    return self.to(TorchDevice(\"xla\"))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.xla","title":"xla","text":"Python<pre><code>xla() -&gt; Self\n</code></pre> <p>Alias of <code>tpu</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def xla(self) -&gt; Self:  # pragma: no cover\n    r\"\"\"\n    Alias of [`tpu`][chanfig.FlatDict.tpu].\n    \"\"\"\n    return self.tpu()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.copy","title":"copy","text":"Python<pre><code>copy() -&gt; Self\n</code></pre> <p>Create a shallow copy of <code>FlatDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=[])\n&gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n&gt;&gt;&gt; c = d.copy()\n&gt;&gt;&gt; c.dict()\n{'a': []}\n&gt;&gt;&gt; d.a.append(1)\n&gt;&gt;&gt; c.dict()\n{'a': [1]}\n&gt;&gt;&gt; c.getattr(\"name\")\n'Chang'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def copy(self) -&gt; Self:\n    r\"\"\"\n    Create a shallow copy of `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=[])\n        &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n        &gt;&gt;&gt; c = d.copy()\n        &gt;&gt;&gt; c.dict()\n        {'a': []}\n        &gt;&gt;&gt; d.a.append(1)\n        &gt;&gt;&gt; c.dict()\n        {'a': [1]}\n        &gt;&gt;&gt; c.getattr(\"name\")\n        'Chang'\n    \"\"\"\n\n    return copy(self)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.deepcopy","title":"deepcopy","text":"Python<pre><code>deepcopy(memo: Mapping | None = None) -&gt; Self\n</code></pre> <p>Create a deep copy of <code>FlatDict</code>.</p> <p>Alias:</p> <ul> <li><code>clone</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=[])\n&gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n&gt;&gt;&gt; c = d.deepcopy()\n&gt;&gt;&gt; c.dict()\n{'a': []}\n&gt;&gt;&gt; d.a.append(1)\n&gt;&gt;&gt; c.dict()\n{'a': []}\n&gt;&gt;&gt; c.getattr(\"name\")\n'Chang'\n&gt;&gt;&gt; d == d.clone()  # alias\nTrue\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def deepcopy(self, memo: Mapping | None = None) -&gt; Self:  # pylint: disable=W0613\n    r\"\"\"\n    Create a deep copy of `FlatDict`.\n\n    **Alias**:\n\n    + `clone`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=[])\n        &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n        &gt;&gt;&gt; c = d.deepcopy()\n        &gt;&gt;&gt; c.dict()\n        {'a': []}\n        &gt;&gt;&gt; d.a.append(1)\n        &gt;&gt;&gt; c.dict()\n        {'a': []}\n        &gt;&gt;&gt; c.getattr(\"name\")\n        'Chang'\n        &gt;&gt;&gt; d == d.clone()  # alias\n        True\n    \"\"\"\n\n    return deepcopy(self)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.clone","title":"clone","text":"Python<pre><code>clone(memo: Mapping | None = None) -&gt; Self\n</code></pre> <p>Alias of <code>deepcopy</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def clone(self, memo: Mapping | None = None) -&gt; Self:\n    r\"\"\"\n    Alias of [`deepcopy`][chanfig.FlatDict.deepcopy].\n    \"\"\"\n    return self.deepcopy(memo=memo)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.save","title":"save","text":"Python<pre><code>save(file: File, method: str = None, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Save <code>FlatDict</code> to file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If save to <code>IO</code> and <code>method</code> is not specified.</p> <code>TypeError</code> <p>If save to unsupported extension.</p> <p>Alias:</p> <ul> <li><code>save</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.save(\"tests/test.yaml\")\n&gt;&gt;&gt; d.save(\"test.conf\")\nTraceback (most recent call last):\nTypeError: `file='test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n&gt;&gt;&gt; with open(\"test.yaml\", \"w\") as f:\n...     d.save(f)\nTraceback (most recent call last):\nValueError: `method` must be specified when saving to IO.\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def save(  # pylint: disable=W1113\n    self, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n) -&gt; None:\n    r\"\"\"\n    Save `FlatDict` to file.\n\n    Raises:\n        ValueError: If save to `IO` and `method` is not specified.\n        TypeError: If save to unsupported extension.\n\n    **Alias**:\n\n    + `save`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.save(\"tests/test.yaml\")\n        &gt;&gt;&gt; d.save(\"test.conf\")\n        Traceback (most recent call last):\n        TypeError: `file='test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n        &gt;&gt;&gt; with open(\"test.yaml\", \"w\") as f:\n        ...     d.save(f)\n        Traceback (most recent call last):\n        ValueError: `method` must be specified when saving to IO.\n    \"\"\"\n\n    if method is None:\n        if isinstance(file, (IOBase, IO)):\n            raise ValueError(\"`method` must be specified when saving to IO.\")\n        method = splitext(file)[-1][1:]\n    extension = method.lower()\n    if extension in YAML_EXTENSIONS:\n        return self.yaml(file=file, *args, **kwargs)  # type: ignore[misc]  # noqa: B026\n    if extension in JSON_EXTENSIONS:\n        return self.json(file=file, *args, **kwargs)  # type: ignore[misc]  # noqa: B026\n    raise TypeError(f\"`file={file!r}` should be in {JSON_EXTENSIONS} or {YAML_EXTENSIONS}, but got {extension}.\")\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.dump","title":"dump","text":"Python<pre><code>dump(file: File, method: str = None, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Alias of <code>save</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def dump(  # pylint: disable=W1113\n    self, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n) -&gt; None:\n    r\"\"\"\n    Alias of [`save`][chanfig.FlatDict.save].\n    \"\"\"\n    return self.save(file, method, *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.load","title":"load  <code>classmethod</code>","text":"Python<pre><code>load(file: File, method: str = None, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Load <code>FlatDict</code> from file.</p> <p>Parameters:</p> Name Type Description Default <code>File</code> <p>File to load from.</p> required <code>str</code> <p>File type, should be in <code>JSON_EXTENSIONS</code> or <code>YAML_EXTENSIONS</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If load from <code>IO</code> and <code>method</code> is not specified.</p> <code>TypeError</code> <p>If dump to unsupported extension.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict.load(\"tests/test.yaml\")\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; d.load(\"tests/test.conf\")\nTraceback (most recent call last):\nTypeError: `file='tests/test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n&gt;&gt;&gt; with open(\"tests/test.yaml\") as f:\n...     d.load(f)\nTraceback (most recent call last):\nValueError: `method` must be specified when loading from IO.\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef load(  # pylint: disable=W1113\n    cls, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n) -&gt; Self:\n    \"\"\"\n    Load `FlatDict` from file.\n\n    Args:\n        file: File to load from.\n        method: File type, should be in `JSON_EXTENSIONS` or `YAML_EXTENSIONS`.\n\n    Raises:\n        ValueError: If load from `IO` and `method` is not specified.\n        TypeError: If dump to unsupported extension.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict.load(\"tests/test.yaml\")\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; d.load(\"tests/test.conf\")\n        Traceback (most recent call last):\n        TypeError: `file='tests/test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n        &gt;&gt;&gt; with open(\"tests/test.yaml\") as f:\n        ...     d.load(f)\n        Traceback (most recent call last):\n        ValueError: `method` must be specified when loading from IO.\n    \"\"\"\n\n    if method is None:\n        if isinstance(file, (IOBase, IO)):\n            raise ValueError(\"`method` must be specified when loading from IO.\")\n        method = splitext(file)[-1][1:]\n    extension = method.lower()\n    if extension in JSON_EXTENSIONS:\n        return cls.from_json(file, *args, **kwargs)\n    if extension in YAML_EXTENSIONS:\n        return cls.from_yaml(file, *args, **kwargs)\n    raise TypeError(f\"`file={file!r}` should be in {JSON_EXTENSIONS} or {YAML_EXTENSIONS}, but got {extension}.\")\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.load(file)","title":"<code>file</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.load(method)","title":"<code>method</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.json","title":"json","text":"Python<pre><code>json(file: File, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Dump <code>FlatDict</code> to json file.</p> <p>This method internally calls <code>self.jsons()</code> to generate json string. You may overwrite <code>jsons</code> in case something is not json serializable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.json(\"tests/test.json\")\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def json(self, file: File, *args: Any, **kwargs: Any) -&gt; None:\n    r\"\"\"\n    Dump `FlatDict` to json file.\n\n    This method internally calls `self.jsons()` to generate json string.\n    You may overwrite `jsons` in case something is not json serializable.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.json(\"tests/test.json\")\n    \"\"\"\n\n    with self.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n        fp.write(self.jsons(*args, **kwargs))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.from_json","title":"from_json  <code>classmethod</code>","text":"Python<pre><code>from_json(file: File, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Construct <code>FlatDict</code> from json file.</p> <p>This method internally calls <code>self.from_jsons()</code> to construct object from json string. You may overwrite <code>from_jsons</code> in case something is not json serializable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict.from_json('tests/test.json')\n&gt;&gt;&gt; d.dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef from_json(cls, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Construct `FlatDict` from json file.\n\n    This method internally calls `self.from_jsons()` to construct object from json string.\n    You may overwrite `from_jsons` in case something is not json serializable.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict.from_json('tests/test.json')\n        &gt;&gt;&gt; d.dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    with cls.open(file) as fp:  # pylint: disable=C0103\n        if isinstance(file, (IOBase, IO)):\n            return cls.from_jsons(fp.getvalue(), *args, **kwargs)  # type: ignore[union-attr]\n        return cls.from_jsons(fp.read(), *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.jsons","title":"jsons","text":"Python<pre><code>jsons(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Dump <code>FlatDict</code> to json string.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.jsons()\n'{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def jsons(self, *args: Any, **kwargs: Any) -&gt; str:\n    r\"\"\"\n    Dump `FlatDict` to json string.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.jsons()\n        '{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}'\n    \"\"\"\n\n    kwargs.setdefault(\"cls\", JsonEncoder)\n    kwargs.setdefault(\"indent\", self.getattr(\"indent\", 2))\n    return json_dumps(self.dict(), *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.from_jsons","title":"from_jsons  <code>classmethod</code>","text":"Python<pre><code>from_jsons(string: str, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Construct <code>FlatDict</code> from json string.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; FlatDict.from_jsons('{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}').dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; FlatDict.from_jsons('[[\"a\", 1], [\"b\", 2], [\"c\", 3]]').dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; FlatDict.from_jsons('[{\"a\": 1}, {\"b\": 2}, {\"c\": 3}]')\n[FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef from_jsons(cls, string: str, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Construct `FlatDict` from json string.\n\n    Examples:\n        &gt;&gt;&gt; FlatDict.from_jsons('{\\n  \"a\": 1,\\n  \"b\": 2,\\n  \"c\": 3\\n}').dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; FlatDict.from_jsons('[[\"a\", 1], [\"b\", 2], [\"c\", 3]]').dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; FlatDict.from_jsons('[{\"a\": 1}, {\"b\": 2}, {\"c\": 3}]')\n        [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n    \"\"\"\n\n    return cls.from_dict(json_loads(string, *args, **kwargs))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.yaml","title":"yaml","text":"Python<pre><code>yaml(file: File, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Dump <code>FlatDict</code> to yaml file.</p> <p>This method internally calls <code>self.yamls()</code> to generate yaml string. You may overwrite <code>yamls</code> in case something is not yaml serializable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n&gt;&gt;&gt; d.yaml(\"tests/test.yaml\")\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def yaml(self, file: File, *args: Any, **kwargs: Any) -&gt; None:\n    r\"\"\"\n    Dump `FlatDict` to yaml file.\n\n    This method internally calls `self.yamls()` to generate yaml string.\n    You may overwrite `yamls` in case something is not yaml serializable.\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=1, b=2, c=3)\n        &gt;&gt;&gt; d.yaml(\"tests/test.yaml\")\n    \"\"\"\n\n    with self.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n        self.yamls(fp, *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.from_yaml","title":"from_yaml  <code>classmethod</code>","text":"Python<pre><code>from_yaml(file: File, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Construct <code>FlatDict</code> from yaml file.</p> <p>This method internally calls <code>self.from_yamls()</code> to construct object from yaml string. You may overwrite <code>from_yamls</code> in case something is not yaml serializable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; FlatDict.from_yaml('tests/test.yaml').dict()\n{'a': 1, 'b': 2, 'c': 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef from_yaml(cls, file: File, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Construct `FlatDict` from yaml file.\n\n    This method internally calls `self.from_yamls()` to construct object from yaml string.\n    You may overwrite `from_yamls` in case something is not yaml serializable.\n\n    Examples:\n        &gt;&gt;&gt; FlatDict.from_yaml('tests/test.yaml').dict()\n        {'a': 1, 'b': 2, 'c': 3}\n    \"\"\"\n\n    kwargs.setdefault(\"Loader\", YamlLoader)\n    with cls.open(file) as fp:  # pylint: disable=C0103\n        if isinstance(file, (IOBase, IO)):\n            return cls.from_yamls(fp.getvalue(), *args, **kwargs)  # type: ignore[union-attr]\n        content = yaml_load(fp, *args, **kwargs)\n        return cls.from_dict(content)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.yamls","title":"yamls","text":"Python<pre><code>yamls(*args: Any, **kwargs: Any) -&gt; str\n</code></pre> <p>Dump <code>FlatDict</code> to yaml string.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; FlatDict(a=1, b=2, c=3).yamls()\n'a: 1\\nb: 2\\nc: 3\\n'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def yamls(self, *args: Any, **kwargs: Any) -&gt; str:\n    r\"\"\"\n    Dump `FlatDict` to yaml string.\n\n    Examples:\n        &gt;&gt;&gt; FlatDict(a=1, b=2, c=3).yamls()\n        'a: 1\\nb: 2\\nc: 3\\n'\n    \"\"\"\n\n    kwargs.setdefault(\"Dumper\", YamlDumper)\n    kwargs.setdefault(\"indent\", self.getattr(\"indent\", 2))\n    return yaml_dump(self.dict(), *args, **kwargs)\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.from_yamls","title":"from_yamls  <code>classmethod</code>","text":"Python<pre><code>from_yamls(string: str, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Construct <code>FlatDict</code> from yaml string.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; FlatDict.from_yamls('a: 1\\nb: 2\\nc: 3\\n').dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; FlatDict.from_yamls('- - a\\n  - 1\\n- - b\\n  - 2\\n- - c\\n  - 3\\n').dict()\n{'a': 1, 'b': 2, 'c': 3}\n&gt;&gt;&gt; FlatDict.from_yamls('- a: 1\\n- b: 2\\n- c: 3\\n')\n[FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef from_yamls(cls, string: str, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Construct `FlatDict` from yaml string.\n\n    Examples:\n        &gt;&gt;&gt; FlatDict.from_yamls('a: 1\\nb: 2\\nc: 3\\n').dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; FlatDict.from_yamls('- - a\\n  - 1\\n- - b\\n  - 2\\n- - c\\n  - 3\\n').dict()\n        {'a': 1, 'b': 2, 'c': 3}\n        &gt;&gt;&gt; FlatDict.from_yamls('- a: 1\\n- b: 2\\n- c: 3\\n')\n        [FlatDict(('a'): 1), FlatDict(('b'): 2), FlatDict(('c'): 3)]\n    \"\"\"\n\n    kwargs.setdefault(\"Loader\", YamlLoader)\n    return cls.from_dict(yaml_load(string, *args, **kwargs))\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.open","title":"open  <code>staticmethod</code>","text":"Python<pre><code>open(file: File, *args: Any, encoding: str = 'utf-8', **kwargs: Any) -&gt; Generator[IOBase | IO, Any, Any]\n</code></pre> <p>Open file IO from file path or IO.</p> <p>This methods extends the ability of built-in <code>open</code> by allowing it to accept an <code>IOBase</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>File</code> <p>File path or IO.</p> required <code>Any</code> <p>Additional arguments passed to <code>open</code>. Defaults to ().</p> <code>()</code> <code>Any</code> <p>Any Additional keyword arguments passed to <code>open</code>. Defaults to {}.</p> <code>{}</code> <p>Yields:</p> Type Description <code>Generator[IOBase | IO, Any, Any]</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; with FlatDict.open(\"tests/test.yaml\") as fp:\n...     print(fp.read())\na: 1\nb: 2\nc: 3\n\n&gt;&gt;&gt; io = open(\"tests/test.yaml\")\n&gt;&gt;&gt; with FlatDict.open(io) as fp:\n...     print(fp.read())\na: 1\nb: 2\nc: 3\n\n&gt;&gt;&gt; with FlatDict.open(123, mode=\"w\") as fp:\n...     print(fp.read())\nTraceback (most recent call last):\nTypeError: expected str, bytes, os.PathLike, IO or IOBase, not int\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@staticmethod\n@contextmanager\ndef open(file: File, *args: Any, encoding: str = \"utf-8\", **kwargs: Any) -&gt; Generator[IOBase | IO, Any, Any]:\n    r\"\"\"\n    Open file IO from file path or IO.\n\n    This methods extends the ability of built-in `open` by allowing it to accept an `IOBase` object.\n\n    Args:\n        file: File path or IO.\n        *args: Additional arguments passed to `open`.\n            Defaults to ().\n        **kwargs: Any\n            Additional keyword arguments passed to `open`.\n            Defaults to {}.\n\n    Yields:\n        (Generator[IOBase | IO, Any, Any]):\n\n    Examples:\n        &gt;&gt;&gt; with FlatDict.open(\"tests/test.yaml\") as fp:\n        ...     print(fp.read())\n        a: 1\n        b: 2\n        c: 3\n        &lt;BLANKLINE&gt;\n        &gt;&gt;&gt; io = open(\"tests/test.yaml\")\n        &gt;&gt;&gt; with FlatDict.open(io) as fp:\n        ...     print(fp.read())\n        a: 1\n        b: 2\n        c: 3\n        &lt;BLANKLINE&gt;\n        &gt;&gt;&gt; with FlatDict.open(123, mode=\"w\") as fp:\n        ...     print(fp.read())\n        Traceback (most recent call last):\n        TypeError: expected str, bytes, os.PathLike, IO or IOBase, not int\n    \"\"\"\n\n    if isinstance(file, (IOBase, IO)):\n        yield file\n    elif isinstance(file, (PathLike, str, bytes)):\n        try:\n            file = open(file, *args, encoding=encoding, **kwargs)  # type: ignore[call-overload] # noqa: SIM115\n            yield file  # type: ignore[misc]\n        finally:\n            with suppress(Exception):\n                file.close()  # type: ignore[union-attr]\n    else:\n        raise TypeError(f\"expected str, bytes, os.PathLike, IO or IOBase, not {type(file).__name__}\")\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.open(file)","title":"<code>file</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.open(*args)","title":"<code>*args</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.open(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"flat_dict/#chanfig.FlatDict.empty","title":"empty  <code>classmethod</code>","text":"Python<pre><code>empty(*args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Initialise an empty <code>FlatDict</code>.</p> <p>This method is helpful when you inheriting <code>FlatDict</code> with default values defined in <code>__init__()</code>. As use <code>type(self)()</code> in this case would copy all the default values, which might not be desired.</p> <p>This method will preserve everything in <code>FlatDict.__class__.__dict__</code>.</p> See Also <p><code>empty_like</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=[])\n&gt;&gt;&gt; c = d.empty()\n&gt;&gt;&gt; c.dict()\n{}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>@classmethod\ndef empty(cls, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Initialise an empty `FlatDict`.\n\n    This method is helpful when you inheriting `FlatDict` with default values defined in `__init__()`.\n    As use `type(self)()` in this case would copy all the default values, which might not be desired.\n\n    This method will preserve everything in `FlatDict.__class__.__dict__`.\n\n    See Also:\n        [`empty_like`][chanfig.FlatDict.empty_like]\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=[])\n        &gt;&gt;&gt; c = d.empty()\n        &gt;&gt;&gt; c.dict()\n        {}\n    \"\"\"\n\n    empty = cls.__new__(cls)\n    empty.merge(*args, **kwargs)  # pylint: disable=W0212\n    return empty\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.empty_like","title":"empty_like","text":"Python<pre><code>empty_like(*args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Initialise an empty copy of <code>FlatDict</code>.</p> <p>This method will preserve everything in <code>FlatDict.__class__.__dict__</code> and <code>FlatDict.__dict__</code>.</p> <p>For example, <code>property</code>s are saved in <code>__dict__</code>, they will keep their original reference after calling this method.</p> See Also <p><code>empty</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=[])\n&gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n&gt;&gt;&gt; c = d.empty_like()\n&gt;&gt;&gt; c.dict()\n{}\n&gt;&gt;&gt; c.getattr(\"name\")\n'Chang'\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def empty_like(self, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Initialise an empty copy of `FlatDict`.\n\n    This method will preserve everything in `FlatDict.__class__.__dict__` and `FlatDict.__dict__`.\n\n    For example, `property`s are saved in `__dict__`, they will keep their original reference after calling this\n    method.\n\n    See Also:\n        [`empty`][chanfig.FlatDict.empty]\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=[])\n        &gt;&gt;&gt; d.setattr(\"name\", \"Chang\")\n        &gt;&gt;&gt; c = d.empty_like()\n        &gt;&gt;&gt; c.dict()\n        {}\n        &gt;&gt;&gt; c.getattr(\"name\")\n        'Chang'\n    \"\"\"\n\n    empty = self.empty(*args, **kwargs)\n    empty.__dict__.update(self.__dict__)\n    return empty\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.all_keys","title":"all_keys","text":"Python<pre><code>all_keys() -&gt; Generator\n</code></pre> <p>Equivalent to <code>keys</code>.</p> <p>This method is provided solely to make methods work on both <code>FlatDict</code> and <code>NestedDict</code>.</p> See Also <p><code>all_keys</code></p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def all_keys(self) -&gt; Generator:\n    r\"\"\"\n    Equivalent to `keys`.\n\n    This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n    See Also:\n        [`all_keys`][chanfig.NestedDict.all_keys]\n    \"\"\"\n    yield from self.keys()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.all_values","title":"all_values","text":"Python<pre><code>all_values() -&gt; Generator\n</code></pre> <p>Equivalent to <code>keys</code>.</p> <p>This method is provided solely to make methods work on both <code>FlatDict</code> and <code>NestedDict</code>.</p> See Also <p><code>all_values</code></p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def all_values(self) -&gt; Generator:\n    r\"\"\"\n    Equivalent to `keys`.\n\n    This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n    See Also:\n        [`all_values`][chanfig.NestedDict.all_values]\n    \"\"\"\n    yield from self.values()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.all_items","title":"all_items","text":"Python<pre><code>all_items() -&gt; Generator\n</code></pre> <p>Equivalent to <code>keys</code>.</p> <p>This method is provided solely to make methods work on both <code>FlatDict</code> and <code>NestedDict</code>.</p> See Also <p><code>all_items</code></p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def all_items(self) -&gt; Generator:\n    r\"\"\"\n    Equivalent to `keys`.\n\n    This method is provided solely to make methods work on both `FlatDict` and `NestedDict`.\n\n    See Also:\n        [`all_items`][chanfig.NestedDict.all_items]\n    \"\"\"\n    yield from self.items()\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.dropnull","title":"dropnull","text":"Python<pre><code>dropnull() -&gt; Self\n</code></pre> <p>Drop key-value pairs with <code>Null</code> value.</p> <p>Alias:</p> <ul> <li><code>dropna</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = FlatDict(a=Null, b=Null, c=3)\n&gt;&gt;&gt; d.dict()\n{'a': Null, 'b': Null, 'c': 3}\n&gt;&gt;&gt; d.dropnull().dict()\n{'c': 3}\n&gt;&gt;&gt; d.dropna().dict()  # alias\n{'c': 3}\n</code></pre> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def dropnull(self) -&gt; Self:\n    r\"\"\"\n    Drop key-value pairs with `Null` value.\n\n    **Alias**:\n\n    + `dropna`\n\n    Examples:\n        &gt;&gt;&gt; d = FlatDict(a=Null, b=Null, c=3)\n        &gt;&gt;&gt; d.dict()\n        {'a': Null, 'b': Null, 'c': 3}\n        &gt;&gt;&gt; d.dropnull().dict()\n        {'c': 3}\n        &gt;&gt;&gt; d.dropna().dict()  # alias\n        {'c': 3}\n    \"\"\"\n\n    return self.empty({k: v for k, v in self.all_items() if v is not Null})\n</code></pre>"},{"location":"flat_dict/#chanfig.FlatDict.dropna","title":"dropna","text":"Python<pre><code>dropna() -&gt; Self\n</code></pre> <p>Alias of <code>dropnull</code>.</p> Source code in <code>chanfig/flat_dict.py</code> Python<pre><code>def dropna(self) -&gt; Self:\n    r\"\"\"\n    Alias of [`dropnull`][chanfig.FlatDict.dropnull].\n    \"\"\"\n    return self.dropnull()\n</code></pre>"},{"location":"nested_dict/","title":"NestedDict","text":""},{"location":"nested_dict/#chanfig.NestedDict","title":"chanfig.NestedDict","text":"<p>               Bases: <code>DefaultDict</code></p> <p><code>NestedDict</code> further extends <code>DefaultDict</code> object by introducing a nested structure with <code>separator</code>. By default, <code>separator</code> is <code>.</code>, but it could be modified in subclass or by calling <code>dict.setattr('separator', S)</code>.</p> <p><code>d = NestedDict({\"a.b.c\": 1})</code> is equivalent to <code>d = NestedDict({\"a\": {\"b\": {\"c\": 1}}})</code>, and you can access members either by <code>d[\"a.b.c\"]</code> or more simply by <code>d.a.b.c</code>.</p> <p>This behaviour allows you to pass keyword arguments to other functions as easy as <code>func1(**d.func1)</code>.</p> <p>Since <code>NestedDict</code> inherits from <code>DefaultDict</code>, it also supports <code>default_factory</code>. With <code>default_factory</code>, you can assign <code>d.a.b.c = 1</code> without assign <code>d.a = NestedDict()</code> in the first place. Note that the constructor of <code>NestedDict</code> is different from <code>DefaultDict</code>, <code>default_factory</code> is not a positional argument, and must be set in a keyword argument.</p> <p><code>NestedDict</code> also introduce <code>all_keys</code>, <code>all_values</code>, <code>all_items</code> methods to get all keys, values, items respectively in the nested structure.</p> <p>Attributes:</p> Name Type Description <code>convert_mapping</code> <p>bool = False If <code>True</code>, all new values with type of <code>Mapping</code> will be converted to <code>default_factory</code>. If <code>default_factory</code> is <code>Null</code>, will create an empty instance via <code>self.empty</code> as <code>default_factory</code>.</p> <code>separator</code> <p>str = \u201c.\u201d separator for nested structure.</p> Notes <p>When <code>convert_mapping</code> specified, all new values with type of <code>Mapping</code> will be converted to <code>default_factory</code>. If <code>default_factory</code> is <code>Null</code>, will create an empty instance via <code>self.empty</code> as <code>default_factory</code>.</p> <p><code>convert_mapping</code> is automatically applied to arguments during initialisation.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; NestedDict({\"f.n\": \"chang\"})\nNestedDict(\n  ('f'): NestedDict(\n    ('n'): 'chang'\n  )\n)\n&gt;&gt;&gt; NestedDict({\"i.d\": [{'c': 1016}, {'k': 1031}]})\nNestedDict(\n  ('i'): NestedDict(\n    ('d'): [NestedDict(\n      ('c'): 1016\n    ), NestedDict(\n      ('k'): 1031\n    )]\n  )\n)\n&gt;&gt;&gt; d = NestedDict({\"f.n\": \"chang\"}, default_factory=NestedDict)\n&gt;&gt;&gt; d.i.d = 1016\n&gt;&gt;&gt; d['i.d']\n1016\n&gt;&gt;&gt; d.i.d\n1016\n&gt;&gt;&gt; d.dict()\n{'f': {'n': 'chang'}, 'i': {'d': 1016}}\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>class NestedDict(DefaultDict):  # pylint: disable=E1136\n    r\"\"\"\n    `NestedDict` further extends `DefaultDict` object by introducing a nested structure with `separator`.\n    By default, `separator` is `.`, but it could be modified in subclass or by calling `dict.setattr('separator', S)`.\n\n    `d = NestedDict({\"a.b.c\": 1})` is equivalent to `d = NestedDict({\"a\": {\"b\": {\"c\": 1}}})`,\n    and you can access members either by `d[\"a.b.c\"]` or more simply by `d.a.b.c`.\n\n    This behaviour allows you to pass keyword arguments to other functions as easy as `func1(**d.func1)`.\n\n    Since `NestedDict` inherits from `DefaultDict`, it also supports `default_factory`.\n    With `default_factory`, you can assign `d.a.b.c = 1` without assign `d.a = NestedDict()` in the first place.\n    Note that the constructor of `NestedDict` is different from `DefaultDict`, `default_factory` is not a positional\n    argument, and must be set in a keyword argument.\n\n    `NestedDict` also introduce `all_keys`, `all_values`, `all_items` methods to get all keys, values, items\n    respectively in the nested structure.\n\n    Attributes:\n        convert_mapping: bool = False\n            If `True`, all new values with type of `Mapping` will be converted to `default_factory`.\n            If `default_factory` is `Null`, will create an empty instance via `self.empty` as `default_factory`.\n        separator: str = \".\"\n            separator for nested structure.\n\n    Notes:\n        When `convert_mapping` specified, all new values with type of `Mapping` will be converted to `default_factory`.\n        If `default_factory` is `Null`, will create an empty instance via `self.empty` as `default_factory`.\n\n        `convert_mapping` is automatically applied to arguments during initialisation.\n\n    Examples:\n        &gt;&gt;&gt; NestedDict({\"f.n\": \"chang\"})\n        NestedDict(\n          ('f'): NestedDict(\n            ('n'): 'chang'\n          )\n        )\n        &gt;&gt;&gt; NestedDict({\"i.d\": [{'c': 1016}, {'k': 1031}]})\n        NestedDict(\n          ('i'): NestedDict(\n            ('d'): [NestedDict(\n              ('c'): 1016\n            ), NestedDict(\n              ('k'): 1031\n            )]\n          )\n        )\n        &gt;&gt;&gt; d = NestedDict({\"f.n\": \"chang\"}, default_factory=NestedDict)\n        &gt;&gt;&gt; d.i.d = 1016\n        &gt;&gt;&gt; d['i.d']\n        1016\n        &gt;&gt;&gt; d.i.d\n        1016\n        &gt;&gt;&gt; d.dict()\n        {'f': {'n': 'chang'}, 'i': {'d': 1016}}\n    \"\"\"\n\n    convert_mapping = False\n    separator = \".\"\n    fallback = False\n\n    def __init__(\n        self,\n        *args: Any,\n        default_factory: Callable | NULL = Null,\n        convert_mapping: bool | None = None,\n        fallback: bool | None = None,\n        **kwargs: Any,\n    ) -&gt; None:\n        super().__init__(default_factory, *args, **kwargs)\n        if convert_mapping is not None:\n            self.setattr(\"convert_mapping\", convert_mapping)\n        if fallback is not None:\n            self.setattr(\"fallback\", fallback)\n\n    def all_keys(self) -&gt; Generator:\n        r\"\"\"\n        Get all keys of `NestedDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n            &gt;&gt;&gt; list(d.all_keys())\n            ['a', 'b.c', 'b.d']\n        \"\"\"\n\n        separator = self.getattr(\"separator\", \".\")\n\n        @wraps(self.all_keys)\n        def all_keys(self, prefix=Null):\n            for key, value in self.items():\n                if prefix is not Null:\n                    key = str(prefix) + str(separator) + str(key)\n                if isinstance(value, NestedDict):\n                    yield from all_keys(value, key)\n                else:\n                    yield key\n\n        return all_keys(self)\n\n    def all_values(self) -&gt; Generator:\n        r\"\"\"\n        Get all values of `NestedDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n            &gt;&gt;&gt; list(d.all_values())\n            [1, 2, 3]\n        \"\"\"\n\n        for value in self.values():\n            if isinstance(value, NestedDict):\n                yield from value.all_values()\n            else:\n                yield value\n\n    def all_items(self) -&gt; Generator:\n        r\"\"\"\n        Get all items of `NestedDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n            &gt;&gt;&gt; list(d.all_items())\n            [('a', 1), ('b.c', 2), ('b.d', 3)]\n        \"\"\"\n\n        separator = self.getattr(\"separator\", \".\")\n\n        @wraps(self.all_items)\n        def all_items(self, prefix=Null):\n            for key, value in self.items():\n                if prefix is not Null:\n                    key = str(prefix) + str(separator) + str(key)\n                if isinstance(value, NestedDict):\n                    yield from all_items(value, key)\n                else:\n                    yield key, value\n\n        return all_items(self)\n\n    def apply(self, func: Callable, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Recursively apply a function to `NestedDict` and its children.\n\n        Note:\n            This method is meant for non-in-place modification of `obj`, for example, [`to`][chanfig.NestedDict.to].\n\n        Args:\n            func (Callable):\n\n        See Also:\n            [`apply_`][chanfig.NestedDict.apply_]: Apply an in-place operation.\n            [`apply`][chanfig.utils.apply.apply]: Implementation of `apply`.\n\n        Examples:\n            &gt;&gt;&gt; def func(d):\n            ...     if isinstance(d, NestedDict):\n            ...         d.t = 1\n            &gt;&gt;&gt; d = NestedDict()\n            &gt;&gt;&gt; d.a = NestedDict()\n            &gt;&gt;&gt; d.b = [NestedDict(),]\n            &gt;&gt;&gt; d.c = (NestedDict(),)\n            &gt;&gt;&gt; d.d = {NestedDict(),}\n            &gt;&gt;&gt; d.apply(func).dict()\n            {'a': {}, 'b': [{}], 'c': ({},), 'd': ({},)}\n        \"\"\"\n\n        return apply(self, func, *args, **kwargs)\n\n    def apply_(self, func: Callable, *args: Any, **kwargs: Any) -&gt; Self:\n        r\"\"\"\n        Recursively apply a function to `NestedDict` and its children.\n\n        Note:\n            This method is meant for in-place modification of `obj`, for example, [`freeze`][chanfig.Config.freeze].\n\n        Args:\n            func (Callable):\n\n        See Also:\n            [`apply`][chanfig.NestedDict.apply]: Apply a non-in-place operation.\n            [`apply_`][chanfig.utils.apply.apply_]: Implementation of `apply_` method.\n\n        Examples:\n            &gt;&gt;&gt; def func(d):\n            ...     if isinstance(d, NestedDict):\n            ...         d.t = 1\n            &gt;&gt;&gt; d = NestedDict()\n            &gt;&gt;&gt; d.a = NestedDict()\n            &gt;&gt;&gt; d.b = [NestedDict(),]\n            &gt;&gt;&gt; d.c = (NestedDict(),)\n            &gt;&gt;&gt; d.d = {NestedDict(),}\n            &gt;&gt;&gt; d.apply_(func).dict()\n            {'a': {'t': 1}, 'b': [{'t': 1}], 'c': ({'t': 1},), 'd': ({'t': 1},), 't': 1}\n        \"\"\"\n\n        apply_(self, func, *args, **kwargs)\n        return self\n\n    def get(self, name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any:\n        r\"\"\"\n        Get value from `NestedDict`.\n\n        Note that `default` has higher priority than `default_factory`.\n\n        Raises:\n            KeyError: If `NestedDict` does not contain `name` and `default`/`default_factory` is not specified.\n            TypeError: If `name` is not hashable.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016}, default_factory=NestedDict)\n            &gt;&gt;&gt; d.get('i.d')\n            1016\n            &gt;&gt;&gt; d['i.d']\n            1016\n            &gt;&gt;&gt; d.i.d\n            1016\n            &gt;&gt;&gt; d.get('i.d', None)\n            1016\n            &gt;&gt;&gt; d.get('f', 2)\n            2\n            &gt;&gt;&gt; d.get('a.b', None)\n            &gt;&gt;&gt; d.f\n            NestedDict(&lt;class 'chanfig.nested_dict.NestedDict'&gt;, )\n            &gt;&gt;&gt; del d.f\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016})\n            &gt;&gt;&gt; d.e\n            Traceback (most recent call last):\n            AttributeError: 'NestedDict' object has no attribute 'e'\n            &gt;&gt;&gt; d.e = {}\n            &gt;&gt;&gt; d.get('e.f', Null)\n            Traceback (most recent call last):\n            KeyError: 'f'\n            &gt;&gt;&gt; d.get('e.f')\n            &gt;&gt;&gt; d.get('e.f', 1)\n            1\n            &gt;&gt;&gt; d.e.f\n            Traceback (most recent call last):\n            AttributeError: 'dict' object has no attribute 'f'\n        \"\"\"\n\n        separator = self.getattr(\"separator\", \".\")\n        if fallback is None:\n            fallback = self.getattr(\"fallback\", False)\n        fallback_name = name.split(separator)[-1] if isinstance(name, str) else name\n        fallback_value = Null\n        try:\n            while isinstance(name, str) and separator in name:\n                if fallback and fallback_name in self:\n                    fallback_value = self.get(fallback_name)\n                name, rest = name.split(separator, 1)\n                self, name = self[name], rest  # pylint: disable=W0642\n        except (KeyError, AttributeError, TypeError):\n            if fallback and fallback_value is not Null:\n                return fallback_value\n            if default is not Null:\n                return default\n            raise KeyError(name) from None\n        if (fallback and fallback_value is not Null) and (not isinstance(self, Iterable) or name not in self):\n            return fallback_value\n        # if value is a python dict\n        if not isinstance(self, NestedDict):\n            if name not in self and default is not Null:\n                return default\n            return self[name]\n        return super().get(name, default)\n\n    def set(  # pylint: disable=W0221\n        self,\n        name: Any,\n        value: Any,\n        convert_mapping: bool | None = None,\n    ) -&gt; None:\n        r\"\"\"\n        Set value of `NestedDict`.\n\n        Args:\n            name:\n            value:\n            convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n                Defaults to self.convert_mapping.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict(default_factory=NestedDict)\n            &gt;&gt;&gt; d.set('i.d', 1016)\n            &gt;&gt;&gt; d.get('i.d')\n            1016\n            &gt;&gt;&gt; d.dict()\n            {'i': {'d': 1016}}\n            &gt;&gt;&gt; d['f.n'] = 'chang'\n            &gt;&gt;&gt; d.f.n\n            'chang'\n            &gt;&gt;&gt; d.n.l = 'liu'\n            &gt;&gt;&gt; d['n.l']\n            'liu'\n            &gt;&gt;&gt; d['f.n.e'] = \"error\"\n            Traceback (most recent call last):\n            ValueError: Cannot set `f.n.e` to `error`, as `f.n=chang`.\n            &gt;&gt;&gt; d['f.n.e.a'] = \"error\"\n            Traceback (most recent call last):\n            KeyError: 'e'\n            &gt;&gt;&gt; d.f.n.e.a = \"error\"\n            Traceback (most recent call last):\n            AttributeError: 'str' object has no attribute 'e'\n            &gt;&gt;&gt; d.setattr('convert_mapping', True)\n            &gt;&gt;&gt; d.a.b = {'c': {'d': 1}, 'e.f' : 2}\n            &gt;&gt;&gt; d.a.b.c.d\n            1\n            &gt;&gt;&gt; d['c.d'] = {'c': {'d': 1}, 'e.f' : 2}\n            &gt;&gt;&gt; d.c.d['e.f']\n            2\n            &gt;&gt;&gt; d.setattr('convert_mapping', False)\n            &gt;&gt;&gt; d.set('e.f', {'c': {'d': 1}, 'e.f' : 2}, convert_mapping=True)\n            &gt;&gt;&gt; d['e.f']['c.d']\n            1\n        \"\"\"\n        # pylint: disable=W0642\n\n        full_name = name\n        separator = self.getattr(\"separator\", \".\")\n        if convert_mapping is None:\n            convert_mapping = self.getattr(\"convert_mapping\", False)\n        default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n        try:\n            while isinstance(name, str) and separator in name:\n                name, rest = name.split(separator, 1)\n                if name in dir(self) and isinstance(getattr(self.__class__, name), (property, cached_property)):\n                    self, name = getattr(self, name), rest\n                elif name not in self and isinstance(self, Mapping):\n                    default = (\n                        self.__missing__(name, default_factory()) if hasattr(self, \"__missing__\") else default_factory()\n                    )\n                    self, name = default, rest\n                else:\n                    self, name = self[name], rest\n                if isinstance(self, NestedDict):\n                    default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n        except (AttributeError, TypeError):\n            raise KeyError(name) from None\n\n        if (\n            convert_mapping\n            and not isinstance(value, default_factory if isinstance(default_factory, type) else type(self))\n            and not isinstance(value, Variable)\n        ):\n            if isinstance(value, Mapping):\n                try:\n                    value = default_factory(**value)\n                except TypeError:\n                    value = default_factory(value)\n            if isinstance(value, list):\n                value = [default_factory(v) if isinstance(v, Mapping) else v for v in value]\n            if isinstance(value, tuple):\n                value = tuple(default_factory(v) if isinstance(v, Mapping) else v for v in value)\n            if isinstance(value, set):\n                value = {default_factory(v) if isinstance(v, Mapping) else v for v in list(value)}\n        if isinstance(self, NestedDict):\n            super().set(name, value)\n        elif isinstance(self, Mapping):\n            dict.__setitem__(self, name, value)\n        else:\n            raise ValueError(\n                f\"Cannot set `{full_name}` to `{value}`, as `{separator.join(full_name.split(separator)[:-1])}={self}`.\"\n            )\n\n    def delete(self, name: Any) -&gt; None:\n        r\"\"\"\n        Delete value from `NestedDict`.\n\n        Args:\n            name:\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\"})\n            &gt;&gt;&gt; d.i.d\n            1016\n            &gt;&gt;&gt; d.f.n\n            'chang'\n            &gt;&gt;&gt; d.delete('i.d')\n            &gt;&gt;&gt; d.dict()\n            {'i': {}, 'f': {'n': 'chang'}}\n            &gt;&gt;&gt; d.i.d\n            Traceback (most recent call last):\n            AttributeError: 'NestedDict' object has no attribute 'd'\n            &gt;&gt;&gt; del d.f.n\n            &gt;&gt;&gt; d.dict()\n            {'i': {}, 'f': {}}\n            &gt;&gt;&gt; d.f.n\n            Traceback (most recent call last):\n            AttributeError: 'NestedDict' object has no attribute 'n'\n            &gt;&gt;&gt; del d.e\n            Traceback (most recent call last):\n            AttributeError: 'NestedDict' object has no attribute 'e'\n            &gt;&gt;&gt; del d['f.n']\n            Traceback (most recent call last):\n            KeyError: 'n'\n            &gt;&gt;&gt; d.e = {'a': {'b': 1}}\n            &gt;&gt;&gt; del d['e.a.b']\n        \"\"\"\n\n        separator = self.getattr(\"separator\", \".\")\n        try:\n            while isinstance(name, str) and separator in name:\n                name, rest = name.split(separator, 1)\n                self, name = self[name], rest  # pylint: disable=W0642\n        except (AttributeError, TypeError):\n            raise KeyError(name) from None\n        # if value is a python dict\n        if not isinstance(self, NestedDict):\n            del self[name]\n            return\n        super().delete(name)\n\n    def pop(self, name: Any, default: Any = Null) -&gt; Any:\n        r\"\"\"\n        Pop value from `NestedDict`.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1}, default_factory=NestedDict)\n            &gt;&gt;&gt; d.pop('i.d')\n            1016\n            &gt;&gt;&gt; d.pop('i.d', True)\n            True\n            &gt;&gt;&gt; d.pop('i.d')\n            Traceback (most recent call last):\n            KeyError: 'd'\n            &gt;&gt;&gt; d.pop('e')\n            Traceback (most recent call last):\n            KeyError: 'e'\n            &gt;&gt;&gt; d.pop('e.f')\n            Traceback (most recent call last):\n            KeyError: 'f'\n        \"\"\"\n\n        separator = self.getattr(\"separator\", \".\")\n        try:\n            while isinstance(name, str) and separator in name:\n                name, rest = name.split(separator, 1)\n                self, name = self[name], rest  # pylint: disable=W0642\n        except (AttributeError, TypeError):\n            raise KeyError(name) from None\n        if not isinstance(self, dict) or name not in self:\n            if default is not Null:\n                return default\n            raise KeyError(name)\n        return super().pop(name)\n\n    def setdefault(  # type: ignore[override]  # pylint: disable=R0912,W0221\n        self,\n        name: Any,\n        value: Any,\n        convert_mapping: bool | None = None,\n    ) -&gt; Any:\n        r\"\"\"\n        Set default value for `NestedDict`.\n\n        Args:\n            name:\n            value:\n            convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n                Defaults to `self.getattr(\"convert_mapping\", False)`.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1})\n            &gt;&gt;&gt; d.setdefault(\"d.i\", 1031)\n            1031\n            &gt;&gt;&gt; d.setdefault(\"i.d\", \"chang\")\n            1016\n            &gt;&gt;&gt; d.setdefault(\"f.n\", 1016)\n            'chang'\n            &gt;&gt;&gt; d.setdefault(\"n.a.b.d\", 2)\n            2\n        \"\"\"\n        # pylint: disable=W0642\n\n        full_name = name\n        separator = self.getattr(\"separator\", \".\")\n        if convert_mapping is None:\n            convert_mapping = self.getattr(\"convert_mapping\", False)\n        default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n        try:\n            while isinstance(name, str) and separator in name:\n                name, rest = name.split(separator, 1)\n                if name in dir(self) and isinstance(getattr(self.__class__, name), (property, cached_property)):\n                    self, name = getattr(self, name), rest\n                elif name not in self and isinstance(self, Mapping):\n                    default = (\n                        self.__missing__(name, default_factory()) if hasattr(self, \"__missing__\") else default_factory()\n                    )\n                    self, name = default, rest\n                else:\n                    self, name = self[name], rest\n                if isinstance(self, NestedDict):\n                    default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n        except (AttributeError, TypeError):\n            raise KeyError(name) from None\n\n        if isinstance(self, NestedDict) and name in self:\n            return super().get(name)\n        elif isinstance(self, Mapping) and name in self:\n            dict.__getitem__(self, name)\n\n        if (\n            convert_mapping\n            and isinstance(value, Mapping)\n            and not isinstance(value, default_factory if isinstance(default_factory, type) else type(self))\n            and not isinstance(value, Variable)\n        ):\n            try:\n                value = default_factory(**value)\n            except TypeError:\n                value = default_factory(value)\n        if isinstance(self, NestedDict):\n            super().set(name, value)\n        elif isinstance(self, Mapping):\n            dict.__setitem__(self, name, value)\n        else:\n            raise ValueError(\n                f\"Cannot set `{full_name}` to `{value}`, as `{separator.join(full_name.split(separator)[:-1])}={self}`.\"\n            )\n        return value\n\n    def validate(self) -&gt; None:\n        r\"\"\"\n        Validate `NestedDict`.\n\n        Raises:\n            TypeError: If `Variable` has invalid type.\n            ValueError: If `Variable` has invalid value.\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=int, validator=lambda x: x &gt; 0)})\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=str, validator=lambda x: x &gt; 0)})\n            Traceback (most recent call last):\n            TypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n            &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(-1, type=int, validator=lambda x: x &gt; 0)})\n            Traceback (most recent call last):\n            ValueError: 'd' has invalid value. Value -1 is not valid.\n        \"\"\"\n\n        self.apply_(self._validate)\n\n    def sort(self, key: Callable | None = None, reverse: bool = False, recursive: bool = True) -&gt; Self:\n        r\"\"\"\n        Sort `NestedDict`.\n\n        Args:\n            recursive (bool): Whether to apply `sort` recursively.\n\n        Examples:\n            &gt;&gt;&gt; l = [1]\n            &gt;&gt;&gt; d = NestedDict({\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"b.e.f\": l})\n            &gt;&gt;&gt; d.sort().dict()\n            {'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n            &gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n            &gt;&gt;&gt; d.sort().dict()\n            {'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n            &gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n            &gt;&gt;&gt; d.sort(recursive=False).dict()\n            {'a': 1, 'b': {'e': {'f': [1]}, 'd': 3, 'c': 2}}\n            &gt;&gt;&gt; l.append(2)\n            &gt;&gt;&gt; d.b.e.f\n            [1]\n        \"\"\"\n\n        if recursive:\n            for value in self.values():\n                if isinstance(value, FlatDict):\n                    value.sort(key=key, reverse=reverse)\n        return super().sort(key=key, reverse=reverse)\n\n    @staticmethod\n    def _merge(this: FlatDict, that: Iterable, overwrite: bool = True) -&gt; Mapping:\n        if not that:\n            return this\n        if isinstance(that, Mapping):\n            that = that.items()\n        with this.converting() if isinstance(this, NestedDict) else nullcontext():\n            for key, value in that:\n                if key in this and isinstance(this[key], Mapping):\n                    if isinstance(value, Mapping):\n                        NestedDict._merge(this[key], value, overwrite)\n                    elif overwrite:\n                        if isinstance(this, NestedDict):\n                            this.set(key, value)\n                        else:\n                            this[key] = value\n                elif key in dir(this) and isinstance(getattr(this.__class__, key, None), (property, cached_property)):\n                    if isinstance(getattr(this, key, None), FlatDict):\n                        getattr(this, key).merge(value, overwrite=overwrite)\n                    else:\n                        setattr(this, key, value)\n                elif overwrite or key not in this:\n                    if isinstance(this, NestedDict):\n                        this.set(key, value)\n                    else:\n                        this[key] = value\n        return this\n\n    def intersect(self, other: Mapping | Iterable | PathStr, recursive: bool = True) -&gt; Self:  # pylint: disable=W0221\n        r\"\"\"\n        Intersection of `NestedDict` and `other`.\n\n        Args:\n            other (Mapping | Iterable | PathStr):\n            recursive (bool):\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n            &gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n            &gt;&gt;&gt; d.intersect(n).dict()\n            {'c': {'d': {'e': 4, 'f': 5}}}\n            &gt;&gt;&gt; d.intersect(\"tests/test.yaml\").dict()\n            {'a': 1}\n            &gt;&gt;&gt; d.intersect(n, recursive=False).dict()\n            {}\n            &gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n            &gt;&gt;&gt; d.intersect(l).dict()\n            {'a': 1}\n            &gt;&gt;&gt; d.intersect(1)\n            Traceback (most recent call last):\n            TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n        \"\"\"\n\n        if isinstance(other, (PathLike, str, bytes)):\n            other = self.load(other)\n        if isinstance(other, (Mapping,)):\n            other = self.empty(other).items()\n        if not isinstance(other, Iterable):\n            raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n        return self.empty(self._intersect(self, other, recursive))\n\n    @staticmethod\n    def _intersect(this: NestedDict, that: Iterable, recursive: bool = True) -&gt; Mapping:\n        ret: NestedDict = NestedDict()\n        for key, value in that:\n            if key in this:\n                if isinstance(this[key], NestedDict) and isinstance(value, Mapping) and recursive:\n                    intersects = this[key].intersect(value)\n                    if intersects:\n                        ret[key] = intersects\n                elif this[key] == value:\n                    ret[key] = value\n        return ret\n\n    def difference(  # pylint: disable=W0221, C0103\n        self, other: Mapping | Iterable | PathStr, recursive: bool = True\n    ) -&gt; Self:\n        r\"\"\"\n        Difference between `NestedDict` and `other`.\n\n        Args:\n            other (Mapping | Iterable | PathStr):\n            recursive (bool):\n\n        Examples:\n            &gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n            &gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n            &gt;&gt;&gt; d.difference(n).dict()\n            {'b': {'c': 3, 'd': 5}, 'd': 0}\n            &gt;&gt;&gt; d.difference(\"tests/test.yaml\").dict()\n            {'b': 2, 'c': 3}\n            &gt;&gt;&gt; d.difference(n, recursive=False).dict()\n            {'b': {'c': 3, 'd': 5}, 'c': {'d': {'e': 4, 'f': 5}}, 'd': 0}\n            &gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n            &gt;&gt;&gt; d.difference(l).dict()\n            {'d': 4}\n            &gt;&gt;&gt; d.difference(1)\n            Traceback (most recent call last):\n            TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n        \"\"\"\n\n        if isinstance(other, (PathLike, str, bytes)):\n            other = self.load(other)\n        if isinstance(other, (Mapping,)):\n            other = self.empty(other).items()\n        if not isinstance(other, Iterable):\n            raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n        return self.empty(self._difference(self, other, recursive))\n\n    @staticmethod\n    def _difference(this: NestedDict, that: Iterable, recursive: bool = True) -&gt; Mapping:\n        ret: NestedDict = NestedDict()\n        for key, value in that:\n            if key not in this:\n                ret[key] = value\n            elif isinstance(this[key], NestedDict) and isinstance(value, Mapping) and recursive:\n                differences = this[key].difference(value)\n                if differences:\n                    ret[key] = differences\n            elif this[key] != value:\n                ret[key] = value\n        return ret\n\n    @contextmanager\n    def converting(self):\n        convert_mapping = self.getattr(\"convert_mapping\", False)\n        try:\n            self.setattr(\"convert_mapping\", True)\n            yield\n        finally:\n            self.setattr(\"convert_mapping\", convert_mapping)\n\n    def __contains__(self, name: Any) -&gt; bool:\n        separator = self.getattr(\"separator\", \".\")\n        try:\n            while isinstance(name, str) and separator in name:\n                name, rest = name.split(separator, 1)\n                if super().__contains__(name):\n                    self, name = self[name], rest  # pylint: disable=W0642\n                else:\n                    return False\n            return super().__contains__(name)\n        except (TypeError, KeyError):  # TypeError when name is not in self\n            return False\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.all_keys","title":"all_keys","text":"Python<pre><code>all_keys() -&gt; Generator\n</code></pre> <p>Get all keys of <code>NestedDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n&gt;&gt;&gt; list(d.all_keys())\n['a', 'b.c', 'b.d']\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def all_keys(self) -&gt; Generator:\n    r\"\"\"\n    Get all keys of `NestedDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n        &gt;&gt;&gt; list(d.all_keys())\n        ['a', 'b.c', 'b.d']\n    \"\"\"\n\n    separator = self.getattr(\"separator\", \".\")\n\n    @wraps(self.all_keys)\n    def all_keys(self, prefix=Null):\n        for key, value in self.items():\n            if prefix is not Null:\n                key = str(prefix) + str(separator) + str(key)\n            if isinstance(value, NestedDict):\n                yield from all_keys(value, key)\n            else:\n                yield key\n\n    return all_keys(self)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.all_values","title":"all_values","text":"Python<pre><code>all_values() -&gt; Generator\n</code></pre> <p>Get all values of <code>NestedDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n&gt;&gt;&gt; list(d.all_values())\n[1, 2, 3]\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def all_values(self) -&gt; Generator:\n    r\"\"\"\n    Get all values of `NestedDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n        &gt;&gt;&gt; list(d.all_values())\n        [1, 2, 3]\n    \"\"\"\n\n    for value in self.values():\n        if isinstance(value, NestedDict):\n            yield from value.all_values()\n        else:\n            yield value\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.all_items","title":"all_items","text":"Python<pre><code>all_items() -&gt; Generator\n</code></pre> <p>Get all items of <code>NestedDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n&gt;&gt;&gt; list(d.all_items())\n[('a', 1), ('b.c', 2), ('b.d', 3)]\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def all_items(self) -&gt; Generator:\n    r\"\"\"\n    Get all items of `NestedDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({'a': 1, 'b': {'c': 2, 'd': 3}})\n        &gt;&gt;&gt; list(d.all_items())\n        [('a', 1), ('b.c', 2), ('b.d', 3)]\n    \"\"\"\n\n    separator = self.getattr(\"separator\", \".\")\n\n    @wraps(self.all_items)\n    def all_items(self, prefix=Null):\n        for key, value in self.items():\n            if prefix is not Null:\n                key = str(prefix) + str(separator) + str(key)\n            if isinstance(value, NestedDict):\n                yield from all_items(value, key)\n            else:\n                yield key, value\n\n    return all_items(self)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.apply","title":"apply","text":"Python<pre><code>apply(func: Callable, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Recursively apply a function to <code>NestedDict</code> and its children.</p> Note <p>This method is meant for non-in-place modification of <code>obj</code>, for example, <code>to</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Callable</code> required See Also <p><code>apply_</code>: Apply an in-place operation. [<code>apply</code>][chanfig.utils.apply.apply]: Implementation of <code>apply</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; def func(d):\n...     if isinstance(d, NestedDict):\n...         d.t = 1\n&gt;&gt;&gt; d = NestedDict()\n&gt;&gt;&gt; d.a = NestedDict()\n&gt;&gt;&gt; d.b = [NestedDict(),]\n&gt;&gt;&gt; d.c = (NestedDict(),)\n&gt;&gt;&gt; d.d = {NestedDict(),}\n&gt;&gt;&gt; d.apply(func).dict()\n{'a': {}, 'b': [{}], 'c': ({},), 'd': ({},)}\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def apply(self, func: Callable, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Recursively apply a function to `NestedDict` and its children.\n\n    Note:\n        This method is meant for non-in-place modification of `obj`, for example, [`to`][chanfig.NestedDict.to].\n\n    Args:\n        func (Callable):\n\n    See Also:\n        [`apply_`][chanfig.NestedDict.apply_]: Apply an in-place operation.\n        [`apply`][chanfig.utils.apply.apply]: Implementation of `apply`.\n\n    Examples:\n        &gt;&gt;&gt; def func(d):\n        ...     if isinstance(d, NestedDict):\n        ...         d.t = 1\n        &gt;&gt;&gt; d = NestedDict()\n        &gt;&gt;&gt; d.a = NestedDict()\n        &gt;&gt;&gt; d.b = [NestedDict(),]\n        &gt;&gt;&gt; d.c = (NestedDict(),)\n        &gt;&gt;&gt; d.d = {NestedDict(),}\n        &gt;&gt;&gt; d.apply(func).dict()\n        {'a': {}, 'b': [{}], 'c': ({},), 'd': ({},)}\n    \"\"\"\n\n    return apply(self, func, *args, **kwargs)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.apply(func)","title":"<code>func</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.apply_","title":"apply_","text":"Python<pre><code>apply_(func: Callable, *args: Any, **kwargs: Any) -&gt; Self\n</code></pre> <p>Recursively apply a function to <code>NestedDict</code> and its children.</p> Note <p>This method is meant for in-place modification of <code>obj</code>, for example, <code>freeze</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Callable</code> required See Also <p><code>apply</code>: Apply a non-in-place operation. [<code>apply_</code>][chanfig.utils.apply.apply_]: Implementation of <code>apply_</code> method.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; def func(d):\n...     if isinstance(d, NestedDict):\n...         d.t = 1\n&gt;&gt;&gt; d = NestedDict()\n&gt;&gt;&gt; d.a = NestedDict()\n&gt;&gt;&gt; d.b = [NestedDict(),]\n&gt;&gt;&gt; d.c = (NestedDict(),)\n&gt;&gt;&gt; d.d = {NestedDict(),}\n&gt;&gt;&gt; d.apply_(func).dict()\n{'a': {'t': 1}, 'b': [{'t': 1}], 'c': ({'t': 1},), 'd': ({'t': 1},), 't': 1}\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def apply_(self, func: Callable, *args: Any, **kwargs: Any) -&gt; Self:\n    r\"\"\"\n    Recursively apply a function to `NestedDict` and its children.\n\n    Note:\n        This method is meant for in-place modification of `obj`, for example, [`freeze`][chanfig.Config.freeze].\n\n    Args:\n        func (Callable):\n\n    See Also:\n        [`apply`][chanfig.NestedDict.apply]: Apply a non-in-place operation.\n        [`apply_`][chanfig.utils.apply.apply_]: Implementation of `apply_` method.\n\n    Examples:\n        &gt;&gt;&gt; def func(d):\n        ...     if isinstance(d, NestedDict):\n        ...         d.t = 1\n        &gt;&gt;&gt; d = NestedDict()\n        &gt;&gt;&gt; d.a = NestedDict()\n        &gt;&gt;&gt; d.b = [NestedDict(),]\n        &gt;&gt;&gt; d.c = (NestedDict(),)\n        &gt;&gt;&gt; d.d = {NestedDict(),}\n        &gt;&gt;&gt; d.apply_(func).dict()\n        {'a': {'t': 1}, 'b': [{'t': 1}], 'c': ({'t': 1},), 'd': ({'t': 1},), 't': 1}\n    \"\"\"\n\n    apply_(self, func, *args, **kwargs)\n    return self\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.apply_(func)","title":"<code>func</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.get","title":"get","text":"Python<pre><code>get(name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any\n</code></pre> <p>Get value from <code>NestedDict</code>.</p> <p>Note that <code>default</code> has higher priority than <code>default_factory</code>.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If <code>NestedDict</code> does not contain <code>name</code> and <code>default</code>/<code>default_factory</code> is not specified.</p> <code>TypeError</code> <p>If <code>name</code> is not hashable.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({\"i.d\": 1016}, default_factory=NestedDict)\n&gt;&gt;&gt; d.get('i.d')\n1016\n&gt;&gt;&gt; d['i.d']\n1016\n&gt;&gt;&gt; d.i.d\n1016\n&gt;&gt;&gt; d.get('i.d', None)\n1016\n&gt;&gt;&gt; d.get('f', 2)\n2\n&gt;&gt;&gt; d.get('a.b', None)\n&gt;&gt;&gt; d.f\nNestedDict(&lt;class 'chanfig.nested_dict.NestedDict'&gt;, )\n&gt;&gt;&gt; del d.f\n&gt;&gt;&gt; d = NestedDict({\"i.d\": 1016})\n&gt;&gt;&gt; d.e\nTraceback (most recent call last):\nAttributeError: 'NestedDict' object has no attribute 'e'\n&gt;&gt;&gt; d.e = {}\n&gt;&gt;&gt; d.get('e.f', Null)\nTraceback (most recent call last):\nKeyError: 'f'\n&gt;&gt;&gt; d.get('e.f')\n&gt;&gt;&gt; d.get('e.f', 1)\n1\n&gt;&gt;&gt; d.e.f\nTraceback (most recent call last):\nAttributeError: 'dict' object has no attribute 'f'\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def get(self, name: Any, default: Any = None, fallback: bool | None = None) -&gt; Any:\n    r\"\"\"\n    Get value from `NestedDict`.\n\n    Note that `default` has higher priority than `default_factory`.\n\n    Raises:\n        KeyError: If `NestedDict` does not contain `name` and `default`/`default_factory` is not specified.\n        TypeError: If `name` is not hashable.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016}, default_factory=NestedDict)\n        &gt;&gt;&gt; d.get('i.d')\n        1016\n        &gt;&gt;&gt; d['i.d']\n        1016\n        &gt;&gt;&gt; d.i.d\n        1016\n        &gt;&gt;&gt; d.get('i.d', None)\n        1016\n        &gt;&gt;&gt; d.get('f', 2)\n        2\n        &gt;&gt;&gt; d.get('a.b', None)\n        &gt;&gt;&gt; d.f\n        NestedDict(&lt;class 'chanfig.nested_dict.NestedDict'&gt;, )\n        &gt;&gt;&gt; del d.f\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016})\n        &gt;&gt;&gt; d.e\n        Traceback (most recent call last):\n        AttributeError: 'NestedDict' object has no attribute 'e'\n        &gt;&gt;&gt; d.e = {}\n        &gt;&gt;&gt; d.get('e.f', Null)\n        Traceback (most recent call last):\n        KeyError: 'f'\n        &gt;&gt;&gt; d.get('e.f')\n        &gt;&gt;&gt; d.get('e.f', 1)\n        1\n        &gt;&gt;&gt; d.e.f\n        Traceback (most recent call last):\n        AttributeError: 'dict' object has no attribute 'f'\n    \"\"\"\n\n    separator = self.getattr(\"separator\", \".\")\n    if fallback is None:\n        fallback = self.getattr(\"fallback\", False)\n    fallback_name = name.split(separator)[-1] if isinstance(name, str) else name\n    fallback_value = Null\n    try:\n        while isinstance(name, str) and separator in name:\n            if fallback and fallback_name in self:\n                fallback_value = self.get(fallback_name)\n            name, rest = name.split(separator, 1)\n            self, name = self[name], rest  # pylint: disable=W0642\n    except (KeyError, AttributeError, TypeError):\n        if fallback and fallback_value is not Null:\n            return fallback_value\n        if default is not Null:\n            return default\n        raise KeyError(name) from None\n    if (fallback and fallback_value is not Null) and (not isinstance(self, Iterable) or name not in self):\n        return fallback_value\n    # if value is a python dict\n    if not isinstance(self, NestedDict):\n        if name not in self and default is not Null:\n            return default\n        return self[name]\n    return super().get(name, default)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.set","title":"set","text":"Python<pre><code>set(name: Any, value: Any, convert_mapping: bool | None = None) -&gt; None\n</code></pre> <p>Set value of <code>NestedDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <code>Any</code> required <code>bool | None</code> <p>Whether to convert <code>Mapping</code> to <code>NestedDict</code>. Defaults to self.convert_mapping.</p> <code>None</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict(default_factory=NestedDict)\n&gt;&gt;&gt; d.set('i.d', 1016)\n&gt;&gt;&gt; d.get('i.d')\n1016\n&gt;&gt;&gt; d.dict()\n{'i': {'d': 1016}}\n&gt;&gt;&gt; d['f.n'] = 'chang'\n&gt;&gt;&gt; d.f.n\n'chang'\n&gt;&gt;&gt; d.n.l = 'liu'\n&gt;&gt;&gt; d['n.l']\n'liu'\n&gt;&gt;&gt; d['f.n.e'] = \"error\"\nTraceback (most recent call last):\nValueError: Cannot set `f.n.e` to `error`, as `f.n=chang`.\n&gt;&gt;&gt; d['f.n.e.a'] = \"error\"\nTraceback (most recent call last):\nKeyError: 'e'\n&gt;&gt;&gt; d.f.n.e.a = \"error\"\nTraceback (most recent call last):\nAttributeError: 'str' object has no attribute 'e'\n&gt;&gt;&gt; d.setattr('convert_mapping', True)\n&gt;&gt;&gt; d.a.b = {'c': {'d': 1}, 'e.f' : 2}\n&gt;&gt;&gt; d.a.b.c.d\n1\n&gt;&gt;&gt; d['c.d'] = {'c': {'d': 1}, 'e.f' : 2}\n&gt;&gt;&gt; d.c.d['e.f']\n2\n&gt;&gt;&gt; d.setattr('convert_mapping', False)\n&gt;&gt;&gt; d.set('e.f', {'c': {'d': 1}, 'e.f' : 2}, convert_mapping=True)\n&gt;&gt;&gt; d['e.f']['c.d']\n1\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def set(  # pylint: disable=W0221\n    self,\n    name: Any,\n    value: Any,\n    convert_mapping: bool | None = None,\n) -&gt; None:\n    r\"\"\"\n    Set value of `NestedDict`.\n\n    Args:\n        name:\n        value:\n        convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n            Defaults to self.convert_mapping.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict(default_factory=NestedDict)\n        &gt;&gt;&gt; d.set('i.d', 1016)\n        &gt;&gt;&gt; d.get('i.d')\n        1016\n        &gt;&gt;&gt; d.dict()\n        {'i': {'d': 1016}}\n        &gt;&gt;&gt; d['f.n'] = 'chang'\n        &gt;&gt;&gt; d.f.n\n        'chang'\n        &gt;&gt;&gt; d.n.l = 'liu'\n        &gt;&gt;&gt; d['n.l']\n        'liu'\n        &gt;&gt;&gt; d['f.n.e'] = \"error\"\n        Traceback (most recent call last):\n        ValueError: Cannot set `f.n.e` to `error`, as `f.n=chang`.\n        &gt;&gt;&gt; d['f.n.e.a'] = \"error\"\n        Traceback (most recent call last):\n        KeyError: 'e'\n        &gt;&gt;&gt; d.f.n.e.a = \"error\"\n        Traceback (most recent call last):\n        AttributeError: 'str' object has no attribute 'e'\n        &gt;&gt;&gt; d.setattr('convert_mapping', True)\n        &gt;&gt;&gt; d.a.b = {'c': {'d': 1}, 'e.f' : 2}\n        &gt;&gt;&gt; d.a.b.c.d\n        1\n        &gt;&gt;&gt; d['c.d'] = {'c': {'d': 1}, 'e.f' : 2}\n        &gt;&gt;&gt; d.c.d['e.f']\n        2\n        &gt;&gt;&gt; d.setattr('convert_mapping', False)\n        &gt;&gt;&gt; d.set('e.f', {'c': {'d': 1}, 'e.f' : 2}, convert_mapping=True)\n        &gt;&gt;&gt; d['e.f']['c.d']\n        1\n    \"\"\"\n    # pylint: disable=W0642\n\n    full_name = name\n    separator = self.getattr(\"separator\", \".\")\n    if convert_mapping is None:\n        convert_mapping = self.getattr(\"convert_mapping\", False)\n    default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n    try:\n        while isinstance(name, str) and separator in name:\n            name, rest = name.split(separator, 1)\n            if name in dir(self) and isinstance(getattr(self.__class__, name), (property, cached_property)):\n                self, name = getattr(self, name), rest\n            elif name not in self and isinstance(self, Mapping):\n                default = (\n                    self.__missing__(name, default_factory()) if hasattr(self, \"__missing__\") else default_factory()\n                )\n                self, name = default, rest\n            else:\n                self, name = self[name], rest\n            if isinstance(self, NestedDict):\n                default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n    except (AttributeError, TypeError):\n        raise KeyError(name) from None\n\n    if (\n        convert_mapping\n        and not isinstance(value, default_factory if isinstance(default_factory, type) else type(self))\n        and not isinstance(value, Variable)\n    ):\n        if isinstance(value, Mapping):\n            try:\n                value = default_factory(**value)\n            except TypeError:\n                value = default_factory(value)\n        if isinstance(value, list):\n            value = [default_factory(v) if isinstance(v, Mapping) else v for v in value]\n        if isinstance(value, tuple):\n            value = tuple(default_factory(v) if isinstance(v, Mapping) else v for v in value)\n        if isinstance(value, set):\n            value = {default_factory(v) if isinstance(v, Mapping) else v for v in list(value)}\n    if isinstance(self, NestedDict):\n        super().set(name, value)\n    elif isinstance(self, Mapping):\n        dict.__setitem__(self, name, value)\n    else:\n        raise ValueError(\n            f\"Cannot set `{full_name}` to `{value}`, as `{separator.join(full_name.split(separator)[:-1])}={self}`.\"\n        )\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.set(name)","title":"<code>name</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.set(value)","title":"<code>value</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.set(convert_mapping)","title":"<code>convert_mapping</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.delete","title":"delete","text":"Python<pre><code>delete(name: Any) -&gt; None\n</code></pre> <p>Delete value from <code>NestedDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\"})\n&gt;&gt;&gt; d.i.d\n1016\n&gt;&gt;&gt; d.f.n\n'chang'\n&gt;&gt;&gt; d.delete('i.d')\n&gt;&gt;&gt; d.dict()\n{'i': {}, 'f': {'n': 'chang'}}\n&gt;&gt;&gt; d.i.d\nTraceback (most recent call last):\nAttributeError: 'NestedDict' object has no attribute 'd'\n&gt;&gt;&gt; del d.f.n\n&gt;&gt;&gt; d.dict()\n{'i': {}, 'f': {}}\n&gt;&gt;&gt; d.f.n\nTraceback (most recent call last):\nAttributeError: 'NestedDict' object has no attribute 'n'\n&gt;&gt;&gt; del d.e\nTraceback (most recent call last):\nAttributeError: 'NestedDict' object has no attribute 'e'\n&gt;&gt;&gt; del d['f.n']\nTraceback (most recent call last):\nKeyError: 'n'\n&gt;&gt;&gt; d.e = {'a': {'b': 1}}\n&gt;&gt;&gt; del d['e.a.b']\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def delete(self, name: Any) -&gt; None:\n    r\"\"\"\n    Delete value from `NestedDict`.\n\n    Args:\n        name:\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\"})\n        &gt;&gt;&gt; d.i.d\n        1016\n        &gt;&gt;&gt; d.f.n\n        'chang'\n        &gt;&gt;&gt; d.delete('i.d')\n        &gt;&gt;&gt; d.dict()\n        {'i': {}, 'f': {'n': 'chang'}}\n        &gt;&gt;&gt; d.i.d\n        Traceback (most recent call last):\n        AttributeError: 'NestedDict' object has no attribute 'd'\n        &gt;&gt;&gt; del d.f.n\n        &gt;&gt;&gt; d.dict()\n        {'i': {}, 'f': {}}\n        &gt;&gt;&gt; d.f.n\n        Traceback (most recent call last):\n        AttributeError: 'NestedDict' object has no attribute 'n'\n        &gt;&gt;&gt; del d.e\n        Traceback (most recent call last):\n        AttributeError: 'NestedDict' object has no attribute 'e'\n        &gt;&gt;&gt; del d['f.n']\n        Traceback (most recent call last):\n        KeyError: 'n'\n        &gt;&gt;&gt; d.e = {'a': {'b': 1}}\n        &gt;&gt;&gt; del d['e.a.b']\n    \"\"\"\n\n    separator = self.getattr(\"separator\", \".\")\n    try:\n        while isinstance(name, str) and separator in name:\n            name, rest = name.split(separator, 1)\n            self, name = self[name], rest  # pylint: disable=W0642\n    except (AttributeError, TypeError):\n        raise KeyError(name) from None\n    # if value is a python dict\n    if not isinstance(self, NestedDict):\n        del self[name]\n        return\n    super().delete(name)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.delete(name)","title":"<code>name</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.pop","title":"pop","text":"Python<pre><code>pop(name: Any, default: Any = Null) -&gt; Any\n</code></pre> <p>Pop value from <code>NestedDict</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1}, default_factory=NestedDict)\n&gt;&gt;&gt; d.pop('i.d')\n1016\n&gt;&gt;&gt; d.pop('i.d', True)\nTrue\n&gt;&gt;&gt; d.pop('i.d')\nTraceback (most recent call last):\nKeyError: 'd'\n&gt;&gt;&gt; d.pop('e')\nTraceback (most recent call last):\nKeyError: 'e'\n&gt;&gt;&gt; d.pop('e.f')\nTraceback (most recent call last):\nKeyError: 'f'\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def pop(self, name: Any, default: Any = Null) -&gt; Any:\n    r\"\"\"\n    Pop value from `NestedDict`.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1}, default_factory=NestedDict)\n        &gt;&gt;&gt; d.pop('i.d')\n        1016\n        &gt;&gt;&gt; d.pop('i.d', True)\n        True\n        &gt;&gt;&gt; d.pop('i.d')\n        Traceback (most recent call last):\n        KeyError: 'd'\n        &gt;&gt;&gt; d.pop('e')\n        Traceback (most recent call last):\n        KeyError: 'e'\n        &gt;&gt;&gt; d.pop('e.f')\n        Traceback (most recent call last):\n        KeyError: 'f'\n    \"\"\"\n\n    separator = self.getattr(\"separator\", \".\")\n    try:\n        while isinstance(name, str) and separator in name:\n            name, rest = name.split(separator, 1)\n            self, name = self[name], rest  # pylint: disable=W0642\n    except (AttributeError, TypeError):\n        raise KeyError(name) from None\n    if not isinstance(self, dict) or name not in self:\n        if default is not Null:\n            return default\n        raise KeyError(name)\n    return super().pop(name)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.setdefault","title":"setdefault","text":"Python<pre><code>setdefault(name: Any, value: Any, convert_mapping: bool | None = None) -&gt; Any\n</code></pre> <p>Set default value for <code>NestedDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> required <code>Any</code> required <code>bool | None</code> <p>Whether to convert <code>Mapping</code> to <code>NestedDict</code>. Defaults to <code>self.getattr(\"convert_mapping\", False)</code>.</p> <code>None</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1})\n&gt;&gt;&gt; d.setdefault(\"d.i\", 1031)\n1031\n&gt;&gt;&gt; d.setdefault(\"i.d\", \"chang\")\n1016\n&gt;&gt;&gt; d.setdefault(\"f.n\", 1016)\n'chang'\n&gt;&gt;&gt; d.setdefault(\"n.a.b.d\", 2)\n2\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def setdefault(  # type: ignore[override]  # pylint: disable=R0912,W0221\n    self,\n    name: Any,\n    value: Any,\n    convert_mapping: bool | None = None,\n) -&gt; Any:\n    r\"\"\"\n    Set default value for `NestedDict`.\n\n    Args:\n        name:\n        value:\n        convert_mapping: Whether to convert `Mapping` to `NestedDict`.\n            Defaults to `self.getattr(\"convert_mapping\", False)`.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": 1016, \"f.n\": \"chang\", \"n.a.b.c\": 1})\n        &gt;&gt;&gt; d.setdefault(\"d.i\", 1031)\n        1031\n        &gt;&gt;&gt; d.setdefault(\"i.d\", \"chang\")\n        1016\n        &gt;&gt;&gt; d.setdefault(\"f.n\", 1016)\n        'chang'\n        &gt;&gt;&gt; d.setdefault(\"n.a.b.d\", 2)\n        2\n    \"\"\"\n    # pylint: disable=W0642\n\n    full_name = name\n    separator = self.getattr(\"separator\", \".\")\n    if convert_mapping is None:\n        convert_mapping = self.getattr(\"convert_mapping\", False)\n    default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n    try:\n        while isinstance(name, str) and separator in name:\n            name, rest = name.split(separator, 1)\n            if name in dir(self) and isinstance(getattr(self.__class__, name), (property, cached_property)):\n                self, name = getattr(self, name), rest\n            elif name not in self and isinstance(self, Mapping):\n                default = (\n                    self.__missing__(name, default_factory()) if hasattr(self, \"__missing__\") else default_factory()\n                )\n                self, name = default, rest\n            else:\n                self, name = self[name], rest\n            if isinstance(self, NestedDict):\n                default_factory = self.getattr(\"default_factory\", self.empty) or self.empty\n    except (AttributeError, TypeError):\n        raise KeyError(name) from None\n\n    if isinstance(self, NestedDict) and name in self:\n        return super().get(name)\n    elif isinstance(self, Mapping) and name in self:\n        dict.__getitem__(self, name)\n\n    if (\n        convert_mapping\n        and isinstance(value, Mapping)\n        and not isinstance(value, default_factory if isinstance(default_factory, type) else type(self))\n        and not isinstance(value, Variable)\n    ):\n        try:\n            value = default_factory(**value)\n        except TypeError:\n            value = default_factory(value)\n    if isinstance(self, NestedDict):\n        super().set(name, value)\n    elif isinstance(self, Mapping):\n        dict.__setitem__(self, name, value)\n    else:\n        raise ValueError(\n            f\"Cannot set `{full_name}` to `{value}`, as `{separator.join(full_name.split(separator)[:-1])}={self}`.\"\n        )\n    return value\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.setdefault(name)","title":"<code>name</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.setdefault(value)","title":"<code>value</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.setdefault(convert_mapping)","title":"<code>convert_mapping</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.validate","title":"validate","text":"Python<pre><code>validate() -&gt; None\n</code></pre> <p>Validate <code>NestedDict</code>.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If <code>Variable</code> has invalid type.</p> <code>ValueError</code> <p>If <code>Variable</code> has invalid value.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=int, validator=lambda x: x &gt; 0)})\n&gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=str, validator=lambda x: x &gt; 0)})\nTraceback (most recent call last):\nTypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n&gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(-1, type=int, validator=lambda x: x &gt; 0)})\nTraceback (most recent call last):\nValueError: 'd' has invalid value. Value -1 is not valid.\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def validate(self) -&gt; None:\n    r\"\"\"\n    Validate `NestedDict`.\n\n    Raises:\n        TypeError: If `Variable` has invalid type.\n        ValueError: If `Variable` has invalid value.\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=int, validator=lambda x: x &gt; 0)})\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(1016, type=str, validator=lambda x: x &gt; 0)})\n        Traceback (most recent call last):\n        TypeError: 'd' has invalid type. Value 1016 is not of type &lt;class 'str'&gt;.\n        &gt;&gt;&gt; d = NestedDict({\"i.d\": Variable(-1, type=int, validator=lambda x: x &gt; 0)})\n        Traceback (most recent call last):\n        ValueError: 'd' has invalid value. Value -1 is not valid.\n    \"\"\"\n\n    self.apply_(self._validate)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.sort","title":"sort","text":"Python<pre><code>sort(key: Callable | None = None, reverse: bool = False, recursive: bool = True) -&gt; Self\n</code></pre> <p>Sort <code>NestedDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>bool</code> <p>Whether to apply <code>sort</code> recursively.</p> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; l = [1]\n&gt;&gt;&gt; d = NestedDict({\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"b.e.f\": l})\n&gt;&gt;&gt; d.sort().dict()\n{'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n&gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n&gt;&gt;&gt; d.sort().dict()\n{'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n&gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n&gt;&gt;&gt; d.sort(recursive=False).dict()\n{'a': 1, 'b': {'e': {'f': [1]}, 'd': 3, 'c': 2}}\n&gt;&gt;&gt; l.append(2)\n&gt;&gt;&gt; d.b.e.f\n[1]\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def sort(self, key: Callable | None = None, reverse: bool = False, recursive: bool = True) -&gt; Self:\n    r\"\"\"\n    Sort `NestedDict`.\n\n    Args:\n        recursive (bool): Whether to apply `sort` recursively.\n\n    Examples:\n        &gt;&gt;&gt; l = [1]\n        &gt;&gt;&gt; d = NestedDict({\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}, \"b.e.f\": l})\n        &gt;&gt;&gt; d.sort().dict()\n        {'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n        &gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n        &gt;&gt;&gt; d.sort().dict()\n        {'a': 1, 'b': {'c': 2, 'd': 3, 'e': {'f': [1]}}}\n        &gt;&gt;&gt; d = NestedDict({\"b.e.f\": l, \"b.d\": 3, \"a\": 1, \"b.c\": 2})\n        &gt;&gt;&gt; d.sort(recursive=False).dict()\n        {'a': 1, 'b': {'e': {'f': [1]}, 'd': 3, 'c': 2}}\n        &gt;&gt;&gt; l.append(2)\n        &gt;&gt;&gt; d.b.e.f\n        [1]\n    \"\"\"\n\n    if recursive:\n        for value in self.values():\n            if isinstance(value, FlatDict):\n                value.sort(key=key, reverse=reverse)\n    return super().sort(key=key, reverse=reverse)\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.sort(recursive)","title":"<code>recursive</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.intersect","title":"intersect","text":"Python<pre><code>intersect(other: Mapping | Iterable | PathStr, recursive: bool = True) -&gt; Self\n</code></pre> <p>Intersection of <code>NestedDict</code> and <code>other</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Mapping | Iterable | PathStr</code> required <code>bool</code> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n&gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n&gt;&gt;&gt; d.intersect(n).dict()\n{'c': {'d': {'e': 4, 'f': 5}}}\n&gt;&gt;&gt; d.intersect(\"tests/test.yaml\").dict()\n{'a': 1}\n&gt;&gt;&gt; d.intersect(n, recursive=False).dict()\n{}\n&gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n&gt;&gt;&gt; d.intersect(l).dict()\n{'a': 1}\n&gt;&gt;&gt; d.intersect(1)\nTraceback (most recent call last):\nTypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def intersect(self, other: Mapping | Iterable | PathStr, recursive: bool = True) -&gt; Self:  # pylint: disable=W0221\n    r\"\"\"\n    Intersection of `NestedDict` and `other`.\n\n    Args:\n        other (Mapping | Iterable | PathStr):\n        recursive (bool):\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n        &gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n        &gt;&gt;&gt; d.intersect(n).dict()\n        {'c': {'d': {'e': 4, 'f': 5}}}\n        &gt;&gt;&gt; d.intersect(\"tests/test.yaml\").dict()\n        {'a': 1}\n        &gt;&gt;&gt; d.intersect(n, recursive=False).dict()\n        {}\n        &gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n        &gt;&gt;&gt; d.intersect(l).dict()\n        {'a': 1}\n        &gt;&gt;&gt; d.intersect(1)\n        Traceback (most recent call last):\n        TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n    \"\"\"\n\n    if isinstance(other, (PathLike, str, bytes)):\n        other = self.load(other)\n    if isinstance(other, (Mapping,)):\n        other = self.empty(other).items()\n    if not isinstance(other, Iterable):\n        raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n    return self.empty(self._intersect(self, other, recursive))\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.intersect(other)","title":"<code>other</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.intersect(recursive)","title":"<code>recursive</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.difference","title":"difference","text":"Python<pre><code>difference(other: Mapping | Iterable | PathStr, recursive: bool = True) -&gt; Self\n</code></pre> <p>Difference between <code>NestedDict</code> and <code>other</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Mapping | Iterable | PathStr</code> required <code>bool</code> <code>True</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n&gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n&gt;&gt;&gt; d.difference(n).dict()\n{'b': {'c': 3, 'd': 5}, 'd': 0}\n&gt;&gt;&gt; d.difference(\"tests/test.yaml\").dict()\n{'b': 2, 'c': 3}\n&gt;&gt;&gt; d.difference(n, recursive=False).dict()\n{'b': {'c': 3, 'd': 5}, 'c': {'d': {'e': 4, 'f': 5}}, 'd': 0}\n&gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n&gt;&gt;&gt; d.difference(l).dict()\n{'d': 4}\n&gt;&gt;&gt; d.difference(1)\nTraceback (most recent call last):\nTypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n</code></pre> Source code in <code>chanfig/nested_dict.py</code> Python<pre><code>def difference(  # pylint: disable=W0221, C0103\n    self, other: Mapping | Iterable | PathStr, recursive: bool = True\n) -&gt; Self:\n    r\"\"\"\n    Difference between `NestedDict` and `other`.\n\n    Args:\n        other (Mapping | Iterable | PathStr):\n        recursive (bool):\n\n    Examples:\n        &gt;&gt;&gt; d = NestedDict({'a': 1, 'b.c': 2, 'b.d': 3, 'c.d.e': 4, 'c.d.f': 5, 'c.e': 6})\n        &gt;&gt;&gt; n = {'b': {'c': 3, 'd': 5}, 'c.d.e': 4, 'c.d': {'f': 5}, 'd': 0}\n        &gt;&gt;&gt; d.difference(n).dict()\n        {'b': {'c': 3, 'd': 5}, 'd': 0}\n        &gt;&gt;&gt; d.difference(\"tests/test.yaml\").dict()\n        {'b': 2, 'c': 3}\n        &gt;&gt;&gt; d.difference(n, recursive=False).dict()\n        {'b': {'c': 3, 'd': 5}, 'c': {'d': {'e': 4, 'f': 5}}, 'd': 0}\n        &gt;&gt;&gt; l = [('a', 1), ('d', 4)]\n        &gt;&gt;&gt; d.difference(l).dict()\n        {'d': 4}\n        &gt;&gt;&gt; d.difference(1)\n        Traceback (most recent call last):\n        TypeError: `other=1` should be of type Mapping, Iterable or PathStr, but got &lt;class 'int'&gt;.\n    \"\"\"\n\n    if isinstance(other, (PathLike, str, bytes)):\n        other = self.load(other)\n    if isinstance(other, (Mapping,)):\n        other = self.empty(other).items()\n    if not isinstance(other, Iterable):\n        raise TypeError(f\"`other={other}` should be of type Mapping, Iterable or PathStr, but got {type(other)}.\")\n    return self.empty(self._difference(self, other, recursive))\n</code></pre>"},{"location":"nested_dict/#chanfig.NestedDict.difference(other)","title":"<code>other</code>","text":""},{"location":"nested_dict/#chanfig.NestedDict.difference(recursive)","title":"<code>recursive</code>","text":""},{"location":"parser/","title":"ConfigParser","text":""},{"location":"parser/#chanfig.ConfigParser","title":"chanfig.ConfigParser","text":"<p>               Bases: <code>ArgumentParser</code></p> <p>Parser to parse command-line arguments for CHANfiG.</p> <p><code>ConfigParser</code> is a subclass of <code>argparse.ArgumentParser</code>. It provides new <code>parse_config</code> and <code>parse</code> method to parse command-line arguments to <code>CHANfiG.Config</code> object.</p> <p><code>parse_config</code> will read the configuration and determine possible arguments and their types. This makes it more favourable than <code>parse</code> as it has strict name checking.</p> <p><code>parse</code> will try to parse any command-line arguments, even if they are not pre-defined by <code>add_argument</code>. This allows to relief the burden of adding tons of arguments for each tuneable parameter. In the meantime, there is no mechanism to notify you if you made a typo in command-line arguments.</p> <p><code>ConfigParser</code> override <code>parse_args</code> method to ensure the output is a <code>NestedDict</code>.</p> Source code in <code>chanfig/parser.py</code> Python<pre><code>class ConfigParser(ArgumentParser):  # pylint: disable=C0115\n    r\"\"\"\n    Parser to parse command-line arguments for CHANfiG.\n\n    `ConfigParser` is a subclass of `argparse.ArgumentParser`.\n    It provides new `parse_config` and `parse` method to parse command-line arguments to `CHANfiG.Config` object.\n\n    `parse_config` will read the configuration and determine possible arguments and their types.\n    This makes it more favourable than `parse` as it has strict name checking.\n\n    `parse` will try to parse any command-line arguments, even if they are not pre-defined by `add_argument`.\n    This allows to relief the burden of adding tons of arguments for each tuneable parameter.\n    In the meantime, there is no mechanism to notify you if you made a typo in command-line arguments.\n\n    `ConfigParser` override `parse_args` method to ensure the output is a `NestedDict`.\n    \"\"\"\n\n    def __init__(self, *args: Any, **kwargs: Any):\n        super().__init__(*args, **kwargs)\n        self._registries[\"action\"][None] = StoreAction\n        self._registries[\"action\"][\"store\"] = StoreAction\n\n    def parse_config(  # pylint: disable=R0912\n        self,\n        args: Sequence[str] | None = None,\n        config: Config | None = None,\n        default_config: str | None = None,\n        no_default_config_action: str = \"raise\",\n    ) -&gt; Config:\n        r\"\"\"\n        Parse the arguments for `Config`.\n\n        You may optionally specify a name for `default_config`,\n        and CHANfiG will read the file under this name.\n\n        There are three levels of config:\n\n        1. The base `Config` parsed into this method,\n        2. The base config file located at the path of `default_config` (if specified),\n        3. The config specified in arguments.\n\n        Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).\n\n        Args:\n            args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n            config (NestedDict | None, optional): existing configuration.\n            default_config (str | None, optional): Path to default config file. Defaults to `Config`.\n            no_default_config_action (str, optional): Action when `default_config` is not found.\n                Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n\n        Returns:\n            config: The parsed `Config`.\n\n        Raises:\n            ValueError: If `default_config` is specified but not found in args,\n                and `no_default_config_action` is neither `warn` nor `ignore`.\n            ValueError: If `no_default_config_action` is not in `raise`, `warn` and `ignore`.\n\n        See Also:\n            [`parse`][chanfig.ConfigParser.parse]: Parse all command-line arguments.\n\n        Examples:\n            Note that all examples uses NestedDict instead of Config for avoiding circular import.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse_config(['--a', '1'], config=NestedDict(a=2)).dict()\n            {'a': 1}\n\n            You can only parse argument that is defined in `Config`.\n            error: unrecognized arguments: --b 1\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse_config(['--b', '1'], config=NestedDict(a=2)).dict()  # doctest: +SKIP\n            Traceback (most recent call last):\n            SystemExit: 2\n        \"\"\"\n\n        if args is None:\n            args = sys.argv[1:]\n\n        if config is None:\n            raise ValueError(\"config must be specified\")\n        self.add_config_arguments(config)\n\n        if no_default_config_action not in (\"warn\", \"ignore\", \"raise\"):\n            raise ValueError(\n                f\"no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got {no_default_config_action}\"\n            )\n\n        # parse the command-line arguments\n        parsed = self.parse_args(args)\n\n        # parse the default config file\n        if default_config is not None:\n            parsed = self.merge_default_config(parsed, default_config, no_default_config_action)\n\n        if config.getattr(\"parser\", None) is not self:\n            config.setattr(\"parser\", self)\n        return config.merge(parsed)\n\n    def parse(  # pylint: disable=R0912\n        self,\n        args: Sequence[str] | None = None,\n        config: Config | None = None,\n        default_config: str | None = None,\n        no_default_config_action: str = \"raise\",\n    ) -&gt; Config:\n        r\"\"\"\n        Parse the arguments for `Config`.\n\n        You may optionally specify a name for `default_config`,\n        and CHANfiG will read the file under this name.\n\n        There are three levels of config:\n\n        1. The base `Config` parsed into this method,\n        2. The base config file located at the path of `default_config` (if specified),\n        3. The config specified in arguments.\n\n        Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).\n\n        Args:\n            args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n            config (NestedDict | None, optional): existing configuration.\n            default_config (str | None, optional): Path to default config file. Defaults to `Config`.\n            no_default_config_action (str, optional): Action when `default_config` is not found.\n                Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n\n        Returns:\n            config: The parsed `Config`.\n\n        Raises:\n            ValueError: If `default_config` is specified but not found in args,\n                and `no_default_config_action` is neither `warn` nor `ignore`.\n            ValueError: If `no_default_config_action` is not in `raise`, `warn` and `ignore`.\n\n        See Also:\n            [`parse_config`][chanfig.ConfigParser.parse_config]: Only parse valid config arguments.\n\n        Examples:\n            Note that all examples uses NestedDict instead of Config for avoiding circular import.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--i.d', '1016', '--f.n', 'chang']).dict()\n            {'i': {'d': 1016}, 'f': {'n': 'chang'}}\n\n            Values in command line overrides values in `default_config` file.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--a', '2', '--config', 'tests/test.yaml'], default_config='config').dict()\n            {'a': 2, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n\n            Values in `default_config` file overrides values in `Config` object.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--config', 'tests/test.yaml'], config=NestedDict(a=2), default_config='config').dict()\n            {'a': 1, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n\n            ValueError will be raised when `default_config` is specified but not presented in command line.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config').dict()\n            Traceback (most recent call last):\n            RuntimeError: ConfigParser has default_config set to config, but it is not found in args.\n\n            ValueError will be suppressed when `default_config` is specified bug not presented in command line,\n            and `no_default_config_action` is set to `ignore` or `warn`.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='ignore').dict()\n            {'a': 2}\n\n            ValueError will be raised when `no_default_config_action` is not in `raise`, `ignore`, and `warn`.\n            &gt;&gt;&gt; p = ConfigParser()\n            &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='suppress').dict()\n            Traceback (most recent call last):\n            ValueError: no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got suppress\n        \"\"\"\n\n        if args is None:\n            args = sys.argv[1:]\n\n        if config is None:\n            from .config import Config  # pylint: disable=C0415\n\n            config = Config()\n        else:\n            self.add_config_arguments(config)\n\n        if no_default_config_action not in (\"warn\", \"ignore\", \"raise\"):\n            raise ValueError(\n                f\"no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got {no_default_config_action}\"\n            )\n\n        # add the command-line arguments\n        key_value_args = []\n        for arg in args:\n            if args == \"--\":\n                break\n            if arg.startswith(\"-\"):\n                key_value_args.append(arg.split(\"=\", maxsplit=1))\n            else:\n                if not key_value_args:\n                    continue\n                key_value_args[-1].append(arg)\n        for key_value in key_value_args:\n            if key_value[0] not in self:\n                if len(key_value) &gt; 2:\n                    self.add_argument(key_value[0], nargs=\"+\")\n                else:\n                    self.add_argument(key_value[0])\n\n        # parse the command-line arguments\n        parsed = self.parse_args(args)\n\n        # parse the default config file\n        if default_config is not None:\n            parsed = self.merge_default_config(parsed, default_config, no_default_config_action)\n\n        if config.getattr(\"parser\", None) is not self:\n            config.setattr(\"parser\", self)\n        return config.merge(parsed)\n\n    def parse_args(  # type: ignore[override]\n        self, args: Sequence[str] | None = None, namespace: NestedDict | None = None, eval_str: bool = True\n    ) -&gt; NestedDict:\n        r\"\"\"\n        Parse command line arguments and convert types.\n\n        This function first calls `ArgumentParser.parse_args` to parse command line arguments.\n        It ensures the returned parsed values is stored in a NestedDict instance.\n        If `eval_str` is specified, it also performs `literal_eval` on all `str` values.\n\n        Args:\n            args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n            namespace (NestedDict | None, optional): existing configuration.\n            eval_str (bool, optional): Whether to evaluate string values.\n        \"\"\"\n        parsed: dict | Namespace = super().parse_args(args, namespace)\n        if isinstance(parsed, Namespace):\n            parsed = vars(parsed)\n        if not isinstance(parsed, NestedDict):\n            parsed = NestedDict({key: value for key, value in parsed.items() if value is not Null})\n        if eval_str:\n            for key, value in parsed.all_items():\n                if isinstance(value, str):\n                    with suppress(TypeError, ValueError, SyntaxError):\n                        value = literal_eval(value)\n                    parsed[key] = value\n        return parsed\n\n    def add_config_arguments(self, config: Config):\n        for key, dtype in get_annotations(config).items():\n            self.add_config_argument(key, dtype=dtype)\n        for key, value in config.all_items():\n            self.add_config_argument(key, value)\n\n    def add_config_argument(self, key, value: Any | None = None, dtype: type | None = None):\n        if dtype is None:\n            if isinstance(value, Variable):\n                dtype = value._type or value.dtype  # pylint: disable=W0212\n            elif isinstance(value, Field):\n                dtype = value.type  # type: ignore[assignment]\n            elif value is not None:\n                dtype = type(value)\n        if _should_collect_from_parameters(dtype):\n            args = get_args(dtype)\n            if len(args) == 2 and NoneType in args:\n                dtype = args[0] if args[0] is not NoneType else args[1]\n        name = \"--\" + key\n        if name not in self:\n            help = None  # pylint: disable=W0622\n            if isinstance(value, Variable):\n                help = value._help  # pylint: disable=W0212\n            elif isinstance(value, Field):\n                help = value.metadata.get(\"help\")\n            if dtype is None or not isclass(dtype):\n                return self.add_argument(name, help=help, dest=key)\n            if issubclass(dtype, (list, tuple, dict, set)):\n                return self.add_argument(name, type=dtype, nargs=\"+\", help=help, dest=key)\n            if issubclass(dtype, bool):\n                return self.add_argument(name, type=parse_bool, help=help, dest=key)\n            return self.add_argument(name, type=dtype, help=help, dest=key)\n\n    def merge_default_config(self, parsed, default_config: str, no_default_config_action: str = \"raise\") -&gt; NestedDict:\n        if default_config in parsed:\n            path = parsed[default_config]\n            warn(\n                f\"{self.__class__.__name__} has 'default_config={path}' specified, \"\n                \"its values will override values in Config\"\n            )\n            return NestedDict.load(path).merge(parsed)\n        message = f\"{self.__class__.__name__} has default_config set to {default_config}, but it is not found in args.\"\n        if no_default_config_action == \"ignore\":\n            pass\n        elif no_default_config_action == \"warn\":\n            warn(message, category=RuntimeWarning, stacklevel=2)\n        else:\n            raise RuntimeError(message)\n        return parsed\n\n    @staticmethod\n    def identity(string):\n        r\"\"\"\n        https://stackoverflow.com/questions/69896931/cant-pickle-local-object-argumentparser-init-locals-identity\n        \"\"\"\n\n        return string\n\n    def __contains__(self, name: str):\n        if name in self._option_string_actions:\n            return True\n        return False\n</code></pre>"},{"location":"parser/#chanfig.ConfigParser.parse_config","title":"parse_config","text":"Python<pre><code>parse_config(args: Sequence[str] | None = None, config: Config | None = None, default_config: str | None = None, no_default_config_action: str = 'raise') -&gt; Config\n</code></pre> <p>Parse the arguments for <code>Config</code>.</p> <p>You may optionally specify a name for <code>default_config</code>, and CHANfiG will read the file under this name.</p> <p>There are three levels of config:</p> <ol> <li>The base <code>Config</code> parsed into this method,</li> <li>The base config file located at the path of <code>default_config</code> (if specified),</li> <li>The config specified in arguments.</li> </ol> <p>Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).</p> <p>Parameters:</p> Name Type Description Default <code>Sequence[str] | None</code> <p>Command-line arguments. Defaults to <code>None</code>.</p> <code>None</code> <code>NestedDict | None</code> <p>existing configuration.</p> <code>None</code> <code>str | None</code> <p>Path to default config file. Defaults to <code>Config</code>.</p> <code>None</code> <code>str</code> <p>Action when <code>default_config</code> is not found. Can be one of <code>[\"raise\", \"warn\", \"ignore\"]</code>. Defaults to <code>\"raise\"</code>.</p> <code>'raise'</code> <p>Returns:</p> Name Type Description <code>config</code> <code>Config</code> <p>The parsed <code>Config</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>default_config</code> is specified but not found in args, and <code>no_default_config_action</code> is neither <code>warn</code> nor <code>ignore</code>.</p> <code>ValueError</code> <p>If <code>no_default_config_action</code> is not in <code>raise</code>, <code>warn</code> and <code>ignore</code>.</p> See Also <p><code>parse</code>: Parse all command-line arguments.</p> <p>Examples:</p> <p>Note that all examples uses NestedDict instead of Config for avoiding circular import.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse_config(['--a', '1'], config=NestedDict(a=2)).dict()\n{'a': 1}\n</code></pre> <p>You can only parse argument that is defined in <code>Config</code>. error: unrecognized arguments: \u2013b 1</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse_config(['--b', '1'], config=NestedDict(a=2)).dict()\nTraceback (most recent call last):\nSystemExit: 2\n</code></pre> Source code in <code>chanfig/parser.py</code> Python<pre><code>def parse_config(  # pylint: disable=R0912\n    self,\n    args: Sequence[str] | None = None,\n    config: Config | None = None,\n    default_config: str | None = None,\n    no_default_config_action: str = \"raise\",\n) -&gt; Config:\n    r\"\"\"\n    Parse the arguments for `Config`.\n\n    You may optionally specify a name for `default_config`,\n    and CHANfiG will read the file under this name.\n\n    There are three levels of config:\n\n    1. The base `Config` parsed into this method,\n    2. The base config file located at the path of `default_config` (if specified),\n    3. The config specified in arguments.\n\n    Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).\n\n    Args:\n        args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n        config (NestedDict | None, optional): existing configuration.\n        default_config (str | None, optional): Path to default config file. Defaults to `Config`.\n        no_default_config_action (str, optional): Action when `default_config` is not found.\n            Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n\n    Returns:\n        config: The parsed `Config`.\n\n    Raises:\n        ValueError: If `default_config` is specified but not found in args,\n            and `no_default_config_action` is neither `warn` nor `ignore`.\n        ValueError: If `no_default_config_action` is not in `raise`, `warn` and `ignore`.\n\n    See Also:\n        [`parse`][chanfig.ConfigParser.parse]: Parse all command-line arguments.\n\n    Examples:\n        Note that all examples uses NestedDict instead of Config for avoiding circular import.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse_config(['--a', '1'], config=NestedDict(a=2)).dict()\n        {'a': 1}\n\n        You can only parse argument that is defined in `Config`.\n        error: unrecognized arguments: --b 1\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse_config(['--b', '1'], config=NestedDict(a=2)).dict()  # doctest: +SKIP\n        Traceback (most recent call last):\n        SystemExit: 2\n    \"\"\"\n\n    if args is None:\n        args = sys.argv[1:]\n\n    if config is None:\n        raise ValueError(\"config must be specified\")\n    self.add_config_arguments(config)\n\n    if no_default_config_action not in (\"warn\", \"ignore\", \"raise\"):\n        raise ValueError(\n            f\"no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got {no_default_config_action}\"\n        )\n\n    # parse the command-line arguments\n    parsed = self.parse_args(args)\n\n    # parse the default config file\n    if default_config is not None:\n        parsed = self.merge_default_config(parsed, default_config, no_default_config_action)\n\n    if config.getattr(\"parser\", None) is not self:\n        config.setattr(\"parser\", self)\n    return config.merge(parsed)\n</code></pre>"},{"location":"parser/#chanfig.ConfigParser.parse_config(args)","title":"<code>args</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_config(config)","title":"<code>config</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_config(default_config)","title":"<code>default_config</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_config(no_default_config_action)","title":"<code>no_default_config_action</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse","title":"parse","text":"Python<pre><code>parse(args: Sequence[str] | None = None, config: Config | None = None, default_config: str | None = None, no_default_config_action: str = 'raise') -&gt; Config\n</code></pre> <p>Parse the arguments for <code>Config</code>.</p> <p>You may optionally specify a name for <code>default_config</code>, and CHANfiG will read the file under this name.</p> <p>There are three levels of config:</p> <ol> <li>The base <code>Config</code> parsed into this method,</li> <li>The base config file located at the path of <code>default_config</code> (if specified),</li> <li>The config specified in arguments.</li> </ol> <p>Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).</p> <p>Parameters:</p> Name Type Description Default <code>Sequence[str] | None</code> <p>Command-line arguments. Defaults to <code>None</code>.</p> <code>None</code> <code>NestedDict | None</code> <p>existing configuration.</p> <code>None</code> <code>str | None</code> <p>Path to default config file. Defaults to <code>Config</code>.</p> <code>None</code> <code>str</code> <p>Action when <code>default_config</code> is not found. Can be one of <code>[\"raise\", \"warn\", \"ignore\"]</code>. Defaults to <code>\"raise\"</code>.</p> <code>'raise'</code> <p>Returns:</p> Name Type Description <code>config</code> <code>Config</code> <p>The parsed <code>Config</code>.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>default_config</code> is specified but not found in args, and <code>no_default_config_action</code> is neither <code>warn</code> nor <code>ignore</code>.</p> <code>ValueError</code> <p>If <code>no_default_config_action</code> is not in <code>raise</code>, <code>warn</code> and <code>ignore</code>.</p> See Also <p><code>parse_config</code>: Only parse valid config arguments.</p> <p>Examples:</p> <p>Note that all examples uses NestedDict instead of Config for avoiding circular import.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--i.d', '1016', '--f.n', 'chang']).dict()\n{'i': {'d': 1016}, 'f': {'n': 'chang'}}\n</code></pre> <p>Values in command line overrides values in <code>default_config</code> file.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--a', '2', '--config', 'tests/test.yaml'], default_config='config').dict()\n{'a': 2, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n</code></pre> <p>Values in <code>default_config</code> file overrides values in <code>Config</code> object.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--config', 'tests/test.yaml'], config=NestedDict(a=2), default_config='config').dict()\n{'a': 1, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n</code></pre> <p>ValueError will be raised when <code>default_config</code> is specified but not presented in command line.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--a', '2'], default_config='config').dict()\nTraceback (most recent call last):\nRuntimeError: ConfigParser has default_config set to config, but it is not found in args.\n</code></pre> <p>ValueError will be suppressed when <code>default_config</code> is specified bug not presented in command line, and <code>no_default_config_action</code> is set to <code>ignore</code> or <code>warn</code>.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='ignore').dict()\n{'a': 2}\n</code></pre> <p>ValueError will be raised when <code>no_default_config_action</code> is not in <code>raise</code>, <code>ignore</code>, and <code>warn</code>.</p> Python Console Session<pre><code>&gt;&gt;&gt; p = ConfigParser()\n&gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='suppress').dict()\nTraceback (most recent call last):\nValueError: no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got suppress\n</code></pre> Source code in <code>chanfig/parser.py</code> Python<pre><code>def parse(  # pylint: disable=R0912\n    self,\n    args: Sequence[str] | None = None,\n    config: Config | None = None,\n    default_config: str | None = None,\n    no_default_config_action: str = \"raise\",\n) -&gt; Config:\n    r\"\"\"\n    Parse the arguments for `Config`.\n\n    You may optionally specify a name for `default_config`,\n    and CHANfiG will read the file under this name.\n\n    There are three levels of config:\n\n    1. The base `Config` parsed into this method,\n    2. The base config file located at the path of `default_config` (if specified),\n    3. The config specified in arguments.\n\n    Higher levels override lower levels (i.e. 3 &gt; 2 &gt; 1).\n\n    Args:\n        args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n        config (NestedDict | None, optional): existing configuration.\n        default_config (str | None, optional): Path to default config file. Defaults to `Config`.\n        no_default_config_action (str, optional): Action when `default_config` is not found.\n            Can be one of `[\"raise\", \"warn\", \"ignore\"]`. Defaults to `\"raise\"`.\n\n    Returns:\n        config: The parsed `Config`.\n\n    Raises:\n        ValueError: If `default_config` is specified but not found in args,\n            and `no_default_config_action` is neither `warn` nor `ignore`.\n        ValueError: If `no_default_config_action` is not in `raise`, `warn` and `ignore`.\n\n    See Also:\n        [`parse_config`][chanfig.ConfigParser.parse_config]: Only parse valid config arguments.\n\n    Examples:\n        Note that all examples uses NestedDict instead of Config for avoiding circular import.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--i.d', '1016', '--f.n', 'chang']).dict()\n        {'i': {'d': 1016}, 'f': {'n': 'chang'}}\n\n        Values in command line overrides values in `default_config` file.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--a', '2', '--config', 'tests/test.yaml'], default_config='config').dict()\n        {'a': 2, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n\n        Values in `default_config` file overrides values in `Config` object.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--config', 'tests/test.yaml'], config=NestedDict(a=2), default_config='config').dict()\n        {'a': 1, 'b': 2, 'c': 3, 'config': 'tests/test.yaml'}\n\n        ValueError will be raised when `default_config` is specified but not presented in command line.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config').dict()\n        Traceback (most recent call last):\n        RuntimeError: ConfigParser has default_config set to config, but it is not found in args.\n\n        ValueError will be suppressed when `default_config` is specified bug not presented in command line,\n        and `no_default_config_action` is set to `ignore` or `warn`.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='ignore').dict()\n        {'a': 2}\n\n        ValueError will be raised when `no_default_config_action` is not in `raise`, `ignore`, and `warn`.\n        &gt;&gt;&gt; p = ConfigParser()\n        &gt;&gt;&gt; p.parse(['--a', '2'], default_config='config', no_default_config_action='suppress').dict()\n        Traceback (most recent call last):\n        ValueError: no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got suppress\n    \"\"\"\n\n    if args is None:\n        args = sys.argv[1:]\n\n    if config is None:\n        from .config import Config  # pylint: disable=C0415\n\n        config = Config()\n    else:\n        self.add_config_arguments(config)\n\n    if no_default_config_action not in (\"warn\", \"ignore\", \"raise\"):\n        raise ValueError(\n            f\"no_default_config_action must be one of 'warn', 'ignore', 'raise', bug got {no_default_config_action}\"\n        )\n\n    # add the command-line arguments\n    key_value_args = []\n    for arg in args:\n        if args == \"--\":\n            break\n        if arg.startswith(\"-\"):\n            key_value_args.append(arg.split(\"=\", maxsplit=1))\n        else:\n            if not key_value_args:\n                continue\n            key_value_args[-1].append(arg)\n    for key_value in key_value_args:\n        if key_value[0] not in self:\n            if len(key_value) &gt; 2:\n                self.add_argument(key_value[0], nargs=\"+\")\n            else:\n                self.add_argument(key_value[0])\n\n    # parse the command-line arguments\n    parsed = self.parse_args(args)\n\n    # parse the default config file\n    if default_config is not None:\n        parsed = self.merge_default_config(parsed, default_config, no_default_config_action)\n\n    if config.getattr(\"parser\", None) is not self:\n        config.setattr(\"parser\", self)\n    return config.merge(parsed)\n</code></pre>"},{"location":"parser/#chanfig.ConfigParser.parse(args)","title":"<code>args</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse(config)","title":"<code>config</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse(default_config)","title":"<code>default_config</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse(no_default_config_action)","title":"<code>no_default_config_action</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_args","title":"parse_args","text":"Python<pre><code>parse_args(args: Sequence[str] | None = None, namespace: NestedDict | None = None, eval_str: bool = True) -&gt; NestedDict\n</code></pre> <p>Parse command line arguments and convert types.</p> <p>This function first calls <code>ArgumentParser.parse_args</code> to parse command line arguments. It ensures the returned parsed values is stored in a NestedDict instance. If <code>eval_str</code> is specified, it also performs <code>literal_eval</code> on all <code>str</code> values.</p> <p>Parameters:</p> Name Type Description Default <code>Sequence[str] | None</code> <p>Command-line arguments. Defaults to <code>None</code>.</p> <code>None</code> <code>NestedDict | None</code> <p>existing configuration.</p> <code>None</code> <code>bool</code> <p>Whether to evaluate string values.</p> <code>True</code> Source code in <code>chanfig/parser.py</code> Python<pre><code>def parse_args(  # type: ignore[override]\n    self, args: Sequence[str] | None = None, namespace: NestedDict | None = None, eval_str: bool = True\n) -&gt; NestedDict:\n    r\"\"\"\n    Parse command line arguments and convert types.\n\n    This function first calls `ArgumentParser.parse_args` to parse command line arguments.\n    It ensures the returned parsed values is stored in a NestedDict instance.\n    If `eval_str` is specified, it also performs `literal_eval` on all `str` values.\n\n    Args:\n        args (Sequence[str] | None, optional): Command-line arguments. Defaults to `None`.\n        namespace (NestedDict | None, optional): existing configuration.\n        eval_str (bool, optional): Whether to evaluate string values.\n    \"\"\"\n    parsed: dict | Namespace = super().parse_args(args, namespace)\n    if isinstance(parsed, Namespace):\n        parsed = vars(parsed)\n    if not isinstance(parsed, NestedDict):\n        parsed = NestedDict({key: value for key, value in parsed.items() if value is not Null})\n    if eval_str:\n        for key, value in parsed.all_items():\n            if isinstance(value, str):\n                with suppress(TypeError, ValueError, SyntaxError):\n                    value = literal_eval(value)\n                parsed[key] = value\n    return parsed\n</code></pre>"},{"location":"parser/#chanfig.ConfigParser.parse_args(args)","title":"<code>args</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_args(namespace)","title":"<code>namespace</code>","text":""},{"location":"parser/#chanfig.ConfigParser.parse_args(eval_str)","title":"<code>eval_str</code>","text":""},{"location":"parser/#chanfig.ConfigParser.identity","title":"identity  <code>staticmethod</code>","text":"Python<pre><code>identity(string)\n</code></pre> Source code in <code>chanfig/parser.py</code> Python<pre><code>@staticmethod\ndef identity(string):\n    r\"\"\"\n    https://stackoverflow.com/questions/69896931/cant-pickle-local-object-argumentparser-init-locals-identity\n    \"\"\"\n\n    return string\n</code></pre>"},{"location":"registry/","title":"Registry","text":""},{"location":"registry/#chanfig.registry","title":"chanfig.registry","text":""},{"location":"registry/#chanfig.registry.Registry","title":"Registry","text":"<p>               Bases: <code>NestedDict</code></p> <p><code>Registry</code> for components.</p> <p><code>Registry</code> provides 3 core functionalities:</p> <ul> <li>Register a new component.</li> <li>Lookup for a component.</li> <li>Build a component.</li> </ul> <p>To facilitate the usage scenario, <code>registry</code> is designed to be a decorator. You could register a component by simply calling <code>registry.register</code>, and it will be registered with its name. You may also specify the name of the component by calling <code>registry.register(name=\"ComponentName\")</code>.</p> <p><code>build</code> makes it easy to construct a component from a configuration. <code>build</code> automatically determines the component to construct by the <code>name</code> field in the configuration. So you could either call <code>registry.build(config)</code> or <code>registry.build(**config)</code>. Beyond this, <code>build</code> is just a syntax sugar for <code>registry.init(registry.lookup(name), *args, **kwargs)</code>.</p> <p><code>lookup</code> is used to lookup for a component by its name. By default, <code>lookup</code> internally calls <code>NestedDict.get</code>, but you may override it to provide more functionalities.</p> <p><code>init</code> is used to construct a component. By default, <code>init</code> internally calls <code>cls(*args, **kwargs)</code>, but you may override it to provide more functionalities.</p> Notes <p><code>Registry</code> inherits from <code>NestedDict</code>.</p> <p>Therefore, <code>Registry</code> comes in a nested structure by nature. You could create a sub-registry by simply calling <code>registry.sub_registry = Registry</code>, and access through <code>registry.sub_registry.register()</code>.</p> See Also <p><code>ConfigRegistry</code>: Optimised for components that can be initialised with a <code>config</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; registry = Registry()\n&gt;&gt;&gt; @registry.register\n... @registry.register(\"Module1\", default=True)\n... class Module:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n&gt;&gt;&gt; module = registry.register(Module, \"Module2\")\n&gt;&gt;&gt; registry\nRegistry(\n  ('Module1'): &lt;class 'chanfig.registry.Module'&gt;\n  ('Module'): &lt;class 'chanfig.registry.Module'&gt;\n  ('Module2'): &lt;class 'chanfig.registry.Module'&gt;\n)\n&gt;&gt;&gt; module = registry.register(Module, \"Module\")\nTraceback (most recent call last):\nValueError: Component with name Module already registered.\n&gt;&gt;&gt; registry.lookup(\"Module\")\n&lt;class 'chanfig.registry.Module'&gt;\n&gt;&gt;&gt; config = {\"module\": {\"type\": \"Module\", \"a\": 0, \"b\": 1}}\n&gt;&gt;&gt; # registry.register(Module)\n&gt;&gt;&gt; module = registry.build(config[\"module\"])\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Module'&gt;\n&gt;&gt;&gt; module.a, module.b\n(0, 1)\n&gt;&gt;&gt; config = {\"module\": {\"type\": \"NE\", \"a\": 1, \"b\": 0}}\n&gt;&gt;&gt; module = registry.build(config[\"module\"])\n&gt;&gt;&gt; module.a, module.b\n(1, 0)\n&gt;&gt;&gt; registry = Registry(case_sensitive=False)\n&gt;&gt;&gt; module = registry.register(Module)\n&gt;&gt;&gt; registry\nRegistry(\n  ('module'): &lt;class 'chanfig.registry.Module'&gt;\n)\n&gt;&gt;&gt; registry.lookup(\"module\")\n&lt;class 'chanfig.registry.Module'&gt;\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>class Registry(NestedDict):\n    \"\"\"\n    `Registry` for components.\n\n    `Registry` provides 3 core functionalities:\n\n    - Register a new component.\n    - Lookup for a component.\n    - Build a component.\n\n    To facilitate the usage scenario, `registry` is designed to be a decorator.\n    You could register a component by simply calling `registry.register`, and it will be registered with its name.\n    You may also specify the name of the component by calling `registry.register(name=\"ComponentName\")`.\n\n    `build` makes it easy to construct a component from a configuration.\n    `build` automatically determines the component to construct by the `name` field in the configuration.\n    So you could either call `registry.build(config)` or `registry.build(**config)`.\n    Beyond this, `build` is just a syntax sugar for `registry.init(registry.lookup(name), *args, **kwargs)`.\n\n    `lookup` is used to lookup for a component by its name.\n    By default, `lookup` internally calls `NestedDict.get`, but you may override it to provide more functionalities.\n\n    `init` is used to construct a component.\n    By default, `init` internally calls `cls(*args, **kwargs)`, but you may override it to provide more functionalities.\n\n    Notes:\n        `Registry` inherits from `NestedDict`.\n\n        Therefore, `Registry` comes in a nested structure by nature.\n        You could create a sub-registry by simply calling `registry.sub_registry = Registry`,\n        and access through `registry.sub_registry.register()`.\n\n    See Also:\n        [`ConfigRegistry`][chanfig.ConfigRegistry]: Optimised for components that can be initialised with a `config`.\n\n    Examples:\n        &gt;&gt;&gt; registry = Registry()\n        &gt;&gt;&gt; @registry.register\n        ... @registry.register(\"Module1\", default=True)\n        ... class Module:\n        ...     def __init__(self, a, b):\n        ...         self.a = a\n        ...         self.b = b\n        &gt;&gt;&gt; module = registry.register(Module, \"Module2\")\n        &gt;&gt;&gt; registry\n        Registry(\n          ('Module1'): &lt;class 'chanfig.registry.Module'&gt;\n          ('Module'): &lt;class 'chanfig.registry.Module'&gt;\n          ('Module2'): &lt;class 'chanfig.registry.Module'&gt;\n        )\n        &gt;&gt;&gt; module = registry.register(Module, \"Module\")\n        Traceback (most recent call last):\n        ValueError: Component with name Module already registered.\n        &gt;&gt;&gt; registry.lookup(\"Module\")\n        &lt;class 'chanfig.registry.Module'&gt;\n        &gt;&gt;&gt; config = {\"module\": {\"type\": \"Module\", \"a\": 0, \"b\": 1}}\n        &gt;&gt;&gt; # registry.register(Module)\n        &gt;&gt;&gt; module = registry.build(config[\"module\"])\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Module'&gt;\n        &gt;&gt;&gt; module.a, module.b\n        (0, 1)\n        &gt;&gt;&gt; config = {\"module\": {\"type\": \"NE\", \"a\": 1, \"b\": 0}}\n        &gt;&gt;&gt; module = registry.build(config[\"module\"])\n        &gt;&gt;&gt; module.a, module.b\n        (1, 0)\n        &gt;&gt;&gt; registry = Registry(case_sensitive=False)\n        &gt;&gt;&gt; module = registry.register(Module)\n        &gt;&gt;&gt; registry\n        Registry(\n          ('module'): &lt;class 'chanfig.registry.Module'&gt;\n        )\n        &gt;&gt;&gt; registry.lookup(\"module\")\n        &lt;class 'chanfig.registry.Module'&gt;\n    \"\"\"\n\n    override = False\n    key = \"type\"\n    default = Null\n    case_sensitive = True\n\n    def __init__(\n        self,\n        override: bool | None = None,\n        key: str | None = None,\n        fallback: bool | None = None,\n        default: Any = None,\n        default_factory: Callable | NULL = Null,\n        case_sensitive: bool | None = None,\n    ):\n        super().__init__(default_factory=default_factory, fallback=fallback)\n        if override is not None:\n            self.setattr(\"override\", override)\n        if key is not None:\n            self.setattr(\"key\", key)\n        if default is not None:\n            self.setdefault(default)\n        if case_sensitive is not None:\n            self.setattr(\"case_sensitive\", case_sensitive)\n\n    def register(\n        self, component: Any = Null, name: Any = Null, override: bool = False, default: bool = False\n    ) -&gt; Callable:\n        r\"\"\"\n        Register a new component.\n\n        Args:\n            component: The component to register.\n            name: The name of the component.\n\n        Raises:\n            ValueError: If the component with the same name already registered and `Registry.override=False`.\n\n        Examples:\n            &gt;&gt;&gt; registry = Registry()\n            &gt;&gt;&gt; @registry.register\n            ... @registry.register(\"Module1\")\n            ... class Module:\n            ...     def __init__(self, a, b):\n            ...         self.a = a\n            ...         self.b = b\n            &gt;&gt;&gt; module = registry.register(Module, \"Module2\")\n            &gt;&gt;&gt; registry\n            Registry(\n              ('Module1'): &lt;class 'chanfig.registry.Module'&gt;\n              ('Module'): &lt;class 'chanfig.registry.Module'&gt;\n              ('Module2'): &lt;class 'chanfig.registry.Module'&gt;\n            )\n        \"\"\"\n\n        if name in self and not (override or self.override):\n            raise ValueError(f\"Component with name {name} already registered.\")\n\n        # Registry.register()\n        if name is not Null:\n            self.set(name, component)\n            if default:\n                self.setdefault(component)\n            return component\n        # @Registry.register\n        if component is not Null and callable(component) and name is Null:\n            self.set(component.__name__, component)\n            if default:\n                self.setdefault(component)\n            return component\n\n        # @Registry.register()\n        def decorator(name: Any = Null):\n            @wraps(self.register)\n            def wrapper(component):\n                if name is Null:\n                    self.set(component.__name__, component)\n                else:\n                    self.set(name, component)\n                if default:\n                    self.setdefault(component)\n                return component\n\n            return wrapper\n\n        return decorator(component)\n\n    def set(self, name: Any, component: Any) -&gt; None:  # type: ignore[override]\n        if isinstance(name, str) and not self.getattr(\"case_sensitive\", False):\n            name = name.lower()\n        super().set(name, component)\n\n    def lookup(self, name: str, default: Any = Null) -&gt; Any:\n        r\"\"\"\n        Lookup for a component.\n\n        Raises:\n            KeyError: If the component is not registered.\n\n        Examples:\n            &gt;&gt;&gt; registry = Registry()\n            &gt;&gt;&gt; @registry.register\n            ... class Module:\n            ...     def __init__(self, a, b):\n            ...         self.a = a\n            ...         self.b = b\n            &gt;&gt;&gt; registry.lookup(\"Module\")\n            &lt;class 'chanfig.registry.Module'&gt;\n        \"\"\"\n\n        if default is Null:\n            default = self.getattr(\"default\", Null)\n            if default is Null:\n                default = None\n        if isinstance(name, str) and not self.getattr(\"case_sensitive\", False):\n            name = name.lower()\n        component = self.get(name, default)\n        if isinstance(component, Registry):\n            is_fallback = not component\n            component = component.getattr(\"default\")\n            if is_fallback:\n                warn(f\"Component {name} is not registered, falling back to {component}.\", stacklevel=2)\n        if component in (Null, None):\n            raise ValueError(f\"Component {name} is not registered.\")\n        return component\n\n    @staticmethod\n    def init(cls: Callable, *args: Any, **kwargs: Any) -&gt; Any:  # pylint: disable=W0211\n        r\"\"\"\n        Constructor of component.\n\n        Args:\n            cls: The component to construct.\n            *args: The arguments to pass to the component.\n            **kwargs: The keyword arguments to pass to the component.\n\n        Examples:\n            &gt;&gt;&gt; class Module:\n            ...     def __init__(self, a, b):\n            ...         self.a = a\n            ...         self.b = b\n            &gt;&gt;&gt; kwargs = {\"a\": 0, \"b\": 1}\n            &gt;&gt;&gt; module = Registry.init(Module, **kwargs)\n            &gt;&gt;&gt; type(module)\n            &lt;class 'chanfig.registry.Module'&gt;\n            &gt;&gt;&gt; module.a, module.b\n            (0, 1)\n            &gt;&gt;&gt; kwargs = {\"a\": 1, \"b\": 0, \"enabled\": True}\n            &gt;&gt;&gt; if kwargs.get(\"enabled\"):\n            ...     module = Registry.init(Module, **kwargs)\n            &gt;&gt;&gt; type(module)\n            &lt;class 'chanfig.registry.Module'&gt;\n            &gt;&gt;&gt; module.a, module.b\n            (1, 0)\n        \"\"\"\n\n        sig = signature(cls)\n        ignored_kwargs, passing_kwargs = {}, {}\n        for k, v in kwargs.items():\n            if k in sig.parameters:\n                passing_kwargs[k] = v\n            else:\n                ignored_kwargs[k] = v\n        if ignored_kwargs:\n            warn(\n                f\"The following kwargs do not match the signature of {cls.__name__} and will be ignored: {ignored_kwargs}\",  # noqa: E501\n                stacklevel=2,\n            )\n        return cls(*args, **passing_kwargs)\n\n    def build(self, name: str | MutableMapping | NULL = Null, *args: Any, **kwargs: Any) -&gt; Any:\n        r\"\"\"\n        Build a component.\n\n        Args:\n            name (str | MutableMapping):\n                If its a `MutableMapping`, it must contain `key` as a member, the rest will be treated as `**kwargs`.\n                Note that values in `kwargs` will override values in `name` if its a `MutableMapping`.\n            *args: The arguments to pass to the component.\n            **kwargs: The keyword arguments to pass to the component.\n\n        Raises:\n            KeyError: If the component is not registered.\n\n        Examples:\n            &gt;&gt;&gt; registry = Registry(key=\"model\")\n            &gt;&gt;&gt; @registry.register\n            ... class Module:\n            ...     def __init__(self, a, b):\n            ...         self.a = a\n            ...         self.b = b\n            &gt;&gt;&gt; config = {\"module\": {\"model\": \"Module\", \"a\": 1, \"b\": 2}}\n            &gt;&gt;&gt; # registry.register(Module)\n            &gt;&gt;&gt; module = registry.build(**config[\"module\"])\n            &gt;&gt;&gt; type(module)\n            &lt;class 'chanfig.registry.Module'&gt;\n            &gt;&gt;&gt; module.a\n            1\n            &gt;&gt;&gt; module.b\n            2\n            &gt;&gt;&gt; module = registry.build(config[\"module\"], a=2)\n            &gt;&gt;&gt; module.a\n            2\n        \"\"\"\n\n        key = self.getattr(\"key\", \"type\")\n\n        if isinstance(name, MutableMapping):\n            kwargs_ = deepcopy(name)\n            name, kwargs = kwargs_.pop(key), dict(kwargs_, **kwargs)\n        elif key in kwargs:\n            if name is not Null:\n                args = (name,) + args\n            name = kwargs.pop(key)\n\n        return self.init(self.lookup(name), *args, **kwargs)  # type: ignore[arg-type]\n\n    def setdefault(self, component: Any) -&gt; Any:  # type: ignore[override]\n        self.setattr(\"default\", component)\n        return component\n</code></pre>"},{"location":"registry/#chanfig.registry.Registry.register","title":"register","text":"Python<pre><code>register(component: Any = Null, name: Any = Null, override: bool = False, default: bool = False) -&gt; Callable\n</code></pre> <p>Register a new component.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>The component to register.</p> <code>Null</code> <code>Any</code> <p>The name of the component.</p> <code>Null</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the component with the same name already registered and <code>Registry.override=False</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; registry = Registry()\n&gt;&gt;&gt; @registry.register\n... @registry.register(\"Module1\")\n... class Module:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n&gt;&gt;&gt; module = registry.register(Module, \"Module2\")\n&gt;&gt;&gt; registry\nRegistry(\n  ('Module1'): &lt;class 'chanfig.registry.Module'&gt;\n  ('Module'): &lt;class 'chanfig.registry.Module'&gt;\n  ('Module2'): &lt;class 'chanfig.registry.Module'&gt;\n)\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>def register(\n    self, component: Any = Null, name: Any = Null, override: bool = False, default: bool = False\n) -&gt; Callable:\n    r\"\"\"\n    Register a new component.\n\n    Args:\n        component: The component to register.\n        name: The name of the component.\n\n    Raises:\n        ValueError: If the component with the same name already registered and `Registry.override=False`.\n\n    Examples:\n        &gt;&gt;&gt; registry = Registry()\n        &gt;&gt;&gt; @registry.register\n        ... @registry.register(\"Module1\")\n        ... class Module:\n        ...     def __init__(self, a, b):\n        ...         self.a = a\n        ...         self.b = b\n        &gt;&gt;&gt; module = registry.register(Module, \"Module2\")\n        &gt;&gt;&gt; registry\n        Registry(\n          ('Module1'): &lt;class 'chanfig.registry.Module'&gt;\n          ('Module'): &lt;class 'chanfig.registry.Module'&gt;\n          ('Module2'): &lt;class 'chanfig.registry.Module'&gt;\n        )\n    \"\"\"\n\n    if name in self and not (override or self.override):\n        raise ValueError(f\"Component with name {name} already registered.\")\n\n    # Registry.register()\n    if name is not Null:\n        self.set(name, component)\n        if default:\n            self.setdefault(component)\n        return component\n    # @Registry.register\n    if component is not Null and callable(component) and name is Null:\n        self.set(component.__name__, component)\n        if default:\n            self.setdefault(component)\n        return component\n\n    # @Registry.register()\n    def decorator(name: Any = Null):\n        @wraps(self.register)\n        def wrapper(component):\n            if name is Null:\n                self.set(component.__name__, component)\n            else:\n                self.set(name, component)\n            if default:\n                self.setdefault(component)\n            return component\n\n        return wrapper\n\n    return decorator(component)\n</code></pre>"},{"location":"registry/#chanfig.registry.Registry.register(component)","title":"<code>component</code>","text":""},{"location":"registry/#chanfig.registry.Registry.register(name)","title":"<code>name</code>","text":""},{"location":"registry/#chanfig.registry.Registry.lookup","title":"lookup","text":"Python<pre><code>lookup(name: str, default: Any = Null) -&gt; Any\n</code></pre> <p>Lookup for a component.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the component is not registered.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; registry = Registry()\n&gt;&gt;&gt; @registry.register\n... class Module:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n&gt;&gt;&gt; registry.lookup(\"Module\")\n&lt;class 'chanfig.registry.Module'&gt;\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>def lookup(self, name: str, default: Any = Null) -&gt; Any:\n    r\"\"\"\n    Lookup for a component.\n\n    Raises:\n        KeyError: If the component is not registered.\n\n    Examples:\n        &gt;&gt;&gt; registry = Registry()\n        &gt;&gt;&gt; @registry.register\n        ... class Module:\n        ...     def __init__(self, a, b):\n        ...         self.a = a\n        ...         self.b = b\n        &gt;&gt;&gt; registry.lookup(\"Module\")\n        &lt;class 'chanfig.registry.Module'&gt;\n    \"\"\"\n\n    if default is Null:\n        default = self.getattr(\"default\", Null)\n        if default is Null:\n            default = None\n    if isinstance(name, str) and not self.getattr(\"case_sensitive\", False):\n        name = name.lower()\n    component = self.get(name, default)\n    if isinstance(component, Registry):\n        is_fallback = not component\n        component = component.getattr(\"default\")\n        if is_fallback:\n            warn(f\"Component {name} is not registered, falling back to {component}.\", stacklevel=2)\n    if component in (Null, None):\n        raise ValueError(f\"Component {name} is not registered.\")\n    return component\n</code></pre>"},{"location":"registry/#chanfig.registry.Registry.init","title":"init  <code>staticmethod</code>","text":"Python<pre><code>init(*args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Constructor of component.</p> <p>Parameters:</p> Name Type Description Default <code>Callable</code> <p>The component to construct.</p> required <code>Any</code> <p>The arguments to pass to the component.</p> <code>()</code> <code>Any</code> <p>The keyword arguments to pass to the component.</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; class Module:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n&gt;&gt;&gt; kwargs = {\"a\": 0, \"b\": 1}\n&gt;&gt;&gt; module = Registry.init(Module, **kwargs)\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Module'&gt;\n&gt;&gt;&gt; module.a, module.b\n(0, 1)\n&gt;&gt;&gt; kwargs = {\"a\": 1, \"b\": 0, \"enabled\": True}\n&gt;&gt;&gt; if kwargs.get(\"enabled\"):\n...     module = Registry.init(Module, **kwargs)\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Module'&gt;\n&gt;&gt;&gt; module.a, module.b\n(1, 0)\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>@staticmethod\ndef init(cls: Callable, *args: Any, **kwargs: Any) -&gt; Any:  # pylint: disable=W0211\n    r\"\"\"\n    Constructor of component.\n\n    Args:\n        cls: The component to construct.\n        *args: The arguments to pass to the component.\n        **kwargs: The keyword arguments to pass to the component.\n\n    Examples:\n        &gt;&gt;&gt; class Module:\n        ...     def __init__(self, a, b):\n        ...         self.a = a\n        ...         self.b = b\n        &gt;&gt;&gt; kwargs = {\"a\": 0, \"b\": 1}\n        &gt;&gt;&gt; module = Registry.init(Module, **kwargs)\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Module'&gt;\n        &gt;&gt;&gt; module.a, module.b\n        (0, 1)\n        &gt;&gt;&gt; kwargs = {\"a\": 1, \"b\": 0, \"enabled\": True}\n        &gt;&gt;&gt; if kwargs.get(\"enabled\"):\n        ...     module = Registry.init(Module, **kwargs)\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Module'&gt;\n        &gt;&gt;&gt; module.a, module.b\n        (1, 0)\n    \"\"\"\n\n    sig = signature(cls)\n    ignored_kwargs, passing_kwargs = {}, {}\n    for k, v in kwargs.items():\n        if k in sig.parameters:\n            passing_kwargs[k] = v\n        else:\n            ignored_kwargs[k] = v\n    if ignored_kwargs:\n        warn(\n            f\"The following kwargs do not match the signature of {cls.__name__} and will be ignored: {ignored_kwargs}\",  # noqa: E501\n            stacklevel=2,\n        )\n    return cls(*args, **passing_kwargs)\n</code></pre>"},{"location":"registry/#chanfig.registry.Registry.init(cls)","title":"<code>cls</code>","text":""},{"location":"registry/#chanfig.registry.Registry.init(*args)","title":"<code>*args</code>","text":""},{"location":"registry/#chanfig.registry.Registry.init(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"registry/#chanfig.registry.Registry.build","title":"build","text":"Python<pre><code>build(name: str | MutableMapping | NULL = Null, *args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Build a component.</p> <p>Parameters:</p> Name Type Description Default <code>str | MutableMapping</code> <p>If its a <code>MutableMapping</code>, it must contain <code>key</code> as a member, the rest will be treated as <code>**kwargs</code>. Note that values in <code>kwargs</code> will override values in <code>name</code> if its a <code>MutableMapping</code>.</p> <code>Null</code> <code>Any</code> <p>The arguments to pass to the component.</p> <code>()</code> <code>Any</code> <p>The keyword arguments to pass to the component.</p> <code>{}</code> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the component is not registered.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; registry = Registry(key=\"model\")\n&gt;&gt;&gt; @registry.register\n... class Module:\n...     def __init__(self, a, b):\n...         self.a = a\n...         self.b = b\n&gt;&gt;&gt; config = {\"module\": {\"model\": \"Module\", \"a\": 1, \"b\": 2}}\n&gt;&gt;&gt; # registry.register(Module)\n&gt;&gt;&gt; module = registry.build(**config[\"module\"])\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Module'&gt;\n&gt;&gt;&gt; module.a\n1\n&gt;&gt;&gt; module.b\n2\n&gt;&gt;&gt; module = registry.build(config[\"module\"], a=2)\n&gt;&gt;&gt; module.a\n2\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>def build(self, name: str | MutableMapping | NULL = Null, *args: Any, **kwargs: Any) -&gt; Any:\n    r\"\"\"\n    Build a component.\n\n    Args:\n        name (str | MutableMapping):\n            If its a `MutableMapping`, it must contain `key` as a member, the rest will be treated as `**kwargs`.\n            Note that values in `kwargs` will override values in `name` if its a `MutableMapping`.\n        *args: The arguments to pass to the component.\n        **kwargs: The keyword arguments to pass to the component.\n\n    Raises:\n        KeyError: If the component is not registered.\n\n    Examples:\n        &gt;&gt;&gt; registry = Registry(key=\"model\")\n        &gt;&gt;&gt; @registry.register\n        ... class Module:\n        ...     def __init__(self, a, b):\n        ...         self.a = a\n        ...         self.b = b\n        &gt;&gt;&gt; config = {\"module\": {\"model\": \"Module\", \"a\": 1, \"b\": 2}}\n        &gt;&gt;&gt; # registry.register(Module)\n        &gt;&gt;&gt; module = registry.build(**config[\"module\"])\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Module'&gt;\n        &gt;&gt;&gt; module.a\n        1\n        &gt;&gt;&gt; module.b\n        2\n        &gt;&gt;&gt; module = registry.build(config[\"module\"], a=2)\n        &gt;&gt;&gt; module.a\n        2\n    \"\"\"\n\n    key = self.getattr(\"key\", \"type\")\n\n    if isinstance(name, MutableMapping):\n        kwargs_ = deepcopy(name)\n        name, kwargs = kwargs_.pop(key), dict(kwargs_, **kwargs)\n    elif key in kwargs:\n        if name is not Null:\n            args = (name,) + args\n        name = kwargs.pop(key)\n\n    return self.init(self.lookup(name), *args, **kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"registry/#chanfig.registry.Registry.build(name)","title":"<code>name</code>","text":""},{"location":"registry/#chanfig.registry.Registry.build(*args)","title":"<code>*args</code>","text":""},{"location":"registry/#chanfig.registry.Registry.build(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"registry/#chanfig.registry.ConfigRegistry","title":"ConfigRegistry","text":"<p>               Bases: <code>Registry</code></p> <p><code>ConfigRegistry</code> for components that can be initialised with a <code>config</code>.</p> <p><code>ConfigRegistry</code> is particularly useful when you want to construct a component from a configuration, such as a Hugginface Transformers model.</p> See Also <p><code>Registry</code>: General purpose Registry.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from dataclasses import dataclass, field\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     a: int\n...     b: int\n...     mode: str = \"proj\"\n&gt;&gt;&gt; registry = ConfigRegistry(key=\"mode\")\n&gt;&gt;&gt; @registry.register(\"proj\")\n... class Proj:\n...     def __init__(self, config):\n...         self.a = config.a\n...         self.b = config.b\n&gt;&gt;&gt; @registry.register(\"inv\")\n... class Inv:\n...     def __init__(self, config):\n...         self.a = config.b\n...         self.b = config.a\n&gt;&gt;&gt; registry\nConfigRegistry(\n  ('proj'): &lt;class 'chanfig.registry.Proj'&gt;\n  ('inv'): &lt;class 'chanfig.registry.Inv'&gt;\n)\n&gt;&gt;&gt; config = Config(a=0, b=1)\n&gt;&gt;&gt; module = registry.build(config)\n&gt;&gt;&gt; module.a, module.b\n(0, 1)\n&gt;&gt;&gt; config = Config(a=0, b=1, mode=\"inv\")\n&gt;&gt;&gt; module = registry.build(config)\n&gt;&gt;&gt; module.a, module.b\n(1, 0)\n&gt;&gt;&gt; @dataclass\n... class ModuleConfig:\n...     a: int = 0\n...     b: int = 1\n...     mode: str = \"proj\"\n&gt;&gt;&gt; @dataclass\n... class NestedConfig:\n...     module: ModuleConfig = field(default_factory=ModuleConfig)\n&gt;&gt;&gt; nested_registry = ConfigRegistry(key=\"module.mode\")\n&gt;&gt;&gt; @nested_registry.register(\"proj\")\n... class Proj:\n...     def __init__(self, config):\n...         self.a = config.module.a\n...         self.b = config.module.b\n&gt;&gt;&gt; @nested_registry.register(\"inv\")\n... class Inv:\n...     def __init__(self, config):\n...         self.a = config.module.b\n...         self.b = config.module.a\n&gt;&gt;&gt; nested_config = NestedConfig()\n&gt;&gt;&gt; module = nested_registry.build(nested_config)\n&gt;&gt;&gt; module.a, module.b\n(0, 1)\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>class ConfigRegistry(Registry):\n    \"\"\"\n    `ConfigRegistry` for components that can be initialised with a `config`.\n\n    `ConfigRegistry` is particularly useful when you want to construct a component from a configuration, such as a\n    Hugginface Transformers model.\n\n    See Also:\n        [`Registry`][chanfig.Registry]: General purpose Registry.\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass, field\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     a: int\n        ...     b: int\n        ...     mode: str = \"proj\"\n        &gt;&gt;&gt; registry = ConfigRegistry(key=\"mode\")\n        &gt;&gt;&gt; @registry.register(\"proj\")\n        ... class Proj:\n        ...     def __init__(self, config):\n        ...         self.a = config.a\n        ...         self.b = config.b\n        &gt;&gt;&gt; @registry.register(\"inv\")\n        ... class Inv:\n        ...     def __init__(self, config):\n        ...         self.a = config.b\n        ...         self.b = config.a\n        &gt;&gt;&gt; registry\n        ConfigRegistry(\n          ('proj'): &lt;class 'chanfig.registry.Proj'&gt;\n          ('inv'): &lt;class 'chanfig.registry.Inv'&gt;\n        )\n        &gt;&gt;&gt; config = Config(a=0, b=1)\n        &gt;&gt;&gt; module = registry.build(config)\n        &gt;&gt;&gt; module.a, module.b\n        (0, 1)\n        &gt;&gt;&gt; config = Config(a=0, b=1, mode=\"inv\")\n        &gt;&gt;&gt; module = registry.build(config)\n        &gt;&gt;&gt; module.a, module.b\n        (1, 0)\n        &gt;&gt;&gt; @dataclass\n        ... class ModuleConfig:\n        ...     a: int = 0\n        ...     b: int = 1\n        ...     mode: str = \"proj\"\n        &gt;&gt;&gt; @dataclass\n        ... class NestedConfig:\n        ...     module: ModuleConfig = field(default_factory=ModuleConfig)\n        &gt;&gt;&gt; nested_registry = ConfigRegistry(key=\"module.mode\")\n        &gt;&gt;&gt; @nested_registry.register(\"proj\")\n        ... class Proj:\n        ...     def __init__(self, config):\n        ...         self.a = config.module.a\n        ...         self.b = config.module.b\n        &gt;&gt;&gt; @nested_registry.register(\"inv\")\n        ... class Inv:\n        ...     def __init__(self, config):\n        ...         self.a = config.module.b\n        ...         self.b = config.module.a\n        &gt;&gt;&gt; nested_config = NestedConfig()\n        &gt;&gt;&gt; module = nested_registry.build(nested_config)\n        &gt;&gt;&gt; module.a, module.b\n        (0, 1)\n    \"\"\"\n\n    @staticmethod\n    def init(cls: Callable, config, *args: Any, **kwargs: Any) -&gt; Any:  # pylint: disable=W0211\n        r\"\"\"\n        Constructor of component.\n\n        Args:\n            cls: The component to construct.\n            *args: The arguments to pass to the component.\n            **kwargs: The keyword arguments to pass to the component.\n\n        Examples:\n            &gt;&gt;&gt; class Module:\n            ...     def __init__(self, config, a=None, b=None):\n            ...         self.config = config\n            ...         self.a = config.a if a is None else a\n            ...         self.b = config.b if b is None else b\n            &gt;&gt;&gt; config = NestedDict({\"a\": 0, \"b\": 1})\n            &gt;&gt;&gt; module = ConfigRegistry.init(Module, config, b=2)\n            &gt;&gt;&gt; module.a, module.b\n            (0, 2)\n        \"\"\"\n\n        return cls(config, *args, **kwargs)\n\n    def build(self, config, *args, **kwargs) -&gt; Any:  # type: ignore[override]\n        r\"\"\"\n        Build a component.\n\n        Args:\n            config\n\n        Raises:\n            KeyError: If the component is not registered.\n\n        Examples:\n            &gt;&gt;&gt; from dataclasses import dataclass, field\n            &gt;&gt;&gt; registry = ConfigRegistry(key=\"module.mode\")\n            &gt;&gt;&gt; @registry.register(\"proj\")\n            ... class Proj:\n            ...     def __init__(self, config):\n            ...         self.a = config.module.a\n            ...         self.b = config.module.b\n            &gt;&gt;&gt; @registry.register(\"inv\")\n            ... class Inv:\n            ...     def __init__(self, config):\n            ...         self.a = config.module.b\n            ...         self.b = config.module.a\n            &gt;&gt;&gt; @dataclass\n            ... class ModuleConfig:\n            ...     a: int = 0\n            ...     b: int = 1\n            ...     mode: str = \"proj\"\n            &gt;&gt;&gt; @dataclass\n            ... class Config:\n            ...     module: ModuleConfig = field(default_factory=ModuleConfig)\n            &gt;&gt;&gt; config = Config()\n            &gt;&gt;&gt; module = registry.build(config)\n            &gt;&gt;&gt; type(module)\n            &lt;class 'chanfig.registry.Proj'&gt;\n            &gt;&gt;&gt; module.a, module.b\n            (0, 1)\n            &gt;&gt;&gt; type(module)\n            &lt;class 'chanfig.registry.Proj'&gt;\n        \"\"\"\n\n        key = self.getattr(\"key\")\n        config_ = deepcopy(config)\n\n        while \".\" in key:\n            key, rest = key.split(\".\", 1)\n            config_, key = getattr(config_, key), rest\n        name = getattr(config_, key, None)\n\n        return self.init(self.lookup(name), config, *args, **kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"registry/#chanfig.registry.ConfigRegistry.init","title":"init  <code>staticmethod</code>","text":"Python<pre><code>init(config, *args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Constructor of component.</p> <p>Parameters:</p> Name Type Description Default <code>Callable</code> <p>The component to construct.</p> required <code>Any</code> <p>The arguments to pass to the component.</p> <code>()</code> <code>Any</code> <p>The keyword arguments to pass to the component.</p> <code>{}</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; class Module:\n...     def __init__(self, config, a=None, b=None):\n...         self.config = config\n...         self.a = config.a if a is None else a\n...         self.b = config.b if b is None else b\n&gt;&gt;&gt; config = NestedDict({\"a\": 0, \"b\": 1})\n&gt;&gt;&gt; module = ConfigRegistry.init(Module, config, b=2)\n&gt;&gt;&gt; module.a, module.b\n(0, 2)\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>@staticmethod\ndef init(cls: Callable, config, *args: Any, **kwargs: Any) -&gt; Any:  # pylint: disable=W0211\n    r\"\"\"\n    Constructor of component.\n\n    Args:\n        cls: The component to construct.\n        *args: The arguments to pass to the component.\n        **kwargs: The keyword arguments to pass to the component.\n\n    Examples:\n        &gt;&gt;&gt; class Module:\n        ...     def __init__(self, config, a=None, b=None):\n        ...         self.config = config\n        ...         self.a = config.a if a is None else a\n        ...         self.b = config.b if b is None else b\n        &gt;&gt;&gt; config = NestedDict({\"a\": 0, \"b\": 1})\n        &gt;&gt;&gt; module = ConfigRegistry.init(Module, config, b=2)\n        &gt;&gt;&gt; module.a, module.b\n        (0, 2)\n    \"\"\"\n\n    return cls(config, *args, **kwargs)\n</code></pre>"},{"location":"registry/#chanfig.registry.ConfigRegistry.init(cls)","title":"<code>cls</code>","text":""},{"location":"registry/#chanfig.registry.ConfigRegistry.init(*args)","title":"<code>*args</code>","text":""},{"location":"registry/#chanfig.registry.ConfigRegistry.init(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"registry/#chanfig.registry.ConfigRegistry.build","title":"build","text":"Python<pre><code>build(config, *args, **kwargs) -&gt; Any\n</code></pre> <p>Build a component.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the component is not registered.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from dataclasses import dataclass, field\n&gt;&gt;&gt; registry = ConfigRegistry(key=\"module.mode\")\n&gt;&gt;&gt; @registry.register(\"proj\")\n... class Proj:\n...     def __init__(self, config):\n...         self.a = config.module.a\n...         self.b = config.module.b\n&gt;&gt;&gt; @registry.register(\"inv\")\n... class Inv:\n...     def __init__(self, config):\n...         self.a = config.module.b\n...         self.b = config.module.a\n&gt;&gt;&gt; @dataclass\n... class ModuleConfig:\n...     a: int = 0\n...     b: int = 1\n...     mode: str = \"proj\"\n&gt;&gt;&gt; @dataclass\n... class Config:\n...     module: ModuleConfig = field(default_factory=ModuleConfig)\n&gt;&gt;&gt; config = Config()\n&gt;&gt;&gt; module = registry.build(config)\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Proj'&gt;\n&gt;&gt;&gt; module.a, module.b\n(0, 1)\n&gt;&gt;&gt; type(module)\n&lt;class 'chanfig.registry.Proj'&gt;\n</code></pre> Source code in <code>chanfig/registry.py</code> Python<pre><code>def build(self, config, *args, **kwargs) -&gt; Any:  # type: ignore[override]\n    r\"\"\"\n    Build a component.\n\n    Args:\n        config\n\n    Raises:\n        KeyError: If the component is not registered.\n\n    Examples:\n        &gt;&gt;&gt; from dataclasses import dataclass, field\n        &gt;&gt;&gt; registry = ConfigRegistry(key=\"module.mode\")\n        &gt;&gt;&gt; @registry.register(\"proj\")\n        ... class Proj:\n        ...     def __init__(self, config):\n        ...         self.a = config.module.a\n        ...         self.b = config.module.b\n        &gt;&gt;&gt; @registry.register(\"inv\")\n        ... class Inv:\n        ...     def __init__(self, config):\n        ...         self.a = config.module.b\n        ...         self.b = config.module.a\n        &gt;&gt;&gt; @dataclass\n        ... class ModuleConfig:\n        ...     a: int = 0\n        ...     b: int = 1\n        ...     mode: str = \"proj\"\n        &gt;&gt;&gt; @dataclass\n        ... class Config:\n        ...     module: ModuleConfig = field(default_factory=ModuleConfig)\n        &gt;&gt;&gt; config = Config()\n        &gt;&gt;&gt; module = registry.build(config)\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Proj'&gt;\n        &gt;&gt;&gt; module.a, module.b\n        (0, 1)\n        &gt;&gt;&gt; type(module)\n        &lt;class 'chanfig.registry.Proj'&gt;\n    \"\"\"\n\n    key = self.getattr(\"key\")\n    config_ = deepcopy(config)\n\n    while \".\" in key:\n        key, rest = key.split(\".\", 1)\n        config_, key = getattr(config_, key), rest\n    name = getattr(config_, key, None)\n\n    return self.init(self.lookup(name), config, *args, **kwargs)  # type: ignore[arg-type]\n</code></pre>"},{"location":"utils/","title":"Utilities","text":""},{"location":"utils/#chanfig.utils","title":"chanfig.utils","text":""},{"location":"utils/#chanfig.utils.JsonEncoder","title":"JsonEncoder","text":"<p>               Bases: <code>JSONEncoder</code></p> <p>JSON encoder for Config.</p> Source code in <code>chanfig/utils/io.py</code> Python<pre><code>class JsonEncoder(JSONEncoder):\n    r\"\"\"\n    JSON encoder for Config.\n    \"\"\"\n\n    def default(self, o: Any) -&gt; Any:\n        if hasattr(o, \"__json__\"):\n            return o.__json__()\n        if hasattr(o, \"to_dict\"):\n            return o.to_dict()\n        return super().default(o)\n</code></pre>"},{"location":"utils/#chanfig.utils.YamlDumper","title":"YamlDumper","text":"<p>               Bases: <code>SafeDumper</code></p> <p>YAML Dumper for Config.</p> Source code in <code>chanfig/utils/io.py</code> Python<pre><code>class YamlDumper(SafeDumper):  # pylint: disable=R0903\n    r\"\"\"\n    YAML Dumper for Config.\n    \"\"\"\n\n    def increase_indent(self, flow: bool = False, indentless: bool = False):  # pylint: disable=W0235\n        return super().increase_indent(flow, indentless)\n</code></pre>"},{"location":"utils/#chanfig.utils.YamlLoader","title":"YamlLoader","text":"<p>               Bases: <code>SafeLoader</code></p> <p>YAML Loader for Config.</p> Source code in <code>chanfig/utils/io.py</code> Python<pre><code>class YamlLoader(SafeLoader):\n    r\"\"\"\n    YAML Loader for Config.\n    \"\"\"\n\n    def __init__(self, stream):\n        super().__init__(stream)\n        self._root = os.path.abspath(os.path.dirname(stream.name)) if hasattr(stream, \"name\") else os.getcwd()\n        self.add_constructor(\"!include\", self._include)\n        self.add_constructor(\"!includes\", self._includes)\n        self.add_constructor(\"!env\", self._env)\n\n    @staticmethod\n    def _include(loader: YamlLoader, node):\n        relative_path = loader.construct_scalar(node)\n        include_path = os.path.join(loader._root, relative_path)\n\n        if not os.path.exists(include_path):\n            raise FileNotFoundError(f\"Included file not found: {include_path}\")\n\n        return load(include_path)\n\n    @staticmethod\n    def _includes(loader: YamlLoader, node):\n        if not isinstance(node, SequenceNode):\n            raise ConstructorError(None, None, f\"!includes tag expects a sequence, got {node.id}\", node.start_mark)\n        files = loader.construct_sequence(node)\n        return [YamlLoader._include(loader, ScalarNode(\"tag:yaml.org,2002:str\", file)) for file in files]\n\n    @staticmethod\n    def _env(loader: YamlLoader, node):\n        env_var = loader.construct_scalar(node)\n        value = os.getenv(env_var)\n        if value is None:\n            raise ValueError(f\"Environment variable '{env_var}' not set.\")\n        return value\n</code></pre>"},{"location":"utils/#chanfig.utils.NULL","title":"NULL","text":"<p>NULL class.</p> <p><code>get</code> method in CHANfiG may accept <code>None</code> or <code>Ellipse</code>(<code>...</code>) as value of <code>default</code>. Therefore, it is mandatory to have a different default value for <code>default</code>.</p> <p><code>Null</code> is an instance of <code>NULL</code> and is recommended to be used as <code>obj is Null</code>.</p> Source code in <code>chanfig/utils/null.py</code> Python<pre><code>class NULL(metaclass=Singleton):\n    r\"\"\"\n    NULL class.\n\n    `get` method in CHANfiG may accept `None` or `Ellipse`(`...`) as value of `default`.\n    Therefore, it is mandatory to have a different default value for `default`.\n\n    `Null` is an instance of `NULL` and is recommended to be used as `obj is Null`.\n    \"\"\"\n\n    def __repr__(self):\n        return \"Null\"\n\n    def __nonzero__(self):\n        return False\n\n    def __len__(self):\n        return 0\n\n    def __call__(self, *args: Any, **kwargs: Any):\n        return self\n\n    def __contains__(self, name):\n        return False\n\n    def __iter__(self):\n        return self\n\n    def __next__(self):\n        raise StopIteration\n\n    def __getattr__(self, name):\n        return self\n\n    def __getitem__(self, index):\n        return self\n</code></pre>"},{"location":"utils/#chanfig.utils.conform_annotation","title":"conform_annotation","text":"Python<pre><code>conform_annotation(data: Any, annotation: type) -&gt; bool\n</code></pre> <p>Check if data is valid according to the expected type.</p> <p>This function handles complex type annotations including: - Basic types (int, str, etc.) - Container types (List, Dict, etc.) - Union types (including Optional) - Nested generic types</p> Source code in <code>chanfig/utils/annotation.py</code> Python<pre><code>def conform_annotation(data: Any, annotation: type) -&gt; bool:\n    r\"\"\"\n    Check if data is valid according to the expected type.\n\n    This function handles complex type annotations including:\n    - Basic types (int, str, etc.)\n    - Container types (List, Dict, etc.)\n    - Union types (including Optional)\n    - Nested generic types\n    \"\"\"\n    if annotation is Any:\n        return True\n    if annotation is type(None):\n        return data is None\n    origin_type = get_origin(annotation)\n    arg_types = get_args(annotation)\n    if origin_type in (Union, UnionType):\n        return any(conform_annotation(data, arg_type) for arg_type in arg_types)\n    if origin_type is Callable:\n        return callable(data)\n    if origin_type is not None and arg_types:\n        if not isinstance(data, origin_type):\n            return False\n        if not data:\n            return True\n        if origin_type is tuple and len(arg_types) &gt; 1 and arg_types[-1] is not Ellipsis:\n            if len(data) != len(arg_types):\n                return False\n            return all(conform_annotation(item, type_) for item, type_ in zip(data, arg_types))\n        if issubclass(origin_type, Sequence) and not isinstance(data, str):\n            item_type = arg_types[0]\n            return all(conform_annotation(item, item_type) for item in data)\n        if issubclass(origin_type, Mapping):\n            key_type, value_type = arg_types[:2]\n            return all(conform_annotation(k, key_type) and conform_annotation(v, value_type) for k, v in data.items())\n        if issubclass(origin_type, (set, frozenset)):\n            item_type = arg_types[0]\n            return all(conform_annotation(item, item_type) for item in data)\n        return isinstance(data, origin_type)\n    try:\n        return isinstance(data, annotation)\n    except TypeError:\n        return False\n</code></pre>"},{"location":"utils/#chanfig.utils.get_annotations","title":"get_annotations","text":"Python<pre><code>get_annotations(obj, *, globalns: Mapping | None = None, localns: Mapping | None = None, eval_str: bool = True) -&gt; Mapping\n</code></pre> <p>Compute the annotations dict for an object.</p> <p>obj may be a callable, class, or module. Passing in an object of any other type raises TypeError.</p> <p>Returns a dict.  get_annotations() returns a new dict every time it\u2019s called; calling it twice on the same object will return two different but equivalent dicts.</p> <p>This function handles several details for you:</p> <ul> <li>If <code>eval_str</code> is true, values of type str will     be un-stringized using <code>eval()</code>.  This is intended     for use with stringized annotations     (<code>from __future__ import annotations</code>).</li> <li><code>globalns</code> fall back to public member of <code>typing</code>.</li> <li>If obj doesn\u2019t have an annotations dict, returns an     empty dict.  (Functions and methods always have an     annotations dict; classes, modules, and other types of     callables may not.)</li> <li>Ignores inherited annotations on classes.  If a class     doesn\u2019t have its own annotations dict, returns an empty dict.</li> <li>All accesses to object members and dict values are done     using <code>getattr()</code> and <code>dict.get()</code> for safety.</li> <li>Always, always, always returns a freshly-created dict.</li> </ul> <p><code>eval_str</code> controls whether or not values of type str are replaced with the result of calling eval() on those values:</p> <ul> <li>If <code>eval_str</code> is true, eval() is called on values of type str.</li> <li>If <code>eval_str</code> is false (the default), values of type str are unchanged.</li> </ul> <p><code>globalns</code> and <code>localns</code> are passed in to <code>eval()</code>; see the documentation for <code>eval()</code> for more information.</p> <p><code>globalns</code> fall back to public member of <code>typing</code>.</p> <p>If either <code>globalns</code> or <code>localns</code> is None, this function may replace that value with a context-specific default, contingent on <code>type(obj)</code>:</p> <ul> <li>If <code>obj</code> is a module, globalns defaults to <code>obj.__dict__</code>.</li> <li>If <code>obj</code> is a class, globalns defaults to     <code>sys.modules[obj.__module__].__dict__</code> and <code>localns</code>     defaults to the obj class namespace.</li> <li>If <code>obj</code> is a callable, <code>globalns</code> defaults to <code>obj.__globals__</code>,     although if obj is a wrapped function (using     functools.update_wrapper()) it is first unwrapped.</li> <li>If <code>obj</code> is an instance, <code>globalns</code> defaults to     <code>sys.modules[obj.__module__].__dict__</code> and localns     defaults to the obj class namespace.</li> </ul> Source code in <code>chanfig/utils/annotation.py</code> Python<pre><code>@no_type_check\ndef get_annotations(  # pylint: disable=all\n    obj, *, globalns: Mapping | None = None, localns: Mapping | None = None, eval_str: bool = True\n) -&gt; Mapping:\n    r\"\"\"\n    Compute the annotations dict for an object.\n\n    obj may be a callable, class, or module.\n    Passing in an object of any other type raises TypeError.\n\n    Returns a dict.  get_annotations() returns a new dict every time\n    it's called; calling it twice on the same object will return two\n    different but equivalent dicts.\n\n    This function handles several details for you:\n\n      * If `eval_str` is true, values of type str will\n        be un-stringized using `eval()`.  This is intended\n        for use with stringized annotations\n        (`from __future__ import annotations`).\n      * `globalns` fall back to public member of `typing`.\n      * If obj doesn't have an annotations dict, returns an\n        empty dict.  (Functions and methods always have an\n        annotations dict; classes, modules, and other types of\n        callables may not.)\n      * Ignores inherited annotations on classes.  If a class\n        doesn't have its own annotations dict, returns an empty dict.\n      * All accesses to object members and dict values are done\n        using `getattr()` and `dict.get()` for safety.\n      * Always, always, always returns a freshly-created dict.\n\n    `eval_str` controls whether or not values of type str are replaced\n    with the result of calling eval() on those values:\n\n      * If `eval_str` is true, eval() is called on values of type str.\n      * If `eval_str` is false (the default), values of type str are unchanged.\n\n    `globalns` and `localns` are passed in to `eval()`; see the documentation\n    for `eval()` for more information.\n\n    `globalns` fall back to public member of `typing`.\n\n    If either `globalns` or `localns` is\n    None, this function may replace that value with a context-specific\n    default, contingent on `type(obj)`:\n\n      * If `obj` is a module, globalns defaults to `obj.__dict__`.\n      * If `obj` is a class, globalns defaults to\n        `sys.modules[obj.__module__].__dict__` and `localns`\n        defaults to the obj class namespace.\n      * If `obj` is a callable, `globalns` defaults to `obj.__globals__`,\n        although if obj is a wrapped function (using\n        functools.update_wrapper()) it is first unwrapped.\n      * If `obj` is an instance, `globalns` defaults to\n        `sys.modules[obj.__module__].__dict__` and localns\n        defaults to the obj class namespace.\n    \"\"\"\n    if isinstance(obj, type):\n        # class\n        annos = getattr(obj, \"__annotations__\", None)\n        obj_globalns = None\n        module_name = getattr(obj, \"__module__\", None)\n        if module_name:\n            module = sys.modules.get(module_name, None)\n            if module:\n                obj_globalns = getattr(module, \"__dict__\", None)\n        obj_localns = dict(vars(obj))\n        unwrap = obj\n    elif isinstance(obj, ModuleType):\n        # module\n        annos = getattr(obj, \"__annotations__\", None)\n        obj_globalns = getattr(obj, \"__dict__\")\n        obj_localns = None\n        unwrap = None\n    elif callable(obj):\n        # this includes types.Function, types.BuiltinFunctionType,\n        # types.BuiltinMethodType, functools.partial, functools.singledispatch,\n        # \"class funclike\" from Lib/test/test_inspect... on and on it goes.\n        annos = getattr(obj, \"__annotations__\", None)\n        obj_globalns = getattr(obj, \"__globals__\", None)\n        obj_localns = None\n        unwrap = obj\n    else:\n        # obj\n        annos = getattr(type(obj), \"__annotations__\", None)\n        obj_globalns = None\n        module_name = getattr(obj, \"__module__\", None)\n        if module_name:\n            module = sys.modules.get(module_name, None)\n            if module:\n                obj_globalns = getattr(module, \"__dict__\", None)\n        obj_localns = dict(vars(obj))\n        unwrap = obj\n\n    if annos is None or not annos:\n        return {}\n\n    if not isinstance(annos, dict):\n        raise ValueError(f\"{obj!r}.__annotations__ is neither a dict nor None\")\n\n    if unwrap is not None:\n        while True:\n            if hasattr(unwrap, \"__wrapped__\"):\n                unwrap = unwrap.__wrapped__\n                continue\n            if isinstance(unwrap, partial):\n                unwrap = unwrap.func\n                continue\n            break\n        if hasattr(unwrap, \"__globals__\"):\n            obj_globalns = unwrap.__globals__\n\n    # globalns = GLOBAL_NS | globalns if globalns is not None else obj_globalns\n    if globalns is None:\n        globalns = obj_globalns\n    globalns = {**GLOBAL_NS, **globalns}\n    if localns is None:\n        localns = obj_localns\n\n    ret = {}\n    for key, value in annos.items():\n        if eval_str and isinstance(value, str):\n            try:\n                value = eval(value, globalns, localns)  # pylint: disable=W0123\n            except NameError:\n                raise ValueError(\n                    f\"Type annotation '{key}: {value}' in {obj!r} is invalid.\\n\"\n                    \"If you are running on an earlier version of Python, \"\n                    \"please ensure annotations does not contain forward references.\"\n                ) from None\n            except TypeError:\n                raise ValueError(\n                    f\"Type annotation '{key}: {value}' in {obj!r} is invalid.\\n\"\n                    \"If you are running on an earlier version of Python, \"\n                    \"please ensure you are not using future features such as PEP604.\"\n                ) from None\n        ret[key] = value\n    return ret\n</code></pre>"},{"location":"utils/#chanfig.utils.honor_annotation","title":"honor_annotation","text":"Python<pre><code>honor_annotation(data: Any, annotation: type) -&gt; Any\n</code></pre> <p>Attempt to convert data to match the expected type annotation.</p> <p>This function tries to honor the type annotation by converting the data when possible, rather than rejecting it. It works with: - Basic types (int, str, etc.) - Container types (List, Dict, etc.) - Union types (including Optional) - Nested generic types</p> <p>Unlike <code>conform_annotation</code> which validates type compatibility, this function tries to adapt the data to match the annotation.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; honor_annotation(\"42\", int)\n42\n&gt;&gt;&gt; honor_annotation(42, str)\n'42'\n&gt;&gt;&gt; honor_annotation(\"name\", Union[int, str])\n'name'\n&gt;&gt;&gt; honor_annotation(123, Union[int, str])\n123\n</code></pre> Source code in <code>chanfig/utils/annotation.py</code> Python<pre><code>def honor_annotation(data: Any, annotation: type) -&gt; Any:\n    r\"\"\"\n    Attempt to convert data to match the expected type annotation.\n\n    This function tries to honor the type annotation by converting the data\n    when possible, rather than rejecting it. It works with:\n    - Basic types (int, str, etc.)\n    - Container types (List, Dict, etc.)\n    - Union types (including Optional)\n    - Nested generic types\n\n    Unlike `conform_annotation` which validates type compatibility,\n    this function tries to adapt the data to match the annotation.\n\n    Examples:\n        &gt;&gt;&gt; honor_annotation(\"42\", int)\n        42\n        &gt;&gt;&gt; honor_annotation(42, str)\n        '42'\n        &gt;&gt;&gt; honor_annotation(\"name\", Union[int, str])\n        'name'\n        &gt;&gt;&gt; honor_annotation(123, Union[int, str])\n        123\n    \"\"\"\n    if data is None or annotation is Any:\n        return data\n    origin_type = get_origin(annotation)\n    arg_types = get_args(annotation)\n    with suppress(Exception):\n        if origin_type is Union or origin_type is UnionType:\n            if any(conform_annotation(data, t) for t in arg_types):\n                return data\n            for t in arg_types:\n                if t is not type(None):\n                    with suppress(ValueError, TypeError):\n                        return t(data)\n            return data\n        if origin_type is not None and arg_types:\n            if issubclass(origin_type, tuple) and len(arg_types) == len(data):\n                return origin_type(honor_annotation(item, arg) for item, arg in zip(data, arg_types))\n            if isinstance(data, origin_type):\n                if not data:\n                    return data\n                if origin_type is tuple and len(arg_types) &gt; 1 and arg_types[-1] is not Ellipsis:\n                    if len(data) == len(arg_types):\n                        return tuple(honor_annotation(item, arg) for item, arg in zip(data, arg_types))\n                    return data\n                if issubclass(origin_type, Sequence) and not isinstance(data, str):\n                    item_type = arg_types[0]\n                    item_origin = get_origin(item_type)\n                    item_args = get_args(item_type)\n                    if item_origin is not None and item_args:\n                        return origin_type([honor_annotation(item, item_type) for item in data])\n                    return origin_type(honor_annotation(item, item_type) for item in data)\n                if issubclass(origin_type, Mapping):\n                    key_type, value_type = arg_types[:2]\n                    return origin_type(\n                        {honor_annotation(k, key_type): honor_annotation(v, value_type) for k, v in data.items()}\n                    )\n                if issubclass(origin_type, (set, frozenset)):\n                    item_type = arg_types[0]\n                    return origin_type(honor_annotation(item, item_type) for item in data)\n            else:\n                with suppress(ValueError, TypeError):\n                    return origin_type(data)\n            return data\n        if isinstance(annotation, type) and not isinstance(data, annotation):\n            with suppress(ValueError, TypeError):\n                return annotation(data)\n            return data\n    return data\n</code></pre>"},{"location":"utils/#chanfig.utils.apply","title":"apply","text":"Python<pre><code>apply(obj: Any, func: Callable, *args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Apply <code>func</code> to all children of <code>obj</code>.</p> <p>Note that this method is meant for non-in-place modification of <code>obj</code> and should return the original object.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>Object to apply function.</p> required <code>Callable</code> <p>Function to be applied.</p> required <code>Any</code> <p>Positional arguments to be passed to <code>func</code>.</p> <code>()</code> <code>Any</code> <p>Keyword arguments to be passed to <code>func</code>.</p> <code>{}</code> See Also <p>[<code>apply_</code>][chanfig.utils.apply.apply_]: Apply an in-place operation.</p> Source code in <code>chanfig/utils/functional.py</code> Python<pre><code>def apply(obj: Any, func: Callable, *args: Any, **kwargs: Any) -&gt; Any:\n    r\"\"\"\n    Apply `func` to all children of `obj`.\n\n    Note that this method is meant for non-in-place modification of `obj` and should return the original object.\n\n    Args:\n        obj: Object to apply function.\n        func: Function to be applied.\n        *args: Positional arguments to be passed to `func`.\n        **kwargs: Keyword arguments to be passed to `func`.\n\n    See Also:\n        [`apply_`][chanfig.utils.apply.apply_]: Apply an in-place operation.\n    \"\"\"\n    # Handle circular import\n    from ..nested_dict import NestedDict\n\n    if isinstance(obj, NestedDict):\n        return obj.empty_like(**{k: apply(v, func, *args, **kwargs) for k, v in obj.items()})\n    if isinstance(obj, Mapping):\n        return {k: apply(v, func, *args, **kwargs) for k, v in obj.items()}\n    if isinstance(obj, list):\n        return [apply(v, func, *args, **kwargs) for v in obj]\n    if isinstance(obj, tuple):\n        return tuple(apply(v, func, *args, **kwargs) for v in obj)\n    if isinstance(obj, set):\n        try:\n            return {apply(v, func, *args, **kwargs) for v in obj}\n        except TypeError:\n            return tuple(apply(v, func, *args, **kwargs) for v in obj)\n    return func(*args, **kwargs) if ismethod(func) else func(obj, *args, **kwargs)\n</code></pre>"},{"location":"utils/#chanfig.utils.apply(obj)","title":"<code>obj</code>","text":""},{"location":"utils/#chanfig.utils.apply(func)","title":"<code>func</code>","text":""},{"location":"utils/#chanfig.utils.apply(*args)","title":"<code>*args</code>","text":""},{"location":"utils/#chanfig.utils.apply(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"utils/#chanfig.utils.apply_","title":"apply_","text":"Python<pre><code>apply_(obj: Any, func: Callable, *args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Apply <code>func</code> to all children of <code>obj</code>.</p> <p>Note that this method is meant for in-place modification of <code>obj</code> and should return the modified object.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>Object to apply function.</p> required <code>Callable</code> <p>Function to be applied.</p> required <code>Any</code> <p>Positional arguments to be passed to <code>func</code>.</p> <code>()</code> <code>Any</code> <p>Keyword arguments to be passed to <code>func</code>.</p> <code>{}</code> See Also <p>[<code>apply</code>][chanfig.utils.apply.apply]: Apply a non-in-place operation.</p> Source code in <code>chanfig/utils/functional.py</code> Python<pre><code>def apply_(obj: Any, func: Callable, *args: Any, **kwargs: Any) -&gt; Any:\n    r\"\"\"\n    Apply `func` to all children of `obj`.\n\n    Note that this method is meant for in-place modification of `obj` and should return the modified object.\n\n    Args:\n        obj: Object to apply function.\n        func: Function to be applied.\n        *args: Positional arguments to be passed to `func`.\n        **kwargs: Keyword arguments to be passed to `func`.\n\n    See Also:\n        [`apply`][chanfig.utils.apply.apply]: Apply a non-in-place operation.\n    \"\"\"\n    # pylint: disable=C0103\n\n    if isinstance(obj, Mapping):\n        for v in obj.values():\n            apply_(v, func, *args, **kwargs)\n    if isinstance(obj, (list, tuple, set)):\n        for v in obj:\n            apply_(v, func, *args, **kwargs)\n    return func(*args, **kwargs) if ismethod(func) else func(obj, *args, **kwargs)\n</code></pre>"},{"location":"utils/#chanfig.utils.apply_(obj)","title":"<code>obj</code>","text":""},{"location":"utils/#chanfig.utils.apply_(func)","title":"<code>func</code>","text":""},{"location":"utils/#chanfig.utils.apply_(*args)","title":"<code>*args</code>","text":""},{"location":"utils/#chanfig.utils.apply_(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"utils/#chanfig.utils.parse_bool","title":"parse_bool","text":"Python<pre><code>parse_bool(value: bool | str | int) -&gt; bool\n</code></pre> <p>Convert various types of values to boolean.</p> <p>This function converts different input types (bool, str, int) to their boolean equivalent.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; parse_bool(True)\nTrue\n&gt;&gt;&gt; parse_bool(\"yes\")\nTrue\n&gt;&gt;&gt; parse_bool(1)\nTrue\n&gt;&gt;&gt; parse_bool(0)\nFalse\n&gt;&gt;&gt; parse_bool(\"false\")\nFalse\n</code></pre> Source code in <code>chanfig/utils/functional.py</code> Python<pre><code>def parse_bool(value: bool | str | int) -&gt; bool:\n    r\"\"\"\n    Convert various types of values to boolean.\n\n    This function converts different input types (bool, str, int) to their boolean equivalent.\n\n    Examples:\n        &gt;&gt;&gt; parse_bool(True)\n        True\n        &gt;&gt;&gt; parse_bool(\"yes\")\n        True\n        &gt;&gt;&gt; parse_bool(1)\n        True\n        &gt;&gt;&gt; parse_bool(0)\n        False\n        &gt;&gt;&gt; parse_bool(\"false\")\n        False\n    \"\"\"\n    if isinstance(value, bool):\n        return value\n    if isinstance(value, int):\n        if value == 1:\n            return True\n        if value == 0:\n            return False\n        raise ValueError(f\"Only 0 or 1 is allowed for boolean value, but got {value}.\")\n    if isinstance(value, str):\n        if value.lower() in (\"yes\", \"true\", \"t\", \"y\", \"1\"):\n            return True\n        if value.lower() in (\"no\", \"false\", \"f\", \"n\", \"0\"):\n            return False\n    raise ValueError(f\"Boolean value is expected, but got {value}.\")\n</code></pre>"},{"location":"utils/#chanfig.utils.to_chanfig","title":"to_chanfig","text":"Python<pre><code>to_chanfig(obj: Any, cls: type | None = None) -&gt; Any\n</code></pre> <p>Convert arbitrary data structure to CHANfiG objects when possible.</p> <p>This function recursively converts mappings to FlatDict instances and handles nested structures of arbitrary depth.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>Object to be converted.</p> required <code>type | None</code> <p>Class to use for creating FlatDict instances. Defaults to <code>FlatDict</code>.</p> <code>None</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; to_chanfig({'a': 1, 'b': 2})\nFlatDict(\n  ('a'): 1\n  ('b'): 2\n)\n&gt;&gt;&gt; to_chanfig([1, 2, 3])\n[1, 2, 3]\n&gt;&gt;&gt; to_chanfig([{'a': 1}, {'b': 2}])\n[FlatDict(('a'): 1), FlatDict(('b'): 2)]\n&gt;&gt;&gt; to_chanfig([[1, 2], [3, 4]])\nFlatDict(\n  (1): 2\n  (3): 4\n)\n&gt;&gt;&gt; to_chanfig([[1, 2, 3], [4, 5, 6]])\n[[1, 2, 3], [4, 5, 6]]\n</code></pre> Source code in <code>chanfig/utils/functional.py</code> Python<pre><code>def to_chanfig(obj: Any, cls: type | None = None) -&gt; Any:\n    r\"\"\"\n    Convert arbitrary data structure to CHANfiG objects when possible.\n\n    This function recursively converts mappings to FlatDict instances\n    and handles nested structures of arbitrary depth.\n\n    Args:\n        obj: Object to be converted.\n        cls: Class to use for creating FlatDict instances. Defaults to `FlatDict`.\n\n    Examples:\n        &gt;&gt;&gt; to_chanfig({'a': 1, 'b': 2})\n        FlatDict(\n          ('a'): 1\n          ('b'): 2\n        )\n        &gt;&gt;&gt; to_chanfig([1, 2, 3])\n        [1, 2, 3]\n        &gt;&gt;&gt; to_chanfig([{'a': 1}, {'b': 2}])\n        [FlatDict(('a'): 1), FlatDict(('b'): 2)]\n        &gt;&gt;&gt; to_chanfig([[1, 2], [3, 4]])\n        FlatDict(\n          (1): 2\n          (3): 4\n        )\n        &gt;&gt;&gt; to_chanfig([[1, 2, 3], [4, 5, 6]])\n        [[1, 2, 3], [4, 5, 6]]\n    \"\"\"\n    # Handle circular import\n    from ..flat_dict import FlatDict\n\n    if cls is None:\n        cls = FlatDict\n\n    if isinstance(obj, Mapping):\n        result = cls()\n        for k, v in obj.items():\n            result[k] = to_chanfig(v, cls)\n        return result\n    if isinstance(obj, (list, tuple)) and all(isinstance(item, (list, tuple)) and len(item) == 2 for item in obj):\n        try:\n            result = cls()\n            for k, v in obj:\n                result[k] = to_chanfig(v, cls)\n            return result\n        except (ValueError, TypeError):\n            pass\n    if isinstance(obj, (list, tuple)):\n        return type(obj)(to_chanfig(item, cls) for item in obj)\n    if isinstance(obj, set):\n        try:\n            return {to_chanfig(item, cls) for item in obj}\n        except TypeError:\n            return tuple(to_chanfig(item, cls) for item in obj)\n    return obj\n</code></pre>"},{"location":"utils/#chanfig.utils.to_chanfig(obj)","title":"<code>obj</code>","text":""},{"location":"utils/#chanfig.utils.to_chanfig(cls)","title":"<code>cls</code>","text":""},{"location":"utils/#chanfig.utils.to_dict","title":"to_dict","text":"Python<pre><code>to_dict(obj: Any, flatten: bool = False) -&gt; Mapping | Sequence | Set\n</code></pre> <p>Convert an object to a dict.</p> <p>Note that when converting a <code>set</code> object, it may be converted to a <code>tuple</code> object if its values is not hashable.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>Object to be converted.</p> required <code>bool</code> <p>Whether to flatten nested structures.</p> <code>False</code> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from chanfig import FlatDict, Variable\n</code></pre> Python Console Session<pre><code>&gt;&gt;&gt; to_dict(1)\n1\n&gt;&gt;&gt; to_dict([1, 2, 3])\n[1, 2, 3]\n&gt;&gt;&gt; to_dict((1, 2, 3))\n(1, 2, 3)\n&gt;&gt;&gt; to_dict({1, 2, 3})\n{1, 2, 3}\n&gt;&gt;&gt; to_dict({'a': 1, 'b': 2})\n{'a': 1, 'b': 2}\n&gt;&gt;&gt; to_dict(Variable(1))\n1\n&gt;&gt;&gt; to_dict(FlatDict(a=[[[[[FlatDict(b=1)]]]]]))\n{'a': [[[[[{'b': 1}]]]]]}\n&gt;&gt;&gt; to_dict(FlatDict(a={FlatDict(b=1)}))\n{'a': ({'b': 1},)}\n</code></pre> Source code in <code>chanfig/utils/functional.py</code> Python<pre><code>def to_dict(obj: Any, flatten: bool = False) -&gt; Mapping | Sequence | Set:\n    r\"\"\"\n    Convert an object to a dict.\n\n    Note that when converting a `set` object, it may be converted to a `tuple` object if its values is not hashable.\n\n    Args:\n        obj: Object to be converted.\n        flatten: Whether to flatten nested structures.\n\n    Examples:\n        &gt;&gt;&gt; from chanfig import FlatDict, Variable\n\n        &gt;&gt;&gt; to_dict(1)\n        1\n        &gt;&gt;&gt; to_dict([1, 2, 3])\n        [1, 2, 3]\n        &gt;&gt;&gt; to_dict((1, 2, 3))\n        (1, 2, 3)\n        &gt;&gt;&gt; to_dict({1, 2, 3})\n        {1, 2, 3}\n        &gt;&gt;&gt; to_dict({'a': 1, 'b': 2})\n        {'a': 1, 'b': 2}\n        &gt;&gt;&gt; to_dict(Variable(1))\n        1\n        &gt;&gt;&gt; to_dict(FlatDict(a=[[[[[FlatDict(b=1)]]]]]))\n        {'a': [[[[[{'b': 1}]]]]]}\n        &gt;&gt;&gt; to_dict(FlatDict(a={FlatDict(b=1)}))\n        {'a': ({'b': 1},)}\n    \"\"\"\n    # Handle circular import\n    from ..flat_dict import FlatDict\n    from ..variable import Variable\n\n    if flatten and isinstance(obj, FlatDict):\n        return {k: to_dict(v) for k, v in obj.all_items()}\n    if isinstance(obj, Mapping):\n        return {k: to_dict(v) for k, v in obj.items()}\n    if isinstance(obj, list):\n        return [to_dict(v) for v in obj]\n    if isinstance(obj, tuple):\n        return tuple(to_dict(v) for v in obj)\n    if isinstance(obj, set):\n        try:\n            return {to_dict(v) for v in obj}\n        except TypeError:\n            return tuple(to_dict(v) for v in obj)\n    if isinstance(obj, Variable):\n        return obj.value\n    if is_dataclass(obj):\n        return asdict(obj)  # type: ignore[arg-type]\n    if hasattr(obj, \"to_dict\"):\n        return obj.to_dict()\n    return obj\n</code></pre>"},{"location":"utils/#chanfig.utils.to_dict(obj)","title":"<code>obj</code>","text":""},{"location":"utils/#chanfig.utils.to_dict(flatten)","title":"<code>flatten</code>","text":""},{"location":"utils/#chanfig.utils.load","title":"load","text":"Python<pre><code>load(file: PathStr, cls=None, *args: Any, **kwargs: Any) -&gt; Any\n</code></pre> <p>Load a file into a <code>FlatDict</code>.</p> <p>This function simply calls <code>cls.load</code>, by default, <code>cls</code> is <code>NestedDict</code>.</p> <p>Parameters:</p> Name Type Description Default <code>PathStr</code> <p>The file to load.</p> required <p>The class of the file to load. Defaults to <code>NestedDict</code>.</p> <code>None</code> <code>Any</code> <p>The arguments to pass to <code>NestedDict.load</code>.</p> <code>()</code> <code>Any</code> <p>The keyword arguments to pass to <code>NestedDict.load</code>.</p> <code>{}</code> See Also <p><code>load</code></p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from chanfig import load\n&gt;&gt;&gt; config = load(\"tests/test.yaml\")\n&gt;&gt;&gt; config\nNestedDict(\n  ('a'): 1\n  ('b'): 2\n  ('c'): 3\n)\n</code></pre> Source code in <code>chanfig/utils/io.py</code> Python<pre><code>def load(file: PathStr, cls=None, *args: Any, **kwargs: Any) -&gt; Any:  # pylint: disable=W1113\n    r\"\"\"\n    Load a file into a `FlatDict`.\n\n    This function simply calls `cls.load`, by default, `cls` is `NestedDict`.\n\n    Args:\n        file: The file to load.\n        cls: The class of the file to load. Defaults to `NestedDict`.\n        *args: The arguments to pass to `NestedDict.load`.\n        **kwargs: The keyword arguments to pass to `NestedDict.load`.\n\n    See Also:\n        [`load`][chanfig.FlatDict.load]\n\n    Examples:\n        &gt;&gt;&gt; from chanfig import load\n        &gt;&gt;&gt; config = load(\"tests/test.yaml\")\n        &gt;&gt;&gt; config\n        NestedDict(\n          ('a'): 1\n          ('b'): 2\n          ('c'): 3\n        )\n    \"\"\"\n    # Import here to avoid circular imports\n    from ..nested_dict import NestedDict\n\n    if cls is None:\n        cls = NestedDict\n\n    return cls.load(file, *args, **kwargs)\n</code></pre>"},{"location":"utils/#chanfig.utils.load(file)","title":"<code>file</code>","text":""},{"location":"utils/#chanfig.utils.load(cls)","title":"<code>cls</code>","text":""},{"location":"utils/#chanfig.utils.load(*args)","title":"<code>*args</code>","text":""},{"location":"utils/#chanfig.utils.load(**kwargs)","title":"<code>**kwargs</code>","text":""},{"location":"utils/#chanfig.utils.save","title":"save","text":"Python<pre><code>save(obj, file: File, method: str = None, *args: Any, **kwargs: Any) -&gt; None\n</code></pre> <p>Save <code>FlatDict</code> to file.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If save to <code>IO</code> and <code>method</code> is not specified.</p> <code>TypeError</code> <p>If save to unsupported extension.</p> <p>Alias:</p> <ul> <li><code>save</code></li> </ul> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; obj = {\"a\": 1, \"b\": 2, \"c\": 3}\n&gt;&gt;&gt; save(obj, \"test.yaml\")\n&gt;&gt;&gt; save(obj, \"test.json\")\n&gt;&gt;&gt; save(obj, \"test.conf\")\nTraceback (most recent call last):\nTypeError: `file='test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n&gt;&gt;&gt; with open(\"test.yaml\", \"w\") as f:\n...     save(obj, f)\nTraceback (most recent call last):\nValueError: `method` must be specified when saving to IO.\n</code></pre> Source code in <code>chanfig/utils/io.py</code> Python<pre><code>def save(  # pylint: disable=W1113\n    obj, file: File, method: str = None, *args: Any, **kwargs: Any  # type: ignore[assignment]\n) -&gt; None:\n    r\"\"\"\n    Save `FlatDict` to file.\n\n    Raises:\n        ValueError: If save to `IO` and `method` is not specified.\n        TypeError: If save to unsupported extension.\n\n    **Alias**:\n\n    + `save`\n\n    Examples:\n        &gt;&gt;&gt; obj = {\"a\": 1, \"b\": 2, \"c\": 3}\n        &gt;&gt;&gt; save(obj, \"test.yaml\")\n        &gt;&gt;&gt; save(obj, \"test.json\")\n        &gt;&gt;&gt; save(obj, \"test.conf\")\n        Traceback (most recent call last):\n        TypeError: `file='test.conf'` should be in ('json',) or ('yml', 'yaml'), but got conf.\n        &gt;&gt;&gt; with open(\"test.yaml\", \"w\") as f:\n        ...     save(obj, f)\n        Traceback (most recent call last):\n        ValueError: `method` must be specified when saving to IO.\n    \"\"\"\n    # Import FlatDict here to avoid circular imports\n    from ..flat_dict import FlatDict, to_dict\n\n    if isinstance(obj, FlatDict):\n        obj.save(file, method, *args, **kwargs)\n        return\n\n    data = to_dict(obj)\n    if method is None:\n        if isinstance(file, IOBase):\n            raise ValueError(\"`method` must be specified when saving to IO.\")\n        method = splitext(file)[-1][1:]\n    extension = method.lower()\n    if extension in YAML_EXTENSIONS:\n        with FlatDict.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n            yaml_dump(data, fp, *args, **kwargs)\n        return\n    if extension in JSON_EXTENSIONS:\n        with FlatDict.open(file, mode=\"w\") as fp:  # pylint: disable=C0103\n            fp.write(json_dumps(data, *args, **kwargs))\n        return\n    raise TypeError(f\"`file={file!r}` should be in {JSON_EXTENSIONS} or {YAML_EXTENSIONS}, but got {extension}.\")\n</code></pre>"},{"location":"utils/#chanfig.utils.find_circular_reference","title":"find_circular_reference","text":"Python<pre><code>find_circular_reference(graph: Mapping) -&gt; list[str] | None\n</code></pre> <p>Find circular references in a dependency graph.</p> <p>This function performs a depth-first search to detect any circular references in a graph represented as a mapping of nodes to their dependencies.</p> Source code in <code>chanfig/utils/placeholder.py</code> Python<pre><code>def find_circular_reference(graph: Mapping) -&gt; list[str] | None:\n    r\"\"\"\n    Find circular references in a dependency graph.\n\n    This function performs a depth-first search to detect any circular references\n    in a graph represented as a mapping of nodes to their dependencies.\n    \"\"\"\n\n    def dfs(node, visited, path):  # pylint: disable=R1710\n        path.append(node)\n        if node in visited:\n            return path\n        visited.add(node)\n        for child in graph.get(node, []):\n            result = dfs(child, visited, path)\n            if result is not None:\n                return result\n        visited.remove(node)\n\n    for key in graph:\n        result = dfs(key, set(), [])\n        if result is not None:\n            return result\n\n    return None\n</code></pre>"},{"location":"utils/#chanfig.utils.find_placeholders","title":"find_placeholders","text":"Python<pre><code>find_placeholders(text: str) -&gt; list[str]\n</code></pre> <p>Find all placeholders in text, including nested ones.</p> <p>This function searches for placeholders in the format ${name} and returns a list of all placeholder names found, including those that are nested within other placeholders.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; find_placeholders(\"Hello ${name}\")\n['name']\n&gt;&gt;&gt; find_placeholders(\"Hello ${user.${type}}\")\n['user.${type}', 'type']\n&gt;&gt;&gt; find_placeholders(\"${outer${inner}}\")\n['outer${inner}', 'inner']\n</code></pre> Source code in <code>chanfig/utils/placeholder.py</code> Python<pre><code>def find_placeholders(text: str) -&gt; list[str]:\n    r\"\"\"Find all placeholders in text, including nested ones.\n\n    This function searches for placeholders in the format ${name} and returns a list\n    of all placeholder names found, including those that are nested within other placeholders.\n\n    Examples:\n        &gt;&gt;&gt; find_placeholders(\"Hello ${name}\")\n        ['name']\n        &gt;&gt;&gt; find_placeholders(\"Hello ${user.${type}}\")\n        ['user.${type}', 'type']\n        &gt;&gt;&gt; find_placeholders(\"${outer${inner}}\")\n        ['outer${inner}', 'inner']\n    \"\"\"\n    if not isinstance(text, str):\n        return []\n\n    results = []\n    stack = []\n    i = 0\n\n    while i &lt; len(text):\n        if text[i : i + 2] == \"${\":  # noqa: E203\n            stack.append(i)\n            i += 2\n        elif text[i] == \"}\" and stack:\n            start = stack.pop()\n            placeholder = text[start + 2 : i]  # noqa: E203\n            if not stack:\n                results.append(placeholder)\n            i += 1\n        else:\n            i += 1\n\n    nested_results = []\n    for placeholder in results:\n        nested_results.extend(find_placeholders(placeholder))\n\n    return results + nested_results\n</code></pre>"},{"location":"variable/","title":"Variable","text":""},{"location":"variable/#chanfig.Variable","title":"chanfig.Variable","text":"<p>               Bases: <code>Generic[V]</code></p> <p>Mutable wrapper for immutable objects.</p> <p>Parameters:</p> Name Type Description Default <code>Any</code> <p>The value to wrap.</p> <code>Null</code> <code>type | None</code> <p>Desired type of the value.</p> <code>None</code> <code>list | None</code> <p>Possible values of the value.</p> <code>None</code> <code>Callable | None</code> <p><code>Callable</code> that validates the value.</p> <code>None</code> <code>bool</code> <p>Whether the value is required.</p> <code>False</code> <code>str | None</code> <p>Help message of the value.</p> <code>None</code> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If <code>required</code> is <code>True</code> and <code>value</code> is <code>Null</code>.</p> <code>TypeError</code> <p>If <code>type</code> is specified and <code>value</code> is not an instance of <code>type</code>.</p> <code>ValueError</code> <p>| If <code>choices</code> is specified and <code>value</code> is not in <code>choices</code>. If <code>validator</code> is specified and <code>validator</code> returns <code>False</code>.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>Any</code> <p>The wrapped value.</p> <code>dtype</code> <code>type</code> <p>The type of the wrapped value.</p> Notes <p><code>Variable</code> by default wrap the instance type to type of the wrapped object. Therefore, <code>isinstance(Variable(1), int)</code> will return <code>True</code>.</p> <p>To temporarily disable this behaviour, you can call context manager <code>with Variable.unwrapped()</code>.</p> <p>To permanently disable this behaviour, you can call <code>Variable.unwrap()</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; v = Variable(1)\n&gt;&gt;&gt; n = v\n&gt;&gt;&gt; v, n\n(1, 1)\n&gt;&gt;&gt; v += 1\n&gt;&gt;&gt; v, n\n(2, 2)\n&gt;&gt;&gt; v.value = 3\n&gt;&gt;&gt; v, n\n(3, 3)\n&gt;&gt;&gt; n.set(4)\n&gt;&gt;&gt; v, n\n(4, 4)\n&gt;&gt;&gt; n = 5\n&gt;&gt;&gt; v, n\n(4, 5)\n&gt;&gt;&gt; f'{v} &lt; {n}'\n'4 &lt; 5'\n&gt;&gt;&gt; isinstance(v, int)\nTrue\n&gt;&gt;&gt; type(v)\n&lt;class 'chanfig.variable.Variable'&gt;\n&gt;&gt;&gt; v.dtype\n&lt;class 'int'&gt;\n&gt;&gt;&gt; with v.unwrapped():\n...    isinstance(v, int)\nFalse\n&gt;&gt;&gt; v = Variable('hello')\n&gt;&gt;&gt; f'{v}, world!'\n'hello, world!'\n&gt;&gt;&gt; v += ', world!'\n&gt;&gt;&gt; v\n'hello, world!'\n&gt;&gt;&gt; \"hello\" in v\nTrue\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>class Variable(Generic[V]):  # pylint: disable=R0902\n    r\"\"\"\n    Mutable wrapper for immutable objects.\n\n    Args:\n        value: The value to wrap.\n        type: Desired type of the value.\n        choices: Possible values of the value.\n        validator: `Callable` that validates the value.\n        required: Whether the value is required.\n        help: Help message of the value.\n\n    Raises:\n        RuntimeError: If `required` is `True` and `value` is `Null`.\n        TypeError: If `type` is specified and `value` is not an instance of `type`.\n        ValueError: |\n            If `choices` is specified and `value` is not in `choices`.\n            If `validator` is specified and `validator` returns `False`.\n\n    Attributes:\n        value: The wrapped value.\n        dtype: The type of the wrapped value.\n\n    Notes:\n        `Variable` by default wrap the instance type to type of the wrapped object.\n        Therefore, `isinstance(Variable(1), int)` will return `True`.\n\n        To temporarily disable this behaviour, you can call context manager `with Variable.unwrapped()`.\n\n        To permanently disable this behaviour, you can call `Variable.unwrap()`.\n\n    Examples:\n        &gt;&gt;&gt; v = Variable(1)\n        &gt;&gt;&gt; n = v\n        &gt;&gt;&gt; v, n\n        (1, 1)\n        &gt;&gt;&gt; v += 1\n        &gt;&gt;&gt; v, n\n        (2, 2)\n        &gt;&gt;&gt; v.value = 3\n        &gt;&gt;&gt; v, n\n        (3, 3)\n        &gt;&gt;&gt; n.set(4)\n        &gt;&gt;&gt; v, n\n        (4, 4)\n        &gt;&gt;&gt; n = 5\n        &gt;&gt;&gt; v, n\n        (4, 5)\n        &gt;&gt;&gt; f'{v} &lt; {n}'\n        '4 &lt; 5'\n        &gt;&gt;&gt; isinstance(v, int)\n        True\n        &gt;&gt;&gt; type(v)\n        &lt;class 'chanfig.variable.Variable'&gt;\n        &gt;&gt;&gt; v.dtype\n        &lt;class 'int'&gt;\n        &gt;&gt;&gt; with v.unwrapped():\n        ...    isinstance(v, int)\n        False\n        &gt;&gt;&gt; v = Variable('hello')\n        &gt;&gt;&gt; f'{v}, world!'\n        'hello, world!'\n        &gt;&gt;&gt; v += ', world!'\n        &gt;&gt;&gt; v\n        'hello, world!'\n        &gt;&gt;&gt; \"hello\" in v\n        True\n    \"\"\"\n\n    wrap_type: bool = True\n    _storage: List[Any]\n    _type: Optional[type] = None\n    _choices: Optional[list] = None\n    _validator: Optional[Callable] = None\n    _required: bool = False\n    _help: Optional[str] = None\n\n    def __init__(  # pylint: disable=R0913\n        self,\n        value: Any = Null,\n        type: type | None = None,  # pylint: disable=W0622\n        choices: list | None = None,\n        validator: Callable | None = None,\n        required: bool = False,\n        help: str | None = None,  # pylint: disable=W0622\n    ) -&gt; None:\n        self._storage = [value]\n        self._type = type\n        self._choices = choices\n        self._validator = validator\n        self._required = required\n        self._help = help\n\n    @property  # type: ignore[misc]\n    def __class__(self) -&gt; type:\n        return self.value.__class__ if self.wrap_type else type(self)\n\n    @property\n    def value(self) -&gt; Any:\n        r\"\"\"\n        Fetch the object wrapped in `Variable`.\n        \"\"\"\n\n        return self._storage[0]\n\n    @value.setter\n    def value(self, value) -&gt; None:\n        r\"\"\"\n        Assign value to the object wrapped in `Variable`.\n        \"\"\"\n\n        self.validate(value)\n        self._storage[0] = self._get_value(value)\n\n    @property\n    def dtype(self) -&gt; type:\n        r\"\"\"\n        Data type of the object wrapped in `Variable`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; type(id)\n            &lt;class 'chanfig.variable.Variable'&gt;\n            &gt;&gt;&gt; id.dtype\n            &lt;class 'int'&gt;\n            &gt;&gt;&gt; issubclass(id.dtype, int)\n            True\n        \"\"\"\n\n        return self.value.__class__\n\n    @property\n    def storage(self) -&gt; list[Any]:\n        r\"\"\"\n        Storage of `Variable`.\n        \"\"\"\n\n        return self._storage\n\n    @property\n    def type(self) -&gt; type | None:\n        return self._type\n\n    @property\n    def choices(self) -&gt; list | None:\n        return self._choices\n\n    @property\n    def validator(self) -&gt; Callable | None:\n        return self._validator\n\n    @property\n    def required(self) -&gt; bool:\n        return self._required\n\n    @property\n    def help(self) -&gt; str:\n        return self._help or \"\"\n\n    def validate(self, *args) -&gt; None:\n        r\"\"\"\n        Validate if the value is valid.\n        \"\"\"\n\n        if len(args) == 0:\n            value = self.value\n        elif len(args) == 1:\n            value = args[0]\n        else:\n            raise ValueError(\"Too many arguments.\")\n        if self._required and value is Null:\n            raise RuntimeError(\"Value is required.\")\n        if self._type is not None and not isinstance(value, self._type):\n            raise TypeError(f\"Value {value} is not of type {self._type}.\")\n        if self._choices is not None and value not in self._choices:\n            raise ValueError(f\"Value {value} is not in choices {self._choices}.\")\n        if self._validator is not None and not self._validator(value):\n            raise ValueError(f\"Value {value} is not valid.\")\n\n    def get(self) -&gt; Any:\n        r\"\"\"\n        Fetch the object wrapped in `Variable`.\n        \"\"\"\n\n        return self.value\n\n    def set(self, value) -&gt; None:\n        r\"\"\"\n        Assign value to the object wrapped in `Variable`.\n\n        `Variable.set` is extremely useful when you want to change the value without changing the reference.\n\n        In `FlatDict.set`, all assignments of `Variable` calls `Variable.set` Internally.\n        \"\"\"\n\n        self.value = value\n\n    def __get__(self, obj, objtype=None):\n        return self\n\n    def __set__(self, obj, value):\n        self.value = value\n\n    def to(self, cls: Callable) -&gt; Any:  # pylint: disable=C0103\n        r\"\"\"\n        Convert the object wrapped in `Variable` to target `cls`.\n\n        Args:\n            cls: The type to convert to.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; id.to(float)\n            1016.0\n            &gt;&gt;&gt; id.to(str)\n            '1016.0'\n        \"\"\"\n\n        self.value = cls(self.value)\n        return self\n\n    def int(self) -&gt; int:\n        r\"\"\"\n        Convert the object wrapped in `Variable` to python `int`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016.0)\n            &gt;&gt;&gt; id.int()\n            1016\n        \"\"\"\n\n        return self.to(int)\n\n    def float(self) -&gt; float:\n        r\"\"\"\n        Convert the object wrapped in `Variable` to python `float`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; id.float()\n            1016.0\n        \"\"\"\n\n        return self.to(float)\n\n    def str(self) -&gt; str:\n        r\"\"\"\n        Convert the object wrapped in `Variable` to python `float`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; id.str()\n            '1016'\n        \"\"\"\n\n        return self.to(str)\n\n    def wrap(self) -&gt; None:\n        r\"\"\"\n        Wrap the type of `Variable`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; id.unwrap()\n            &gt;&gt;&gt; isinstance(id, int)\n            False\n            &gt;&gt;&gt; id.wrap()\n            &gt;&gt;&gt; isinstance(id, int)\n            True\n        \"\"\"\n\n        self.wrap_type = True\n\n    def unwrap(self) -&gt; None:\n        r\"\"\"\n        Unwrap the type of `Variable`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; id.unwrap()\n            &gt;&gt;&gt; isinstance(id, int)\n            False\n        \"\"\"\n\n        self.wrap_type = False\n\n    @contextmanager\n    def unwrapped(self):\n        r\"\"\"\n        Context manager which temporarily unwrap the `Variable`.\n\n        Examples:\n            &gt;&gt;&gt; id = Variable(1016)\n            &gt;&gt;&gt; isinstance(id, int)\n            True\n            &gt;&gt;&gt; with id.unwrapped():\n            ...    isinstance(id, int)\n            False\n        \"\"\"\n\n        wrap_type = self.wrap_type\n        self.wrap_type = False\n        try:\n            yield self\n        finally:\n            self.wrap_type = wrap_type\n\n    @staticmethod\n    def _get_value(obj) -&gt; Any:\n        if isinstance(obj, Variable):\n            return obj.value\n        return obj\n\n    def __getattr__(self, attr) -&gt; Any:\n        return getattr(self.value, attr)\n\n    def __lt__(self, other) -&gt; bool:\n        return self.value &lt; self._get_value(other)\n\n    def __le__(self, other) -&gt; bool:\n        return self.value &lt;= self._get_value(other)\n\n    def __eq__(self, other) -&gt; bool:\n        return self.value == self._get_value(other)\n\n    def __ne__(self, other) -&gt; bool:\n        return self.value != self._get_value(other)\n\n    def __ge__(self, other) -&gt; bool:\n        return self.value &gt;= self._get_value(other)\n\n    def __gt__(self, other) -&gt; bool:\n        return self.value &gt; self._get_value(other)\n\n    # def __index__(self):\n    #     return self.value.__index__()\n\n    def __invert__(self):\n        return ~self.value\n\n    def __abs__(self):\n        return abs(self.value)\n\n    def __add__(self, other):\n        return Variable(self.value + self._get_value(other))\n\n    def __radd__(self, other):\n        return Variable(self._get_value(other) + self.value)\n\n    def __iadd__(self, other):\n        self.value += self._get_value(other)\n        return self\n\n    def __and__(self, other):\n        return Variable(self.value &amp; self._get_value(other))\n\n    def __rand__(self, other):\n        return Variable(self._get_value(other) &amp; self.value)\n\n    def __iand__(self, other):\n        self.value &amp;= self._get_value(other)\n        return self\n\n    def __floordiv__(self, other):\n        return Variable(self.value // self._get_value(other))\n\n    def __rfloordiv__(self, other):\n        return Variable(self._get_value(other) // self.value)\n\n    def __ifloordiv__(self, other):\n        self.value //= self._get_value(other)\n        return self\n\n    def __mod__(self, other):\n        return Variable(self.value % self._get_value(other))\n\n    def __rmod__(self, other):\n        return Variable(self._get_value(other) % self.value)\n\n    def __imod__(self, other):\n        self.value %= self._get_value(other)\n        return self\n\n    def __mul__(self, other):\n        return Variable(self.value * self._get_value(other))\n\n    def __rmul__(self, other):\n        return Variable(self._get_value(other) * self.value)\n\n    def __imul__(self, other):\n        self.value *= self._get_value(other)\n        return self\n\n    def __matmul__(self, other):\n        return Variable(self.value @ self._get_value(other))\n\n    def __rmatmul__(self, other):\n        return Variable(self._get_value(other) @ self.value)\n\n    def __imatmul__(self, other):\n        self.value @= self._get_value(other)\n        return self\n\n    def __pow__(self, other):\n        return Variable(self.value ** self._get_value(other))\n\n    def __rpow__(self, other):\n        return Variable(self._get_value(other) ** self.value)\n\n    def __ipow__(self, other):\n        self.value **= self._get_value(other)\n        return self\n\n    def __truediv__(self, other):\n        return Variable(self.value / self._get_value(other))\n\n    def __rtruediv__(self, other):\n        return Variable(self._get_value(other) / self.value)\n\n    def __itruediv__(self, other):\n        self.value /= self._get_value(other)\n        return self\n\n    def __sub__(self, other):\n        return Variable(self.value - self._get_value(other))\n\n    def __rsub__(self, other):\n        return Variable(self._get_value(other) - self.value)\n\n    def __isub__(self, other):\n        self.value -= self._get_value(other)\n        return self\n\n    def __copy__(self):\n        return Variable(self.value)\n\n    def __deepcopy__(self, memo: Mapping | None = None):\n        return Variable(copy(self.value))\n\n    def __format__(self, format_spec):\n        return self.value if isinstance(self, str) else format(self.value, format_spec)\n\n    def __iter__(self):\n        return iter(self.value)\n\n    def __next__(self):\n        return next(self.value)\n\n    def __hash__(self):\n        return hash(self.value)\n\n    def __repr__(self):\n        return repr(self.value)\n\n    def __str__(self):\n        return self.value if isinstance(self, str) else str(self.value)\n\n    def __json__(self):\n        return self.value\n\n    def __contains__(self, name):\n        return name in self.value\n</code></pre>"},{"location":"variable/#chanfig.Variable(value)","title":"<code>value</code>","text":""},{"location":"variable/#chanfig.Variable(type)","title":"<code>type</code>","text":""},{"location":"variable/#chanfig.Variable(choices)","title":"<code>choices</code>","text":""},{"location":"variable/#chanfig.Variable(validator)","title":"<code>validator</code>","text":""},{"location":"variable/#chanfig.Variable(required)","title":"<code>required</code>","text":""},{"location":"variable/#chanfig.Variable(help)","title":"<code>help</code>","text":""},{"location":"variable/#chanfig.Variable.value","title":"value  <code>property</code> <code>writable</code>","text":"Python<pre><code>value: Any\n</code></pre> <p>Fetch the object wrapped in <code>Variable</code>.</p>"},{"location":"variable/#chanfig.Variable.dtype","title":"dtype  <code>property</code>","text":"Python<pre><code>dtype: type\n</code></pre> <p>Data type of the object wrapped in <code>Variable</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; type(id)\n&lt;class 'chanfig.variable.Variable'&gt;\n&gt;&gt;&gt; id.dtype\n&lt;class 'int'&gt;\n&gt;&gt;&gt; issubclass(id.dtype, int)\nTrue\n</code></pre>"},{"location":"variable/#chanfig.Variable.storage","title":"storage  <code>property</code>","text":"Python<pre><code>storage: list[Any]\n</code></pre> <p>Storage of <code>Variable</code>.</p>"},{"location":"variable/#chanfig.Variable.validate","title":"validate","text":"Python<pre><code>validate(*args) -&gt; None\n</code></pre> <p>Validate if the value is valid.</p> Source code in <code>chanfig/variable.py</code> Python<pre><code>def validate(self, *args) -&gt; None:\n    r\"\"\"\n    Validate if the value is valid.\n    \"\"\"\n\n    if len(args) == 0:\n        value = self.value\n    elif len(args) == 1:\n        value = args[0]\n    else:\n        raise ValueError(\"Too many arguments.\")\n    if self._required and value is Null:\n        raise RuntimeError(\"Value is required.\")\n    if self._type is not None and not isinstance(value, self._type):\n        raise TypeError(f\"Value {value} is not of type {self._type}.\")\n    if self._choices is not None and value not in self._choices:\n        raise ValueError(f\"Value {value} is not in choices {self._choices}.\")\n    if self._validator is not None and not self._validator(value):\n        raise ValueError(f\"Value {value} is not valid.\")\n</code></pre>"},{"location":"variable/#chanfig.Variable.get","title":"get","text":"Python<pre><code>get() -&gt; Any\n</code></pre> <p>Fetch the object wrapped in <code>Variable</code>.</p> Source code in <code>chanfig/variable.py</code> Python<pre><code>def get(self) -&gt; Any:\n    r\"\"\"\n    Fetch the object wrapped in `Variable`.\n    \"\"\"\n\n    return self.value\n</code></pre>"},{"location":"variable/#chanfig.Variable.set","title":"set","text":"Python<pre><code>set(value) -&gt; None\n</code></pre> <p>Assign value to the object wrapped in <code>Variable</code>.</p> <p><code>Variable.set</code> is extremely useful when you want to change the value without changing the reference.</p> <p>In <code>FlatDict.set</code>, all assignments of <code>Variable</code> calls <code>Variable.set</code> Internally.</p> Source code in <code>chanfig/variable.py</code> Python<pre><code>def set(self, value) -&gt; None:\n    r\"\"\"\n    Assign value to the object wrapped in `Variable`.\n\n    `Variable.set` is extremely useful when you want to change the value without changing the reference.\n\n    In `FlatDict.set`, all assignments of `Variable` calls `Variable.set` Internally.\n    \"\"\"\n\n    self.value = value\n</code></pre>"},{"location":"variable/#chanfig.Variable.to","title":"to","text":"Python<pre><code>to(cls: Callable) -&gt; Any\n</code></pre> <p>Convert the object wrapped in <code>Variable</code> to target <code>cls</code>.</p> <p>Parameters:</p> Name Type Description Default <code>Callable</code> <p>The type to convert to.</p> required <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; id.to(float)\n1016.0\n&gt;&gt;&gt; id.to(str)\n'1016.0'\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def to(self, cls: Callable) -&gt; Any:  # pylint: disable=C0103\n    r\"\"\"\n    Convert the object wrapped in `Variable` to target `cls`.\n\n    Args:\n        cls: The type to convert to.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; id.to(float)\n        1016.0\n        &gt;&gt;&gt; id.to(str)\n        '1016.0'\n    \"\"\"\n\n    self.value = cls(self.value)\n    return self\n</code></pre>"},{"location":"variable/#chanfig.Variable.to(cls)","title":"<code>cls</code>","text":""},{"location":"variable/#chanfig.Variable.int","title":"int","text":"Python<pre><code>int() -&gt; int\n</code></pre> <p>Convert the object wrapped in <code>Variable</code> to python <code>int</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016.0)\n&gt;&gt;&gt; id.int()\n1016\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def int(self) -&gt; int:\n    r\"\"\"\n    Convert the object wrapped in `Variable` to python `int`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016.0)\n        &gt;&gt;&gt; id.int()\n        1016\n    \"\"\"\n\n    return self.to(int)\n</code></pre>"},{"location":"variable/#chanfig.Variable.float","title":"float","text":"Python<pre><code>float() -&gt; float\n</code></pre> <p>Convert the object wrapped in <code>Variable</code> to python <code>float</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; id.float()\n1016.0\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def float(self) -&gt; float:\n    r\"\"\"\n    Convert the object wrapped in `Variable` to python `float`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; id.float()\n        1016.0\n    \"\"\"\n\n    return self.to(float)\n</code></pre>"},{"location":"variable/#chanfig.Variable.str","title":"str","text":"Python<pre><code>str() -&gt; str\n</code></pre> <p>Convert the object wrapped in <code>Variable</code> to python <code>float</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; id.str()\n'1016'\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def str(self) -&gt; str:\n    r\"\"\"\n    Convert the object wrapped in `Variable` to python `float`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; id.str()\n        '1016'\n    \"\"\"\n\n    return self.to(str)\n</code></pre>"},{"location":"variable/#chanfig.Variable.wrap","title":"wrap","text":"Python<pre><code>wrap() -&gt; None\n</code></pre> <p>Wrap the type of <code>Variable</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; id.unwrap()\n&gt;&gt;&gt; isinstance(id, int)\nFalse\n&gt;&gt;&gt; id.wrap()\n&gt;&gt;&gt; isinstance(id, int)\nTrue\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def wrap(self) -&gt; None:\n    r\"\"\"\n    Wrap the type of `Variable`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; id.unwrap()\n        &gt;&gt;&gt; isinstance(id, int)\n        False\n        &gt;&gt;&gt; id.wrap()\n        &gt;&gt;&gt; isinstance(id, int)\n        True\n    \"\"\"\n\n    self.wrap_type = True\n</code></pre>"},{"location":"variable/#chanfig.Variable.unwrap","title":"unwrap","text":"Python<pre><code>unwrap() -&gt; None\n</code></pre> <p>Unwrap the type of <code>Variable</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; id.unwrap()\n&gt;&gt;&gt; isinstance(id, int)\nFalse\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>def unwrap(self) -&gt; None:\n    r\"\"\"\n    Unwrap the type of `Variable`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; id.unwrap()\n        &gt;&gt;&gt; isinstance(id, int)\n        False\n    \"\"\"\n\n    self.wrap_type = False\n</code></pre>"},{"location":"variable/#chanfig.Variable.unwrapped","title":"unwrapped","text":"Python<pre><code>unwrapped()\n</code></pre> <p>Context manager which temporarily unwrap the <code>Variable</code>.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; id = Variable(1016)\n&gt;&gt;&gt; isinstance(id, int)\nTrue\n&gt;&gt;&gt; with id.unwrapped():\n...    isinstance(id, int)\nFalse\n</code></pre> Source code in <code>chanfig/variable.py</code> Python<pre><code>@contextmanager\ndef unwrapped(self):\n    r\"\"\"\n    Context manager which temporarily unwrap the `Variable`.\n\n    Examples:\n        &gt;&gt;&gt; id = Variable(1016)\n        &gt;&gt;&gt; isinstance(id, int)\n        True\n        &gt;&gt;&gt; with id.unwrapped():\n        ...    isinstance(id, int)\n        False\n    \"\"\"\n\n    wrap_type = self.wrap_type\n    self.wrap_type = False\n    try:\n        yield self\n    finally:\n        self.wrap_type = wrap_type\n</code></pre>"},{"location":"about/","title":"About","text":"<p>Developed by DanLing on Earth</p> <p>We are a community of scientists, researchers, engineers, and others from around the world who are working together to make deep learning more accessible.</p> <p>We are a community of individuals who seek to push the boundaries of what is possible with deep learning.</p> <p>We are passionate about Deep Learning and the people who use it.</p> <p>We are DanLing.</p>"},{"location":"about/license/","title":"GNU AFFERO GENERAL PUBLIC LICENSE","text":"<p>Version 3, 19 November 2007</p> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p>"},{"location":"about/license/#preamble","title":"Preamble","text":"<p>The GNU Affero General Public License is a free, copyleft license for software and other kinds of works, specifically designed to ensure cooperation with the community in the case of network server software.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, our General Public Licenses are intended to guarantee your freedom to share and change all versions of a program\u2013to make sure it remains free software for all its users.</p> <p>When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>Developers that use our General Public Licenses protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License which gives you legal permission to copy, distribute and/or modify the software.</p> <p>A secondary benefit of defending all users\u2019 freedom is that improvements made in alternate versions of the program, if they receive widespread use, become available for other developers to incorporate. Many developers of free software are heartened and encouraged by the resulting cooperation. However, in the case of software used on network servers, this result may fail to come about. The GNU General Public License permits making a modified version and letting the public access it on a server without ever releasing its source code to the public.</p> <p>The GNU Affero General Public License is designed specifically to ensure that, in such cases, the modified source code becomes available to the community. It requires the operator of a network server to provide the source code of the modified version running there to the users of that server. Therefore, public use of a modified version, on a publicly accessible server, gives the public access to the source code of the modified version.</p> <p>An older license, called the Affero General Public License and published by Affero, was designed to accomplish similar goals. This is a different license, not a version of the Affero GPL, but Affero has released a new version of the Affero GPL which permits relicensing under this license.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p>"},{"location":"about/license/#terms-and-conditions","title":"TERMS AND CONDITIONS","text":""},{"location":"about/license/#0-definitions","title":"0. Definitions.","text":"<p>\u201cThis License\u201d refers to version 3 of the GNU Affero General Public License.</p> <p>\u201cCopyright\u201d also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\u201cThe Program\u201d refers to any copyrightable work licensed under this License. Each licensee is addressed as \u201cyou\u201d. \u201cLicensees\u201d and \u201crecipients\u201d may be individuals or organizations.</p> <p>To \u201cmodify\u201d a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \u201cmodified version\u201d of the earlier work or a work \u201cbased on\u201d the earlier work.</p> <p>A \u201ccovered work\u201d means either the unmodified Program or a work based on the Program.</p> <p>To \u201cpropagate\u201d a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \u201cconvey\u201d a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \u201cAppropriate Legal Notices\u201d to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p>"},{"location":"about/license/#1-source-code","title":"1. Source Code.","text":"<p>The \u201csource code\u201d for a work means the preferred form of the work for making modifications to it. \u201cObject code\u201d means any non-source form of a work.</p> <p>A \u201cStandard Interface\u201d means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \u201cSystem Libraries\u201d of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \u201cMajor Component\u201d, in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \u201cCorresponding Source\u201d for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\u2019s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p>"},{"location":"about/license/#2-basic-permissions","title":"2. Basic Permissions.","text":"<p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.</p>"},{"location":"about/license/#3-protecting-users-legal-rights-from-anti-circumvention-law","title":"3. Protecting Users\u2019 Legal Rights From Anti-Circumvention Law.","text":"<p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work\u2019s users, your or third parties\u2019 legal rights to forbid circumvention of technological measures.</p>"},{"location":"about/license/#4-conveying-verbatim-copies","title":"4. Conveying Verbatim Copies.","text":"<p>You may convey verbatim copies of the Program\u2019s source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p>"},{"location":"about/license/#5-conveying-modified-source-versions","title":"5. Conveying Modified Source Versions.","text":"<p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <ul> <li>a) The work must carry prominent notices stating that you modified   it, and giving a relevant date.</li> <li>b) The work must carry prominent notices stating that it is   released under this License and any conditions added under   section 7. This requirement modifies the requirement in section 4   to \u201ckeep intact all notices\u201d.</li> <li>c) You must license the entire work, as a whole, under this   License to anyone who comes into possession of a copy. This   License will therefore apply, along with any applicable section 7   additional terms, to the whole of the work, and all its parts,   regardless of how they are packaged. This License gives no   permission to license the work in any other way, but it does not   invalidate such permission if you have separately received it.</li> <li>d) If the work has interactive user interfaces, each must display   Appropriate Legal Notices; however, if the Program has interactive   interfaces that do not display Appropriate Legal Notices, your   work need not make them do so.</li> </ul> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \u201caggregate\u201d if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\u2019s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p>"},{"location":"about/license/#6-conveying-non-source-forms","title":"6. Conveying Non-Source Forms.","text":"<p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <ul> <li>a) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by the   Corresponding Source fixed on a durable physical medium   customarily used for software interchange.</li> <li>b) Convey the object code in, or embodied in, a physical product   (including a physical distribution medium), accompanied by a   written offer, valid for at least three years and valid for as   long as you offer spare parts or customer support for that product   model, to give anyone who possesses the object code either (1) a   copy of the Corresponding Source for all the software in the   product that is covered by this License, on a durable physical   medium customarily used for software interchange, for a price no   more than your reasonable cost of physically performing this   conveying of source, or (2) access to copy the Corresponding   Source from a network server at no charge.</li> <li>c) Convey individual copies of the object code with a copy of the   written offer to provide the Corresponding Source. This   alternative is allowed only occasionally and noncommercially, and   only if you received the object code with such an offer, in accord   with subsection 6b.</li> <li>d) Convey the object code by offering access from a designated   place (gratis or for a charge), and offer equivalent access to the   Corresponding Source in the same way through the same place at no   further charge. You need not require recipients to copy the   Corresponding Source along with the object code. If the place to   copy the object code is a network server, the Corresponding Source   may be on a different server (operated by you or a third party)   that supports equivalent copying facilities, provided you maintain   clear directions next to the object code saying where to find the   Corresponding Source. Regardless of what server hosts the   Corresponding Source, you remain obligated to ensure that it is   available for as long as needed to satisfy these requirements.</li> <li>e) Convey the object code using peer-to-peer transmission,   provided you inform other peers where the object code and   Corresponding Source of the work are being offered to the general   public at no charge under subsection 6d.</li> </ul> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \u201cUser Product\u201d is either (1) a \u201cconsumer product\u201d, which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \u201cnormally used\u201d refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\u201cInstallation Information\u201d for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p>"},{"location":"about/license/#7-additional-terms","title":"7. Additional Terms.","text":"<p>\u201cAdditional permissions\u201d are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <ul> <li>a) Disclaiming warranty or limiting liability differently from the   terms of sections 15 and 16 of this License; or</li> <li>b) Requiring preservation of specified reasonable legal notices or   author attributions in that material or in the Appropriate Legal   Notices displayed by works containing it; or</li> <li>c) Prohibiting misrepresentation of the origin of that material,   or requiring that modified versions of such material be marked in   reasonable ways as different from the original version; or</li> <li>d) Limiting the use for publicity purposes of names of licensors   or authors of the material; or</li> <li>e) Declining to grant rights under trademark law for use of some   trade names, trademarks, or service marks; or</li> <li>f) Requiring indemnification of licensors and authors of that   material by anyone who conveys the material (or modified versions   of it) with contractual assumptions of liability to the recipient,   for any liability that these contractual assumptions directly   impose on those licensors and authors.</li> </ul> <p>All other non-permissive additional terms are considered \u201cfurther restrictions\u201d within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p>"},{"location":"about/license/#8-termination","title":"8. Termination.","text":"<p>You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p>"},{"location":"about/license/#9-acceptance-not-required-for-having-copies","title":"9. Acceptance Not Required for Having Copies.","text":"<p>You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p>"},{"location":"about/license/#10-automatic-licensing-of-downstream-recipients","title":"10. Automatic Licensing of Downstream Recipients.","text":"<p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \u201centity transaction\u201d is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\u2019s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p>"},{"location":"about/license/#11-patents","title":"11. Patents.","text":"<p>A \u201ccontributor\u201d is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\u2019s \u201ccontributor version\u201d.</p> <p>A contributor\u2019s \u201cessential patent claims\u201d are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \u201ccontrol\u201d includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\u2019s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \u201cpatent license\u201d is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \u201cgrant\u201d such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \u201cKnowingly relying\u201d means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\u2019s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \u201cdiscriminatory\u201d if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p>"},{"location":"about/license/#12-no-surrender-of-others-freedom","title":"12. No Surrender of Others\u2019 Freedom.","text":"<p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p>"},{"location":"about/license/#13-remote-network-interaction-use-with-the-gnu-general-public-license","title":"13. Remote Network Interaction; Use with the GNU General Public License.","text":"<p>Notwithstanding any other provision of this License, if you modify the Program, your modified version must prominently offer all users interacting with it remotely through a computer network (if your version supports such interaction) an opportunity to receive the Corresponding Source of your version by providing access to the Corresponding Source from a network server at no charge, through some standard or customary means of facilitating copying of software. This Corresponding Source shall include the Corresponding Source for any work covered by version 3 of the GNU General Public License that is incorporated pursuant to the following paragraph.</p> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the work with which it is combined will remain governed by version 3 of the GNU General Public License.</p>"},{"location":"about/license/#14-revised-versions-of-this-license","title":"14. Revised Versions of this License.","text":"<p>The Free Software Foundation may publish revised and/or new versions of the GNU Affero General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU Affero General Public License \u201cor any later version\u201d applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU Affero General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU Affero General Public License can be used, that proxy\u2019s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p>"},{"location":"about/license/#15-disclaimer-of-warranty","title":"15. Disclaimer of Warranty.","text":"<p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \u201cAS IS\u201d WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p>"},{"location":"about/license/#16-limitation-of-liability","title":"16. Limitation of Liability.","text":"<p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>"},{"location":"about/license/#17-interpretation-of-sections-15-and-16","title":"17. Interpretation of Sections 15 and 16.","text":"<p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <p>END OF TERMS AND CONDITIONS</p>"},{"location":"about/license/#how-to-apply-these-terms-to-your-new-programs","title":"How to Apply These Terms to Your New Programs","text":"<p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \u201ccopyright\u201d line and a pointer to where the full notice is found.</p> Text Only<pre><code>    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as\n    published by the Free Software Foundation, either version 3 of the\n    License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If your software can interact with users remotely through a computer network, you should also make sure that it provides a way for users to get its source. For example, if your program is a web application, its interface could display a \u201cSource\u201d link that leads users to an archive of the code. There are many ways you could offer source, and different solutions will be better for different programs; see section 13 for the specific requirements.</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \u201ccopyright disclaimer\u201d for the program, if necessary. For more information on this, and how to apply and follow the GNU AGPL, see https://www.gnu.org/licenses/.</p>"},{"location":"about/privacy/","title":"Privacy Notice","text":"<p>Last Revised Date</p> <p>This notice was last updated on May 04, 2024.</p>"},{"location":"about/privacy/#privacy-notice","title":"Privacy Notice","text":"<p>This privacy notice for DanLing Team (also known as DanLing) (\u2018we\u2019, \u2018us\u2019, or \u2018our\u2019), describes how and why we might collect, store, use, and/or share (\u2018process\u2019) your information when you use our services (\u2018Services\u2019), such as when you:</p> <ul> <li>Visit our website at chanfig.danling.org, or any website of ours that links to this privacy notice</li> </ul> <p>You can change your privacy settings at any time by clicking the button below:</p> <p>Privacy Control</p> <p>Questions or concerns? Reading this privacy notice will help you understand your privacy rights and choices. If you do not agree with our policies and practices, please do not use our Services. If you still have any questions or concerns, please contact us at privacy@danling.org.</p>"},{"location":"about/privacy/#0-summary-of-key-points","title":"0. Summary of Key Points","text":"<p>This summary provides key points from our privacy notice, but you can find out more details about any of these topics by clicking the link following each key point or by using our table of contents below to find the section you are looking for.</p> <p>What personal information do we process?</p> <p>When you visit, use, or navigate our Services, we may process personal information depending on how you interact with us and the Services, the choices you make, and the products and features you use.</p> <p> What information do we collect?</p> <p>How do we process your information?</p> <p>We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent. We process your information only when we have a valid legal reason to do so.</p> <p> How do we process your information?</p> <p>Do we process any sensitive personal information?</p> <p>We do not process any sensitive personal information.</p> <p>Do we collect any information from third parties?</p> <p>We do not collect any information from third parties.</p> <p>In what situations and with which parties do we share personal information?</p> <p>We may share information in specific situations and with specific third parties.</p> <p> When and with whom we share your personal information?</p> <p>How do we keep your information safe?</p> <p>We have organisational and technical processes and procedures in place to protect your personal information.</p> <p> How do we keep your information safe?</p> <p>What are your rights?</p> <p>Depending on where you are located geographically, the applicable privacy law may mean you have certain rights regarding your personal information.</p> <p> What are your privacy rights?</p> <p>How do you exercise your rights?</p> <p>The easiest way to exercise your rights is by contacting the relevant data protection authority in your jurisdiction.</p> <p> How to exercise your rights</p>"},{"location":"about/privacy/#1-what-information-do-we-collect","title":"1. What information do we collect?","text":""},{"location":"about/privacy/#personal-information-you-disclose-to-us","title":"Personal information you disclose to us","text":"<p>In Short</p> <p>We collect personal information that you provide to us.</p> <p>We collect personal information that you voluntarily provide to us when you express an interest in obtaining information about us or our products and Services, when you participate in activities on the Services, or otherwise when you contact us.</p> <p>Sensitive Personal Information</p> <p>We do not collect any sensitive personal information from you.</p>"},{"location":"about/privacy/#information-automatically-collected","title":"Information automatically collected","text":"<p>In Short</p> <p>Some information \u2014 such as IP address and/or browser and device characteristics \u2014 is collected automatically when you visit our Services.</p> <p>We automatically collect certain information when you visit, use, or navigate our Services. This information does not reveal your specific identity (like your name or contact information) but may include device and usage information, such as your IP address, browser and device characteristics, operating system, language preferences, referring URLs, device name, country, location, information about how and when you use our Services, and other technical information. This information is primarily needed to maintain the security and operation of our Services, and for our internal analytics and reporting purposes.</p> <p>Like many businesses, we also collect information through cookies and similar technologies.</p> <p>The information we collect includes:</p> <ul> <li>Identifiers.     Identifier is a device and browser-specific unique random string that we generate when you use our Service.     This identifier is stored in a cookie on your device, allowing us to identify you across multiple sessions and when you return to our Service.   You can delete this cookie at any time by clearing your browser\u2019s cache.</li> <li>Log and Usage Data.     Log and usage data is service-related, diagnostic, usage, and performance information our servers automatically collect when you access or use our Services and which we record in log files.     Depending on how you interact with us, this log data may include your IP address, device information, browser type, and settings, and information about your activity in the Services (such as the date/time stamps associated with your usage, pages and files viewed, searches and other actions you take such as which features you use), device event information (such as system activity, error reports (sometimes called \u2018crash dumps\u2019) and hardware settings).</li> <li>Device Data.     We collect device data such as information about your computer, phone, tablet, or other devices you use to access the Services.     Depending on the device used, this device data may include information such as your IP address (or proxy server), device and application identification numbers, location, browser type, hardware model, Internet Service Provider and/or mobile carrier, operating system, and system configuration information.</li> <li>Location Data.     We collect location data such as information about your device\u2019s location, which can be either precise or imprecise.     How much information we collect depends on the type and settings of the device you use to access the Services.     For example, we may use GPS and other technologies to collect geolocation data that tells us your current location (based on your IP address).     You can opt out of allowing us to collect this information either by refusing access to the information or by disabling your location settings on your device.</li> </ul>"},{"location":"about/privacy/#categories-of-personal-information-we-collect","title":"Categories of Personal Information We Collect","text":"<p>We have collected the following categories of personal information in the past twelve (12) months:</p> Category Examples Collected A. Identifiers Contact details, such as real name, alias, postal address, telephone or mobile contact number, unique personal identifier, online identifier, Internet Protocol address, email address, and account name YES B. Personal information as defined in the California Customer Records statute Name, contact information, education, employment, employment history, and financial information NO C. Protected classification characteristics under state or federal law Gender, age, date of birth, race and ethnicity, national origin, marital status, and other demographic data NO D. Commercial information Transaction information, purchase history, financial details, and payment information NO E. Biometric information Fingerprints and voiceprints NO F. Internet or other similar network activity Browsing history, search history, online behaviour, interest data, and interactions with our and other websites, applications, systems, and advertisements YES G. Geolocation data Device location YES H. Audio, electronic, sensory, or similar information Images and audio, video or call recordings created in connection with our business activities NO I. Professional or employment-related information Business contact details in order to provide you our Services at a business level or job title, work history, and professional qualifications if you apply for a job with us NO J. Education Information Student records and directory information NO K. Inferences drawn from collected personal information Inferences drawn from any of the collected personal information listed above to create a profile or summary about, for example, an individual\u2019s preferences and characteristics YES L. Sensitive personal Information NO <p>We may also collect other personal information outside of these categories through instances where you interact with us in person, online, or by phone or mail in the context of:</p> <ul> <li>Receiving help through our customer support channels;</li> <li>Participation in customer surveys or contests; and</li> <li>Facilitation in the delivery of our Services and to respond to your inquiries.</li> </ul> <p>We will use and retain the collected personal information as needed to provide you with our Services and as necessary to comply with our legal obligations, resolve disputes, and enforce our agreement for the following period:</p> <ul> <li>Category A: Indefinitely</li> <li>Category F: Indefinitely</li> <li>Category G: Indefinitely</li> <li>Category K: Indefinitely</li> </ul>"},{"location":"about/privacy/#2-how-do-we-process-your-information","title":"2. How do we process your information?","text":"<p>In Short</p> <p>We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent.</p> <p>We process your personal information for a variety of reasons, depending on how you interact with our Services, including:</p> <ul> <li>To protect our Services.     We may process your information as part of our efforts to keep our Services safe and secure, including fraud monitoring and prevention.</li> <li>To identify user trends.     We may process information about how you use our Services to better understand how they are being used so we can improve them.</li> <li>To save or protect an individual\u2019s vital interest.     We may process your information when necessary to save or protect an individual\u2019s vital interest, such as to prevent harm.</li> </ul>"},{"location":"about/privacy/#3-what-legal-basis-do-we-have-for-processing-your-information","title":"3. What legal basis do we have for processing your information?","text":"<p>In Short</p> <p>We only process your personal information when we believe it is necessary and we have a valid legal reason (i.e. legal basis) to do so under applicable law, like with your consent, to comply with laws, to provide you with services to enter into or fulfil our contractual obligations, to protect your rights, or to fulfil our legitimate business interests.</p> <p>The General Data Protection Regulation (GDPR) and UK GDPR require us to explain the valid legal bases we rely on in order to process your personal information. As such, we may rely on the following legal bases to process your personal information:</p> <ul> <li>Consent.     We may process your personal information if you have given us specific consent to use your personal information for a specific purpose.     You have the right to withdraw your consent at any time.     Learn more about withdrawing your consents.</li> <li>Legitimate Interests.     We may process your information when we believe it is reasonably necessary to achieve our legitimate business interests and those interests do not outweigh your interests and fundamental rights and freedoms.     For example, we may process your personal information for some of the purposes described in order to:<ul> <li>Analyse how our Services are used so we can improve them to engage and retain users</li> <li>Diagnose problems and/or prevent fraudulent activities</li> </ul> </li> <li>Legal Obligations.     We may process your information where we believe it is necessary for compliance with our legal obligations, such as to cooperate with a law enforcement body or regulatory agency, exercise or defend our legal rights, or disclose your information as evidence in litigation in which we are involved.</li> <li>Vital Interests.     We may process your information where we believe it is necessary to protect your vital interests or the vital interests of a third party, such as situations involving potential threats to the safety of any person.</li> </ul> <p>Consent to Processing in Canada</p> <p>If you are located in Canada, we may be legally permitted under applicable law to process your information without your consent in some exceptional cases, including, for example:</p> <ul> <li>If collection is clearly in the interests of an individual and consent cannot be obtained in a timely way</li> <li>For investigations and fraud detection and prevention</li> <li>For business transactions provided certain conditions are met</li> <li>If it is contained in a witness statement and the collection is necessary to assess, process, or settle an insurance claim</li> <li>For identifying injured, ill, or deceased persons and communicating with next of kin</li> <li>If we have reasonable grounds to believe an individual has been, is, or may be victim of financial abuse</li> <li>If it is reasonable to expect collection and use with consent would compromise the availability or the accuracy of the information and the collection is reasonable for purposes related to investigating a breach of an agreement or a contravention of the laws of Canada or a province</li> <li>If disclosure is required to comply with a subpoena, warrant, court order, or rules of the court relating to the production of records</li> <li>If it was produced by an individual in the course of their employment, business, or profession and the collection is consistent with the purposes for which the information was produced</li> <li>If the collection is solely for journalistic, artistic, or literary purposes</li> <li>If the information is publicly available and is specified by the regulations</li> </ul>"},{"location":"about/privacy/#4-when-and-with-whom-do-we-share-your-personal-information","title":"4. When and with whom do we share your personal information?","text":"<p>In Short</p> <p>We may share information in specific situations described in this section and/or with the following third parties.</p> <p>We may use your personal information for our business purposes, such as for undertaking internal research for technological development and demonstration. This is not considered to be \u2018selling\u2019 of your personal information.</p> <p>Vendors, Consultants, and Other Third-Party Service Providers. We may share your data with third-party vendors, service providers, contractors, or agents (\u2018third parties\u2019) who perform services for us or on our behalf and require access to such information to do that work. We have contracts in place with our third parties, which are designed to help safeguard your personal information. This means that they cannot do anything with your personal information unless we have instructed them to do it. They will also not share your personal information with any organisation apart from us. They also commit to protect the data they hold on our behalf and to retain it for the period we instruct.</p> <p>The third parties we may share personal information with are as follows:</p> <ul> <li>Advertising, Direct Marketing, and Lead Generation<ul> <li>Google AdSense</li> </ul> </li> <li>Cloud Computing Services<ul> <li>Microsoft Azure</li> <li>Amazon Web Services (AWS)</li> <li>Google Cloud Platform (GCP)</li> </ul> </li> <li>Communications and Content Delivery Network (CDN) Services<ul> <li>Cloudflare</li> </ul> </li> <li>Content Optimisation<ul> <li>Google Site Search</li> <li>Google Fonts</li> </ul> </li> <li>Functionality and Infrastructure Optimisation<ul> <li>GitHub Pages</li> </ul> </li> <li>User Commenting and Forums<ul> <li>Disqus</li> <li>GitHub Issues</li> <li>GitHub Discussions</li> </ul> </li> <li>Web and Mobile Analytics<ul> <li>Google Analytics</li> </ul> </li> </ul> <p>We also may need to share your personal information in the following situations:</p> <ul> <li>Business Transfers.     We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.</li> </ul> <p>We have disclosed the following categories of personal information for a business purpose in the past twelve (12) months:</p> <p>Nill</p> <p>The categories of third parties to whom we sold personal information in the past twelve (12) months:</p> <p>Nill</p> <p>The categories of third parties to whom we shared personal information with in the past twelve (12) months:</p> <ul> <li>Web and Mobile Analytics<ul> <li>Google Analytics</li> </ul> </li> </ul>"},{"location":"about/privacy/#5-do-we-use-cookies-and-other-tracking-technologies","title":"5. Do we use cookies and other tracking technologies?","text":"<p>In Short</p> <p>We may use cookies and other tracking technologies to collect and store your information.</p> <p>We also permit third parties and service providers to use online tracking technologies on our Services for analytics and advertising, including to help manage and display advertisements, to tailor advertisements to your interests, or to send abandoned shopping cart reminders (depending on your communication preferences). The third parties and service providers use their technology to provide advertising about products and services tailored to your interests which may appear either on our Services or on other websites.</p> <p>To the extent these online tracking technologies are deemed to be a \u2018sale\u2019/\u2019sharing\u2019 (which includes targeted advertising, as defined under the applicable laws) under applicable US state laws, you can opt out of these online tracking technologies by clicking the button on the top of this page or the button below:</p> <p>Privacy Control</p>"},{"location":"about/privacy/#google-analytics","title":"Google Analytics","text":"<p>We may share your information with Google Analytics to track and analyse the use of the Services. The Google Analytics Advertising Features that we may use include:</p> <ul> <li>Remarketing with Google Analytics</li> <li>Google Display Network Impressions Reporting</li> <li>Google Analytics Demographics and Interests Reporting</li> </ul> <p>To opt out of being tracked by Google Analytics across the Services, visit https://tools.google.com/dlpage/gaoptout. You can opt out of Google Analytics Advertising Features through Ads Settings and Ad Settings for mobile apps.</p> <p>Other opt out means include http://optout.networkadvertising.org/ and http://www.networkadvertising.org/mobile-choice.</p> <p>For more information on the privacy practices of Google, please visit the Google Privacy &amp; Terms.</p>"},{"location":"about/privacy/#6-how-long-do-we-keep-your-information","title":"6. How long do we keep your information?","text":"<p>In Short</p> <p>We keep your information for as long as necessary to fulfil the purposes outlined in this privacy notice unless otherwise required by law.</p> <p>We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements).</p> <p>When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymise it, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.</p>"},{"location":"about/privacy/#7-how-do-we-keep-your-information-safe","title":"7. How do we keep your information safe?","text":"<p>In Short</p> <p>We aim to protect your personal information through a system of organisational and technical security measures.</p> <p>We have implemented appropriate technical and organisational security measures designed to protect the security of any personal information we process. However, despite our safeguards and efforts to secure your information, no electronic transmission over the internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorised third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Although we will do our best to protect your personal information, the transmission of personal information to and from our Services is at your own risk. You should only access the Services within a secure environment.</p>"},{"location":"about/privacy/#8-what-are-your-privacy-rights","title":"8. What are your privacy rights?","text":"<p>In Short</p> <p>We strive to protect your privacy rights and choices to the best possible extent under the law.</p> <p>You have rights under certain data protection laws. However, these rights are not absolute, and in certain cases, we may decline your request as permitted by law. These rights include:</p> <ul> <li>Right to know     whether or not we are processing your personal data</li> <li>Right to access     your personal data</li> <li>Right to correct     inaccuracies in your personal data</li> <li>Right to request     the deletion of your personal data</li> <li>Right to obtain a copy     of the personal data you previously shared with us</li> <li>Right to non-discrimination     against you for exercising your rights</li> <li>Right to opt-out<ul> <li>of the processing of your personal data if it is used for targeted advertising (or sharing as defined under applicable laws), the sale of personal data, or profiling in furtherance of decisions that produce legal or similarly significant effects (\u2018profiling\u2019) concerning you</li> <li>of the collection of sensitive data and personal data collected through the operation of a voice or facial recognition feature</li> </ul> </li> <li>Right to obtain<ul> <li>a list of the categories of third parties to which we have disclosed personal data</li> <li>a list of specific third parties to which we have disclosed personal data</li> </ul> </li> <li>Right to limit     use and disclosure of sensitive personal data</li> </ul>"},{"location":"about/privacy/#how-to-exercise-your-rights","title":"How to exercise your rights","text":"<p>It is very unlikely that you will be able to exercise the above rights as we do not collect any identifiable personal data from you.</p> <p>We are unable to reply to and act on data subject access request as we do not save any identifiable information about you, and we will not be able to verify your identity.</p> <p>If you believe we are unlawfully processing your personal information, you can contact the relevant data protection regulator, state attorney general, or other competent authority in your jurisdiction.</p> Residency Authority European Economic Area Member State\u2019s data protection supervisory authority United Kingdom Information Commissioner\u2019s Office Australia Office of the Australian Information Commissioner New Zealand Office of New Zealand Privacy Commissioner Canada Office of the Privacy Commissioner of Canada California of the United States California Privacy Protection Agency Switzerland Federal Data Protection and Information Commissioner South Africa Information Regulator"},{"location":"about/privacy/#withdraw-your-consent","title":"Withdraw your consent","text":"<p>If we are relying on your consent to process your personal information, which may be express and/or implied consent depending on the applicable law, you have the right to withdraw your consent at any time. You can withdraw your consent at any time by clicking the button on the top of this page or the button below:</p> <p>Privacy Control</p> <p>However, please note that this will not affect the lawfulness of the processing before its withdrawal nor, when applicable law allows, will it affect the processing of your personal information conducted in reliance on lawful processing grounds other than consent.</p>"},{"location":"about/privacy/#cookies-and-similar-technologies","title":"Cookies and similar technologies","text":"<p>Most web browsers are set to accept cookies by default. If you prefer, you can usually choose to set your browser to remove or reject browser cookies. Please note that if you choose to remove or reject cookies, this will NOT affect the availability and functionality of our Services.</p>"},{"location":"about/privacy/#9-controls-for-do-not-track-features","title":"9. Controls for Do-Not-Track features","text":"<p>Most web browsers and some mobile operating systems and mobile applications include a Do-Not-Track (\u2018DNT\u2019) feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. At this stage, no uniform technology standard for recognising and implementing DNT signals has been finalised. Although we cannot promise to honour every DNT signal, we strive to honour all such requests where technically feasible.</p> <p>California law requires us to let you know how we respond to web browser DNT signals. Because we cannot guarantee to recognise and houour all DNT signals, we do not respond to them at this time.</p>"},{"location":"about/privacy/#10-do-residents-in-certain-jurisdiction-have-specific-privacy-rights","title":"10. Do residents in certain jurisdiction have specific privacy rights?","text":"<p>NO.</p> <p>All men and women are created equal.</p> <p>We provide the same privacy rights to all individuals, regardless of their location.</p> <p>Be assured that we will treat you with the same respect and dignity as we would want to be treated.</p>"},{"location":"about/privacy/#11-how-can-you-review-update-or-delete-the-data-we-collect-from-you","title":"11. How can you review, update, or delete the data we collect from you?","text":"<p>It is very unlikely that you will be able to review, update, or delete the data we collect from you as we do not collect any identifiable personal data from you, and we will not be able to identify which data belongs to you.</p>"},{"location":"about/privacy/#12-do-we-make-updates-to-this-notice","title":"12. Do we make updates to this notice?","text":"<p>In Short</p> <p>Yes, we will update this notice as necessary to stay compliant with relevant laws.</p> <p>We may update this privacy notice from time to time. The updated version will be indicated by an updated \u2018Last Revised Date\u2019 at the top of this privacy notice. If we make any material changes, we will notify you by posting the new privacy notice on this page. We are unable to notify you directly as we do not collect any contact information from you. We encourage you to review this privacy notice frequently to stay informed of how we are protecting your information.</p>"},{"location":"blog/","title":"CHANfiG","text":""},{"location":"zh/#_1","title":"\u4ecb\u7ecd","text":"<p>CHANfiG \u200b\u5e0c\u671b\u200b\u80fd\u200b\u8ba9\u200b\u4f60\u200b\u7684\u200b\u914d\u7f6e\u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\u3002</p> <p>\u200b\u8bad\u7ec3\u200b\u4e00\u4e2a\u200b\u673a\u5668\u200b\u5b66\u4e60\u200b\u6a21\u578b\u200b\u6709\u200b\u65e0\u6570\u4e2a\u200b\u53ef\u200b\u8c03\u8282\u200b\u7684\u200b\u53c2\u6570\u200b\u3002 \u200b\u4e3a\u4e86\u200b\u8c03\u8282\u200b\u6240\u6709\u200b\u53c2\u6570\u200b\uff0c\u200b\u7814\u7a76\u5458\u200b\u4eec\u200b\u5e38\u5e38\u200b\u9700\u8981\u200b\u64b0\u5199\u200b\u5de8\u5927\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u6709\u65f6\u200b\u751a\u81f3\u200b\u957f\u200b\u8fbe\u200b\u6570\u5343\u200b\u884c\u200b\u3002 \u200b\u5927\u591a\u6570\u200b\u53c2\u6570\u200b\u53ea\u662f\u200b\u65b9\u6cd5\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b\u7684\u200b\u7b80\u5355\u200b\u91cd\u590d\u200b\uff0c\u200b\u8fd9\u200b\u5bfc\u81f4\u200b\u4e86\u200b\u5f88\u591a\u200b\u4e0d\u5fc5\u8981\u200b\u7684\u200b\u58f0\u660e\u200b\u3002 \u200b\u6b64\u5916\u200b\uff0c\u200b\u8c03\u8282\u200b\u8fd9\u4e9b\u200b\u53c2\u6570\u200b\u540c\u6837\u200b\u5f88\u200b\u7e41\u7410\u200b\uff0c\u200b\u9700\u8981\u200b\u5b9a\u4f4d\u200b\u5e76\u200b\u6253\u5f00\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u4f5c\u51fa\u200b\u4fee\u6539\u200b\uff0c\u200b\u7136\u540e\u200b\u4fdd\u5b58\u200b\u5173\u95ed\u200b\u3002 \u200b\u8fd9\u4e2a\u200b\u8fc7\u7a0b\u200b\u6d6a\u8d39\u200b\u4e86\u200b\u65e0\u6570\u200b\u7684\u200b\u5b9d\u8d35\u65f6\u95f4\u200b \u200b\u8fd9\u200b\u65e0\u7591\u200b\u662f\u200b\u4e00\u79cd\u200b\u72af\u7f6a\u200b \u3002 \u200b\u4f7f\u7528\u200b<code>argparse</code>\u200b\u53ef\u4ee5\u200b\u5728\u200b\u4e00\u5b9a\u200b\u7a0b\u5ea6\u200b\u4e0a\u200b\u7f13\u89e3\u200b\u8c03\u53c2\u200b\u7684\u200b\u4e0d\u53d8\u200b\uff0c\u200b\u4f46\u662f\u200b\uff0c\u200b\u8981\u200b\u8ba9\u200b\u4ed6\u200b\u548c\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u9002\u914d\u200b\u4f9d\u7136\u200b\u9700\u8981\u200b\u5f88\u591a\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u5e76\u4e14\u200b\u7f3a\u4e4f\u200b\u5d4c\u5957\u200b\u4e5f\u200b\u9650\u5236\u200b\u4e86\u200b\u4ed6\u200b\u7684\u200b\u6f5c\u529b\u200b\u3002</p> <p>CHANfiG \u200b\u65e8\u5728\u200b\u5e26\u6765\u200b\u6539\u53d8\u200b\u3002</p> <p>\u200b\u4f60\u200b\u53ea\u200b\u9700\u8981\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u8f93\u5165\u200b\u4f60\u200b\u7684\u200b\u4fee\u6539\u200b\uff0c\u200b\u7136\u540e\u200b\u628a\u200b\u5269\u4e0b\u200b\u7684\u200b\u4ea4\u7ed9\u200b CHANfiG\u3002</p> <p>CHANfiG \u200b\u5f88\u5927\u200b\u7a0b\u5ea6\u200b\u4e0a\u200b\u542f\u53d1\u200b\u81ea\u200bYACS\u3002 \u200b\u4e0d\u540c\u4e8e\u200b YACS \u200b\u7684\u200b\u8303\u5f0f\u200b\uff08<code>\u200b\u4ee3\u7801\u200b + \u200b\u5b9e\u9a8c\u200bE\u200b\u7684\u200bYACS\u200b\u914d\u7f6e\u6587\u4ef6\u200b (+ \u200b\u5916\u90e8\u200b\u4f9d\u8d56\u200b + \u200b\u786c\u4ef6\u200b + \u200b\u5176\u4ed6\u200b\u4ee4\u4eba\u8ba8\u538c\u200b\u7684\u200b\u672f\u8bed\u200b ...) = \u200b\u53ef\u200b\u91cd\u590d\u200b\u7684\u200b\u5b9e\u9a8c\u200bE</code>\uff09\uff0c CHANfiG \u200b\u7684\u200b\u8303\u5f0f\u200b\u662f\u200b\uff1a</p> <p><code>\u200b\u4ee3\u7801\u200b + \u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b (+ \u200b\u53ef\u9009\u200b\u7684\u200bCHANfiG\u200b\u914d\u7f6e\u6587\u4ef6\u200b + \u200b\u5916\u90e8\u200b\u4f9d\u8d56\u200b + \u200b\u786c\u4ef6\u200b + \u200b\u5176\u4ed6\u200b\u4ee4\u4eba\u8ba8\u538c\u200b\u7684\u200b\u672f\u8bed\u200b ...) = \u200b\u53ef\u200b\u91cd\u590d\u200b\u7684\u200b\u5b9e\u9a8c\u200bE (+ \u200b\u53ef\u9009\u200b\u7684\u200bCHANfiG\u200b\u914d\u7f6e\u6587\u4ef6\u200b)</code></p>"},{"location":"zh/#_2","title":"\u7ec4\u4ef6","text":"<p>\u200b\u4e00\u4e2a\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u770b\u4f5c\u200b\u4e00\u4e2a\u200b\u5d4c\u5957\u200b\u7684\u200b\u5b57\u5178\u200b\u7ed3\u6784\u200b\u3002</p> <p>\u200b\u4f46\u662f\u200b\uff0c\u200b\u9ed8\u8ba4\u200b\u7684\u200b Python \u200b\u5b57\u5178\u200b\u5341\u5206\u200b\u96be\u4ee5\u200b\u64cd\u4f5c\u200b\u3002</p> <p>\u200b\u8bbf\u95ee\u200b\u5b57\u5178\u200b\u6210\u5458\u200b\u7684\u200b\u552f\u4e00\u200b\u65b9\u5f0f\u200b\u662f\u200b<code>dict['name']</code>\uff0c\u200b\u8fd9\u200b\u65e0\u7591\u200b\u662f\u200b\u6781\u5176\u200b\u7e41\u7410\u200b\u7684\u200b\u3002 \u200b\u66f4\u200b\u7cdf\u7cd5\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd9\u4e2a\u200b\u5b57\u5178\u200b\u548c\u200b\u914d\u7f6e\u200b\u4e00\u6837\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5d4c\u5957\u200b\u7ed3\u6784\u200b\uff0c\u200b\u8bbf\u95ee\u200b\u6210\u5458\u200b\u5c06\u4f1a\u200b\u53d8\u6210\u200b\u7c7b\u4f3c\u200b\u4e8e\u200b<code>dict['parent']['children']['name']</code>\u200b\u7684\u200b\u6837\u5b50\u200b\u3002</p> <p>\u200b\u591f\u200b\u4e86\u200b\u5c31\u662f\u200b\u591f\u200b\u4e86\u200b\uff0c\u200b\u662f\u200b\u65f6\u5019\u200b\u505a\u51fa\u200b\u6539\u53d8\u200b\u4e86\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u9700\u8981\u200b\u5c5e\u6027\u200b\u65b9\u5f0f\u200b\u7684\u200b\u8bbf\u95ee\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6211\u4eec\u200b\u73b0\u5728\u200b\u5c31\u200b\u9700\u8981\u200b\u3002 <code>dict.name</code>\u200b\u548c\u200b<code>dict.parent.children.name</code>\u200b\u662f\u200b\u6240\u6709\u200b\u4f60\u200b\u9700\u8981\u200b\u7684\u200b\u3002</p> <p>\u200b\u5c3d\u7ba1\u200b\u6b64\u524d\u200b\u5df2\u7ecf\u200b\u6709\u200b\u5de5\u4f5c\u200b\u6765\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u7684\u200b\u5bf9\u200b\u5b57\u5178\u200b\u6210\u5458\u200b\u7684\u200b\u5c5e\u6027\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b\u3002\u200b\u4f46\u662f\u200b\u4ed6\u4eec\u200b\u7684\u200b Config \u200b\u5bf9\u8c61\u200b\u8981\u4e48\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u72ec\u7acb\u200b\u7684\u200b\u5b57\u5178\u200b\u6765\u200b\u5b58\u50a8\u200b\u5c5e\u6027\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b\u7684\u200b\u4fe1\u606f\u200b\uff08EasyDict\uff09\uff0c\u200b\u800c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u5c5e\u6027\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b\u548c\u200b\u5b57\u5178\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b\u7684\u200b\u4e0d\u200b\u4e00\u81f4\u200b\uff1b\u200b\u8981\u4e48\u200b\u91cd\u65b0\u200b\u4f7f\u7528\u200b\u65e2\u6709\u200b\u7684\u200b<code>__dict__</code>\u200b\u7136\u540e\u200b\u5bf9\u200b\u5b57\u5178\u200b\u65b9\u5f0f\u200b\u8bbf\u95ee\u200b\u8fdb\u884c\u200b\u91cd\u5b9a\u5411\u200b\uff08ml_collections\uff09\uff0c\u200b\u800c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u5bfc\u81f4\u200b\u5c5e\u6027\u200b\u548c\u200b\u5b57\u5178\u200b\u6210\u5458\u200b\u5b58\u5728\u200b\u51b2\u7a81\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u89e3\u51b3\u200b\u4e0a\u8ff0\u200b\u9650\u5236\u200b\uff0c\u200b\u6211\u4eec\u200b\u7ee7\u627f\u200b\u4e86\u200b Python \u200b\u5185\u7f6e\u200b\u7684\u200b<code>dict</code>\u200b\u6765\u200b\u521b\u5efa\u200b<code>FlatDict</code>\u3001<code>DefaultDict</code>\u3001<code>NestedDict</code>\u3001<code>Config</code>\u200b\u548c\u200b<code>Registry</code>\u3002 \u200b\u6211\u4eec\u200b\u540c\u65f6\u200b\u4ecb\u7ecd\u200b\u4e86\u200b<code>Variable</code>\u200b\u6765\u200b\u5728\u200b\u591a\u4e2a\u200b\u4f4d\u7f6e\u200b\u5171\u4eab\u200b\u503c\u200b\uff0c\u200b\u548c\u200b<code>ConfigParser</code>\u200b\u6765\u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u3002</p>"},{"location":"zh/#flatdict","title":"FlatDict","text":"<p><code>FlatDict</code>\u200b\u5728\u200b\u4e09\u4e2a\u200b\u65b9\u9762\u200b\u5bf9\u200b\u9ed8\u8ba4\u200b\u7684\u200b<code>dict</code>\u200b\u505a\u51fa\u200b\u6539\u8fdb\u200b\u3002</p>"},{"location":"zh/#_3","title":"\u5b57\u5178\u200b\u64cd\u4f5c","text":"<p><code>FlatDict</code>\u200b\u652f\u6301\u200b\u53d8\u91cf\u200b\u63d2\u503c\u200b\u3002 \u200b\u5c06\u200b\u4e00\u4e2a\u200b\u6210\u5458\u200b\u7684\u200b\u503c\u200b\u8bbe\u7f6e\u200b\u4e3a\u200b<code>${}</code>\u200b\u5305\u88f9\u200b\u7684\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6210\u5458\u200b\u540d\u200b\uff0c\u200b\u7136\u540e\u200b\u8c03\u7528\u200b<code>interpolate</code>\u200b\u65b9\u6cd5\u200b\u3002 \u200b\u8fd9\u4e2a\u200b\u6210\u5458\u200b\u7684\u200b\u503c\u200b\u5c06\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u66ff\u6362\u200b\u4e3a\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u6210\u5458\u200b\u7684\u200b\u503c\u200b\u3002</p> <p>Python \u200b\u7684\u200b<code>dict</code>\u200b\u81ea\u200b Python 3.7 \u200b\u4e4b\u540e\u200b\u5c31\u662f\u200b\u6709\u5e8f\u200b\u7684\u200b\uff0c\u200b\u4f46\u662f\u200b\u5e76\u200b\u6ca1\u6709\u200b\u4e00\u4e2a\u200b\u5185\u7f6e\u200b\u7684\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u5bf9\u200b\u4e00\u4e2a\u200b<code>dict</code>\u200b\u8fdb\u884c\u200b\u6392\u5e8f\u200b\u3002<code>FlatDict</code>\u200b\u652f\u6301\u200b<code>sort</code>\u200b\u6765\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u7ba1\u7406\u200b\u4f60\u200b\u7684\u200b\u5b57\u5178\u200b\u3002</p> <p><code>FlatDict</code>\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e00\u4e2a\u200b<code>merge</code>\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4ed6\u200b\u4f7f\u200b\u4f60\u200b\u80fd\u200b\u5c06\u200b\u4e00\u4e2a\u200b<code>Mapping</code>\u3001<code>Iterable</code>\u200b\u6216\u8005\u200b\u4e00\u4e2a\u200b\u8def\u5f84\u200b\u5408\u5e76\u200b\u8fdb\u5165\u200b\u4e00\u4e2a\u200b<code>FlatDict</code>\u3002 \u200b\u4e0e\u200b<code>update</code>\u200b\u65b9\u6cd5\u200b\u4e0d\u540c\u200b\uff0c<code>merge</code>\u200b\u65b9\u6cd5\u200b\u662f\u200b\u8d4b\u503c\u200b\u800c\u200b\u4e0d\u662f\u200b\u66ff\u6362\u200b\uff0c\u200b\u8fd9\u200b\u4f7f\u5f97\u200b\u4ed6\u200b\u80fd\u200b\u66f4\u597d\u200b\u7684\u200b\u4e0e\u200b<code>DefaultDict</code>\u200b\u914d\u5408\u200b\u4f7f\u7528\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c<code>FlatDict</code>\u200b\u5f15\u5165\u200b\u4e86\u200b<code>difference</code>\u200b\u548c\u200b<code>intersect</code>\uff0c\u200b\u8fd9\u4e9b\u200b\u4f7f\u200b\u5176\u200b\u53ef\u4ee5\u200b\u975e\u5e38\u7b80\u5355\u200b\u7684\u200b\u5c06\u200b<code>FlatDict</code>\u200b\u548c\u200b\u5176\u4ed6\u200b<code>Mapping</code>\u3001<code>Iterable</code>\u200b\u6216\u8005\u200b\u4e00\u4e2a\u200b\u8def\u5f84\u200b\u8fdb\u884c\u200b\u5bf9\u6bd4\u200b\u3002</p>"},{"location":"zh/#_4","title":"\u6570\u636e\u200b\u7c7b\u200b\u64cd\u4f5c","text":"<p><code>FlatDict</code>\u200b\u9075\u5b88\u200bPEP 557\u200b\u63d0\u6848\u200b\uff0c\u200b\u4ed6\u4f1a\u200b\u68c0\u67e5\u200b\u5b50\u7c7b\u200b\u7684\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u5b83\u4eec\u200b\u6dfb\u52a0\u200b\u6210\u4e3a\u200b<code>FlatDict</code>\u200b\u7684\u200b\u6210\u5458\u200b\u3002 \u200b\u4ed6\u200b\u8fd8\u200b\u652f\u6301\u200b<code>validate</code>\u200b\u65b9\u6cd5\u200b\u6765\u200b\u68c0\u67e5\u200b\u6210\u5458\u200b\u662f\u5426\u200b\u7b26\u5408\u200b\u7c7b\u578b\u200b\u6ce8\u89e3\u200b\uff0c\u200b\u8fd9\u4e2a\u200b\u65b9\u6cd5\u200b\u4f1a\u200b\u5728\u200b\u5185\u90e8\u200b\u88ab\u200b\u8c03\u7528\u200b\u3002 \u200b\u66f4\u597d\u200b\u7684\u200b\u662f\u200b\uff0c<code>FlatDict</code>\u200b\u4f1a\u200b\u5728\u200b\u6210\u5458\u200b\u8d4b\u503c\u200b\u65f6\u200b\u81ea\u52a8\u200b\u5c06\u503c\u200b\u8f6c\u6362\u6210\u200b\u6ce8\u89e3\u200b\u7684\u200b\u7c7b\u578b\u200b\u3002</p>"},{"location":"zh/#_5","title":"\u673a\u5668\u200b\u5b66\u4e60\u200b\u64cd\u4f5c","text":"<p><code>FlatDict</code>\u200b\u652f\u6301\u200b\u4e0e\u200b Pytorch Tensor \u200b\u7c7b\u4f3c\u200b\u7684\u200b<code>to</code>\u200b\u65b9\u6cd5\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5f88\u200b\u7b80\u5355\u200b\u7684\u200b\u901a\u8fc7\u200b\u76f8\u540c\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5c06\u200b\u6240\u6709\u200b<code>FlatDict</code>\u200b\u7684\u200b\u6210\u5458\u200b\u503c\u200b\u8f6c\u6362\u200b\u4e3a\u200b\u67d0\u79cd\u200b\u7c7b\u578b\u200b\u6216\u8005\u200b\u8f6c\u79fb\u200b\u5230\u200b\u67d0\u4e2a\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u3002</p> <p><code>FlatDict</code>\u200b\u540c\u65f6\u200b\u96c6\u6210\u200b\u4e86\u200b<code>cpu</code>\u3001<code>gpu</code> (<code>cuda</code>)\u3001<code>tpu</code> (<code>xla</code>)\u200b\u65b9\u6cd5\u200b\u6765\u200b\u63d0\u4f9b\u200b\u66f4\u200b\u4fbf\u6377\u200b\u7684\u200b\u8bbf\u95ee\u200b\u3002</p>"},{"location":"zh/#io","title":"IO \u200b\u64cd\u4f5c","text":"<p><code>FlatDict</code>\u200b\u652f\u6301\u200b<code>json</code>\u3001<code>jsons</code>\u3001<code>yaml</code>\u200b\u548c\u200b<code>yamls</code>\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5c06\u200b<code>FlatDict</code>\u200b\u5b58\u50a8\u200b\u5230\u200b\u6587\u4ef6\u200b\u6216\u8005\u200b\u8f6c\u6362\u6210\u200b\u5b57\u7b26\u4e32\u200b\u3002 \u200b\u5b83\u200b\u8fd8\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>from_json</code>\u3001<code>from_jsons</code>\u3001<code>from_yaml</code>\u200b\u548c\u200b<code>from_yamls</code>\u200b\u6765\u200b\u4ece\u200b\u4e00\u4e2a\u200b\u5b57\u7b26\u4e32\u200b\u6216\u8005\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6784\u5efa\u200b<code>FlatDict</code>\u3002</p> <p><code>FlatDict</code>\u200b\u4e5f\u200b\u5305\u62ec\u200b\u4e86\u200b<code>dump</code>\u200b\u548c\u200b<code>load</code>\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u4ed6\u4eec\u200b\u53ef\u4ee5\u200b\u4ece\u6587\u4ef6\u200b\u6269\u5c55\u540d\u200b\u4e2d\u200b\u81ea\u52a8\u200b\u63a8\u65ad\u200b\u7c7b\u578b\u200b\u7136\u540e\u200b\u5c06\u200b<code>FlatDict</code>\u200b\u5b58\u50a8\u200b\u5230\u200b\u6587\u4ef6\u200b\u4e2d\u200b/\u200b\u4ece\u6587\u4ef6\u200b\u4e2d\u200b\u52a0\u8f7d\u200b<code>FlatDict</code>\u3002</p>"},{"location":"zh/#defaultdict","title":"DefaultDict","text":"<p>\u200b\u4e3a\u4e86\u200b\u6ee1\u8db3\u200b\u9ed8\u8ba4\u503c\u200b\u7684\u200b\u9700\u8981\u200b\uff0c\u200b\u6211\u4eec\u200b\u5305\u62ec\u200b\u4e86\u200b\u4e00\u4e2a\u200b<code>DefaultDict</code>\uff0c\u200b\u4ed6\u200b\u63a5\u53d7\u200b<code>default_factory</code>\u200b\u53c2\u6570\u200b\uff0c\u200b\u5e76\u200b\u548c\u200b<code>collections.defaultdict</code>\u200b\u4e00\u6837\u200b\u5de5\u4f5c\u200b\u3002</p>"},{"location":"zh/#nesteddict","title":"NestedDict","text":"<p>\u200b\u7531\u4e8e\u200b\u5927\u591a\u6570\u200b\u914d\u7f6e\u200b\u90fd\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5d4c\u5957\u200b\u7684\u200b\u7ed3\u6784\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fdb\u4e00\u6b65\u200b\u63d0\u51fa\u200b\u4e86\u200b<code>NestedDict</code>\u3002</p> <p>\u200b\u57fa\u4e8e\u200b<code>DefaultDict</code>\uff0c<code>NestedDict</code>\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>all_keys</code>\u3001<code>all_values</code>\u3001<code>all_items</code>\u200b\u65b9\u6cd5\u200b\u6765\u200b\u5141\u8bb8\u200b\u4e00\u6b21\u6027\u200b\u904d\u5386\u200b\u6574\u4e2a\u200b\u5d4c\u5957\u200b\u7ed3\u6784\u200b\u3002</p> <p><code>NestedDict</code>\u200b\u540c\u65f6\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>apply</code>\u200b\u548c\u200b<code>apply_</code>\u200b\u65b9\u6cd5\u200b\uff0c\u200b\u5b83\u200b\u53ef\u4ee5\u200b\u4f7f\u200b\u64cd\u7eb5\u200b\u5d4c\u5957\u200b\u7ed3\u6784\u200b\u66f4\u52a0\u200b\u5bb9\u6613\u200b\u3002</p>"},{"location":"zh/#config","title":"Config","text":"<p><code>Config</code>\u200b\u901a\u8fc7\u200b\u4e24\u4e2a\u200b\u65b9\u9762\u200b\u6765\u200b\u8fdb\u4e00\u6b65\u200b\u63d0\u5347\u200b\u529f\u80fd\u6027\u200b\uff1a \u200b\u652f\u6301\u200b<code>freeze</code>\u200b\u6765\u200b\u51bb\u7ed3\u200b\u548c\u200b<code>defrost</code>\u200b\u89e3\u51bb\u200b\u5b57\u5178\u200b\u548c\u200b \u200b\u52a0\u5165\u200b\u5185\u7f6e\u200b\u7684\u200b<code>ConfigParser</code>\u200b\u6765\u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u8bed\u53e5\u200b\u3002</p> <p>\u200b\u6ce8\u610f\u200b<code>Config</code>\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b<code>default_factory=Config()</code>\u200b\u6765\u200b\u63d0\u4f9b\u200b\u4fbf\u5229\u200b\u3002</p>"},{"location":"zh/#registry","title":"Registry","text":"<p><code>Registry</code>\u200b\u7ee7\u627f\u200b\u81ea\u200b<code>NestedDict</code>\uff0c\u200b\u5e76\u4e14\u200b\u63d0\u4f9b\u200b<code>register</code>\u3001<code>lookup</code>\u200b\u548c\u200b<code>build</code>\u200b\u6765\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u6ce8\u518c\u200b\u6784\u9020\u51fd\u6570\u200b\u5e76\u200b\u4ece\u200b<code>Config</code>\u200b\u6765\u200b\u521b\u5efa\u5bf9\u8c61\u200b\u3002</p> <p><code>ConfigRegistry</code>\u200b\u662f\u200b\u4e00\u4e2a\u200b<code>Registry</code>\u200b\u7684\u200b\u5b50\u7c7b\u200b\uff0c\u200b\u4ed6\u200b\u4e13\u4e3a\u200b\u4ece\u200b\u4e00\u4e2a\u200b<code>Config</code>\u200b\u6216\u8005\u200b\u4e00\u4e2a\u200b<code>dataclass</code>\u200b\u6765\u200b\u6784\u5efa\u200b\u4e00\u4e2a\u200b\u5bf9\u8c61\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u3002 \u200b\u53ea\u200b\u9700\u200b\u5728\u200b\u521b\u5efa\u200b\u6ce8\u518c\u8868\u200b\u65f6\u200b\u6307\u5b9a\u200b<code>key</code>\uff0c\u200b\u7136\u540e\u200b\u5728\u200b\u8c03\u7528\u200b<code>build</code>\u200b\u65b9\u6cd5\u200b\u65f6\u200b\u4f20\u5165\u200b<code>config</code>\uff0c\u200b\u4f60\u200b\u5c31\u200b\u4f1a\u200b\u5f97\u5230\u200b\u4f60\u200b\u60f3\u8981\u200b\u7684\u200b\u5bf9\u8c61\u200b\u3002</p>"},{"location":"zh/#variable","title":"Variable","text":"<p>\u200b\u6709\u200b\u4e00\u4e2a\u200b\u503c\u200b\u5728\u200b\u591a\u4e2a\u200b\u5730\u65b9\u200b\u4ee5\u200b\u591a\u4e2a\u200b\u540d\u5b57\u200b\u51fa\u73b0\u200b\uff1f\u200b\u6211\u4eec\u200b\u7ed9\u200b\u4f60\u200b\u63d0\u4f9b\u200b\u63a9\u62a4\u200b\u3002</p> <p>\u200b\u53ea\u8981\u200b\u5c06\u503c\u200b\u4ee5\u200b<code>Variable</code>\u200b\u5305\u88c5\u200b\uff0c\u200b\u7136\u540e\u200b\u6bcf\u5904\u200b\u66f4\u6539\u200b\u90fd\u200b\u4f1a\u200b\u5728\u200b\u5904\u5904\u200b\u4f53\u73b0\u200b\u3002</p> <p><code>Variable</code>\u200b\u652f\u6301\u200b<code>type</code>\u3001<code>choices</code>\u3001<code>validator</code>\u3001<code>required</code>\u200b\u6765\u200b\u786e\u4fdd\u200b\u503c\u200b\u7684\u200b\u6b63\u786e\u6027\u200b\u3002</p> <p>\u200b\u4e3a\u4e86\u200b\u66f4\u52a0\u200b\u7b80\u5355\u200b\uff0c<code>Variable</code>\u200b\u8fd8\u200b\u652f\u6301\u200b<code>help</code>\u200b\u6765\u200b\u5728\u200b\u4f7f\u7528\u200b<code>ConfigParser</code>\u200b\u65f6\u200b\u63d0\u4f9b\u200b\u63cf\u8ff0\u200b\u3002</p>"},{"location":"zh/#configparser","title":"ConfigParser","text":"<p><code>ConfigParser</code>\u200b\u5728\u200b<code>ArgumentParser</code>\u200b\u7684\u200b\u57fa\u7840\u200b\u4e4b\u4e0a\u200b\uff0c\u200b\u63d0\u4f9b\u200b\u4e86\u200b<code>parse</code>\u200b\u548c\u200b<code>parse_config</code>\u200b\u6765\u200b\u89e3\u6790\u200b\u547d\u4ee4\u884c\u200b\u53c2\u6570\u200b\u5e76\u200b\u521b\u5efa\u200b/\u200b\u66f4\u65b0\u200b<code>Config</code>\u3002</p>"},{"location":"zh/#_6","title":"\u4f7f\u7528","text":"<p>CHANfiG \u200b\u6709\u7740\u200b\u5f3a\u5927\u200b\u7684\u200b\u524d\u200b\u5411\u200b\u517c\u5bb9\u200b\u80fd\u529b\u200b\uff0c\u200b\u80fd\u591f\u200b\u826f\u597d\u200b\u7684\u200b\u517c\u5bb9\u200b\u4ee5\u5f80\u200b\u57fa\u4e8e\u200b yaml \u200b\u548c\u200b json \u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u6b64\u524d\u200b\u4f7f\u7528\u200b yacs\uff0c\u200b\u53ea\u200b\u9700\u200b\u7b80\u5355\u200b\u5c06\u200b<code>CfgNode</code>\u200b\u66ff\u6362\u200b\u4e3a\u200b<code>Config</code>\u200b\u4fbf\u200b\u53ef\u4ee5\u200b\u4eab\u53d7\u200b\u6240\u6709\u200b CHANfiG \u200b\u6240\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4fbf\u5229\u200b\u3002</p> <p>\u200b\u66f4\u8fdb\u4e00\u6b65\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u4f60\u200b\u53d1\u73b0\u200b<code>Config</code>\u200b\u4e2d\u200b\u7684\u200b\u540d\u5b57\u200b\u5bf9\u4e8e\u200b\u547d\u4ee4\u884c\u200b\u6765\u8bf4\u200b\u8fc7\u957f\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u7b80\u5355\u200b\u7684\u200b\u8c03\u7528\u200b<code>self.add_argument</code>\u200b\u5e76\u200b\u8bbe\u7f6e\u200b\u6070\u5f53\u200b\u7684\u200b<code>dest</code>\u200b\u6765\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u66f4\u200b\u77ed\u200b\u7684\u200b\u540d\u5b57\u200b\uff0c\u200b\u6b63\u5982\u200b<code>argparse</code>\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u90a3\u6837\u200b\u3002</p> Bash<pre><code># CHANfiG\n# Copyright (C) 2022-Present, DanLing Team\n\n# This file is part of CHANfiG.\n\n# CHANfiG is free software: you can redistribute it and/or modify\n# it under the terms of the following licenses:\n# - The Unlicense\n# - GNU Affero General Public License v3.0 or later\n# - GNU General Public License v2.0 or later\n# - BSD 4-Clause \"Original\" or \"Old\" License\n# - MIT License\n# - Apache License 2.0\n\n# CHANfiG is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n# See the LICENSE file for more details.\n\nimport os\nfrom typing import Any\n\nfrom chanfig import Config, Variable\n\n\nclass DataloaderConfig(Config):\n    # You must set the type annotation, or they will not be accessible as a CHANfiG member\n    batch_size: int = 64\n    num_workers: int = 4\n    pin_memory: bool = True\n    # If no type annotation is suitable, use `Any`\n    unknown: Any = None\n    # Attribute without type annotation are used to maintain the internal state of CHANfiG\n    attribute = \"None\"\n\n\nclass TestConfig(Config):\n    name: str = \"CHANfiG\"\n    seed: int = 1016\n    activation: str = \"GELU\"\n    dataloader: DataloaderConfig = DataloaderConfig()\n\n    def __init__(self):\n        super().__init__()\n        dropout = Variable(0.1)\n        self.optim.lr = 1e-3\n        self.model.encoder.num_layers = 6\n        self.model.decoder.num_layers = 6\n        self.model.dropout = dropout\n        self.model.encoder.dropout = dropout\n        self.model.decoder.dropout = dropout\n        self.add_argument(\"--batch_size\", dest=\"data.batch_size\")\n        self.add_argument(\"--lr\", dest=\"optim.lr\")\n\n    def post(self):\n        self.id = f\"{self.name}_{self.seed}\"\n\n\nif __name__ == \"__main__\":\n    # config = Config.load('config.yaml')  # read config from a yaml\n    # config = Config.load('config.json')  # read config from a json\n    existing_config = {\"model.encoder.num_layers\": 8}\n    config = TestConfig()\n    config.merge(existing_config)\n    # config.merge('dataset.yaml')  # merge config from a yaml\n    # config.merge('dataset.json', overwrite=False)  # merge config from a json\n    config = config.parse()\n    config.model.decoder.num_layers = 8\n    config.freeze()\n    print(config)\n    # main(config)\n    dir_path = os.path.dirname(os.path.realpath(__file__))\n    print(dir_path)\n    config.save(os.path.join(dir_path, \"config.yaml\"))  # save config to a yaml\n    config.save(os.path.join(dir_path, \"config.json\"))  # save config to a json\n</code></pre> <p>\u200b\u6240\u6709\u200b\u4f60\u200b\u9700\u8981\u200b\u505a\u200b\u7684\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u8fd0\u884c\u200b\u4e00\u884c\u200b\uff1a</p> Bash<pre><code>python main.py --model.encoder.num_layers 8 --model.dropout=0.2 --lr 5e-3\n</code></pre> <p>\u200b\u5f53\u7136\u200b\uff0c\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8bfb\u53d6\u200b\u4e00\u4e2a\u200b\u9ed8\u8ba4\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u7136\u540e\u200b\u5728\u200b\u4ed6\u200b\u57fa\u7840\u200b\u4e0a\u200b\u4fee\u6539\u200b\uff1a</p> <p>\u200b\u6ce8\u610f\u200b\uff0c\u200b\u4f60\u200b\u5fc5\u987b\u200b\u6307\u5b9a\u200b<code>config.parse(default_config='config')</code>\u200b\u6765\u200b\u6b63\u786e\u200b\u8bfb\u53d6\u200b\u9ed8\u8ba4\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002</p> Bash<pre><code>python main.py --config meow.yaml --model.encoder.num_layers 8 --model.dropout=0.2 --lr 5e-3\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4fdd\u5b58\u200b\u4e86\u200b\u914d\u7f6e\u6587\u4ef6\u200b\uff0c\u200b\u90a3\u200b\u4ed6\u200b\u5e94\u8be5\u200b\u770b\u8d77\u6765\u200b\u50cf\u200b\u8fd9\u6837\u200b\uff1a</p> yamljson YAML<pre><code>activation: GELU\ndataloader:\n  batch_size: 64\n  num_workers: 4\n  pin_memory: true\nid: CHANfiG_1016\nmodel:\n  decoder:\n    dropout: 0.1\n    num_layers: 8\n  dropout: 0.1\n  encoder:\n    dropout: 0.1\n    num_layers: 8\nname: CHANfiG\noptim:\n  lr: 0.001\nseed: 1016\n</code></pre> JSON<pre><code>{\n  \"name\": \"CHANfiG\",\n  \"seed\": 1016,\n  \"activation\": \"GELU\",\n  \"optim\": {\n    \"lr\": 0.001\n  },\n  \"dataloader\": {\n    \"batch_size\": 64,\n    \"num_workers\": 4,\n    \"pin_memory\": true\n  },\n  \"model\": {\n    \"encoder\": {\n      \"num_layers\": 8,\n      \"dropout\": 0.1\n    },\n    \"decoder\": {\n      \"num_layers\": 8,\n      \"dropout\": 0.1\n    },\n    \"dropout\": 0.1\n  },\n  \"id\": \"CHANfiG_1016\"\n}\n</code></pre> <p>\u200b\u5728\u200b\u65b9\u6cd5\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u9ed8\u8ba4\u200b\u53c2\u6570\u200b\uff0c\u200b\u5728\u200b\u547d\u4ee4\u884c\u200b\u4e2d\u200b\u4fee\u6539\u200b\uff0c\u200b\u7136\u540e\u200b\u5c06\u200b\u5269\u4e0b\u200b\u7684\u200b\u4ea4\u7ed9\u200b CHANfiG\u3002</p>"},{"location":"zh/#_7","title":"\u5b89\u88c5","text":"\u5b89\u88c5\u200b pypi \u200b\u4e0a\u200b\u6700\u8fd1\u200b\u7684\u200b\u7a33\u5b9a\u200b\u7248\u672c\u200b\u4ece\u200b\u6e90\u7801\u200b\u5b89\u88c5\u200b\u6700\u65b0\u200b\u7684\u200b\u7248\u672c\u200b Bash<pre><code>pip install chanfig\n</code></pre> Bash<pre><code>pip install git+https://github.com/ZhiyuanChen/CHANfiG\n</code></pre> <p>\u200b\u4ed6\u200b\u672c\u8be5\u5982\u6b64\u200b\u5de5\u4f5c\u200b\u3002</p>"},{"location":"zh/#_8","title":"\u6388\u6743","text":"<p>CHANfiG \u200b\u4f9d\u636e\u200b\u4e0b\u5217\u200b\u8bb8\u53ef\u8bc1\u200b\u8fdb\u884c\u200b\u591a\u91cd\u200b\u6388\u6743\u200b\uff1a</p> The UnlicenseGNU Affero General Public License v3.0 or laterGNU General Public License v2.0 or laterBSD 4-Clause \u201cOriginal\u201d or \u201cOld\u201d LicenseMIT LicenseApache License 2.0 Text Only<pre><code>This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to &lt;https://unlicense.org&gt;\n</code></pre> Text Only<pre><code>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> Text Only<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  &lt;signature of Ty Coon&gt;, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n</code></pre> Text Only<pre><code>BSD 4-Clause License\n\nCopyright (c) 2022-Present, CHANfiG Contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\n3. All advertising materials mentioning features or use of this software must\n   display the following acknowledgement:\n     This product includes software developed by [project].\n\n4. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY COPYRIGHT HOLDER \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\nEVENT SHALL COPYRIGHT HOLDER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\nOR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\nWHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\nOTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre> Text Only<pre><code>MIT License\n\nCopyright (c) 2022-Present, CHANfiG Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> Text Only<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4f7f\u7528\u200b\u672c\u200b\u5de5\u4f5c\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4ece\u4e2d\u200b\u4efb\u9009\u200b\uff08\u200b\u4e00\u4e2a\u200b\u6216\u8005\u200b\u591a\u4e2a\u200b\uff09\u200b\u8bb8\u53ef\u8bc1\u200b\u3002</p> <p><code>SPDX-License-Identifier: Unlicense OR AGPL-3.0-or-later OR GPL-2.0-or-later OR BSD-4-Clause OR MIT OR Apache-2.0</code></p>"},{"location":"zh/about/","title":"\u5173\u4e8e","text":"<p>\u200b\u7531\u4e39\u7075\u200b\u5728\u200b\u5730\u7403\u200b\u5f00\u53d1\u200b</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u79d1\u5b66\u5bb6\u200b\u3001\u200b\u7814\u7a76\u5458\u200b\u3001\u200b\u5de5\u7a0b\u5e08\u200b\u548c\u200b\u5176\u4ed6\u200b\u4eba\u5458\u200b\u7ec4\u6210\u200b\u7684\u200b\u793e\u533a\u200b\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u8ba9\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u6280\u672f\u200b\u66f4\u52a0\u200b\u5f00\u653e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u4e2a\u4f53\u200b\u7ec4\u6210\u200b\u7684\u200b\u793e\u533a\u200b\uff0c\u200b\u81f4\u529b\u4e8e\u200b\u63a8\u52a8\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\u8fb9\u754c\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5bf9\u200b\u6df1\u5ea6\u200b\u5b66\u4e60\u200b\u53ca\u5176\u200b\u7528\u6237\u200b\u5145\u6ee1\u200b\u6fc0\u60c5\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u662f\u200b\u4e39\u7075\u200b\u3002</p>"},{"location":"zh/about/license/","title":"License","text":"<p>\u200b\u7ffb\u8bd1\u200b</p> <p>\u200b\u672c\u6587\u200b\u5185\u5bb9\u200b\u4e3a\u200b\u7ffb\u8bd1\u200b\u7248\u672c\u200b\uff0c\u200b\u65e8\u5728\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u65b9\u4fbf\u200b\u3002 \u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c3d\u529b\u200b\u786e\u4fdd\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002 \u200b\u4f46\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u5185\u5bb9\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u9519\u8bef\u200b\uff0c\u200b\u4ec5\u4f9b\u53c2\u8003\u200b\u3002 \u200b\u8bf7\u4ee5\u200b\u82f1\u6587\u200b\u539f\u6587\u200b\u4e3a\u51c6\u200b\u3002</p> <p>\u200b\u4e3a\u200b\u6ee1\u8db3\u200b\u5408\u89c4\u6027\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u8981\u6c42\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u6587\u6863\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u6b67\u4e49\u200b\u4e4b\u5904\u200b\u5747\u200b\u4e0d\u200b\u5177\u6709\u200b\u7ea6\u675f\u529b\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5177\u5907\u200b\u6cd5\u5f8b\u6548\u529b\u200b\u3002</p>"},{"location":"zh/about/license/#gnu-affero","title":"GNU AFFERO \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1","text":"<p>\u200b\u7b2c\u200b3\u200b\u7248\u200b\uff0c2007\u200b\u5e74\u200b11\u200b\u6708\u200b19\u200b\u65e5\u200b</p> <p>\u200b\u7248\u6743\u6240\u6709\u200b \u00a9 2007 Free Software Foundation, Inc. https://fsf.org/</p> <p>Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.</p> <p>\u200b\u6bcf\u4e2a\u200b\u4eba\u200b\u90fd\u200b\u88ab\u200b\u5141\u8bb8\u200b\u590d\u5236\u200b\u548c\u200b\u5206\u53d1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6587\u4ef6\u200b\u7684\u200b\u9010\u5b57\u200b\u526f\u672c\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u8fdb\u884c\u200b\u66f4\u6539\u200b\u3002</p>"},{"location":"zh/about/license/#_1","title":"\u5e8f\u8a00","text":"<p>GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u662f\u200b\u4e00\u4e2a\u200b\u81ea\u7531\u200b\u7684\u200b\u3001\u200b\u5141\u8bb8\u200b\u590d\u5236\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u548c\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5728\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u8f6f\u4ef6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5b83\u200b\u662f\u200b\u4e13\u95e8\u200b\u4e3a\u200b\u786e\u4fdd\u200b\u4e0e\u200b\u793e\u533a\u200b\u5408\u4f5c\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u3002</p> <p>\u200b\u5927\u591a\u6570\u200b\u8f6f\u4ef6\u200b\u548c\u200b\u5176\u4ed6\u200b\u5b9e\u7528\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bb8\u53ef\u200b\u90fd\u200b\u662f\u200b\u4e3a\u4e86\u200b\u5265\u593a\u200b\u60a8\u200b\u5206\u4eab\u200b\u548c\u200b\u6539\u53d8\u200b\u4f5c\u54c1\u200b\u7684\u200b\u81ea\u7531\u200b\u3002\u200b\u76f8\u6bd4\u4e4b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u7684\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u4fdd\u8bc1\u200b\u60a8\u200b\u5206\u4eab\u200b\u548c\u200b\u6539\u53d8\u200b\u4e00\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6240\u6709\u200b\u7248\u672c\u200b\u7684\u200b\u81ea\u7531\u200b\u2013\u200b\u786e\u4fdd\u200b\u5b83\u200b\u5bf9\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u90fd\u200b\u662f\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u3002</p> <p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u8c08\u8bba\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u6307\u200b\u7684\u200b\u662f\u200b\u81ea\u7531\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u4ef7\u683c\u200b\u3002\u200b\u6211\u4eec\u200b\u7684\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u8bbe\u8ba1\u200b\u662f\u200b\u4e3a\u4e86\u200b\u786e\u4fdd\u60a8\u200b\u6709\u200b\u5206\u53d1\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u526f\u672c\u200b\u7684\u200b\u81ea\u7531\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u613f\u610f\u200b\uff0c\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u6536\u8d39\u200b\uff09\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6536\u5230\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u6216\u8005\u200b\u5982\u679c\u200b\u60a8\u200b\u60f3\u5f97\u5230\u200b\u5b83\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6539\u53d8\u200b\u8f6f\u4ef6\u200b\u6216\u200b\u5728\u200b\u65b0\u200b\u7684\u200b\u81ea\u7531\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5b83\u200b\u7684\u200b\u7247\u6bb5\u200b\uff0c\u200b\u800c\u4e14\u200b\u60a8\u200b\u77e5\u9053\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u505a\u200b\u8fd9\u4e9b\u200b\u4e8b\u60c5\u200b\u3002</p> <p>\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u901a\u8fc7\u200b\u4e24\u4e2a\u200b\u6b65\u9aa4\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u3002(1)\u200b\u4e3b\u5f20\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u7248\u6743\u200b\uff0c(2)\u200b\u5411\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u5141\u8bb8\u200b\u60a8\u200b\u5408\u6cd5\u200b\u5730\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\u548c\u200b/\u200b\u6216\u200b\u4fee\u6539\u200b\u8be5\u8f6f\u4ef6\u200b\u3002</p> <p>\u200b\u634d\u536b\u200b\u6240\u6709\u200b\u7528\u6237\u200b\u81ea\u7531\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6b21\u8981\u200b\u597d\u5904\u200b\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u66ff\u4ee3\u200b\u7248\u672c\u200b\u5f97\u5230\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u4f9b\u200b\u5176\u4ed6\u200b\u5f00\u53d1\u8005\u200b\u4f7f\u7528\u200b\u3002\u200b\u8bb8\u591a\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u5bf9\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u5408\u4f5c\u200b\u611f\u5230\u200b\u632f\u594b\u200b\u548c\u200b\u9f13\u821e\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u5728\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u4f7f\u7528\u200b\u7684\u200b\u8f6f\u4ef6\u200b\uff0c\u200b\u8fd9\u79cd\u200b\u7ed3\u679c\u200b\u53ef\u80fd\u200b\u65e0\u6cd5\u200b\u5b9e\u73b0\u200b\u3002GNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u5141\u8bb8\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u8ba9\u200b\u516c\u4f17\u200b\u5728\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u8bbf\u95ee\u200b\u5b83\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5411\u200b\u516c\u4f17\u200b\u53d1\u5e03\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u3002</p> <p>GNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u662f\u200b\u4e13\u95e8\u200b\u8bbe\u8ba1\u200b\u6765\u200b\u786e\u4fdd\u200b\u5728\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u793e\u533a\u200b\u4f7f\u7528\u200b\u3002\u200b\u5b83\u200b\u8981\u6c42\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u8fd0\u8425\u5546\u200b\u5411\u200b\u8be5\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u8fd0\u884c\u200b\u5728\u200b\u90a3\u91cc\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e2a\u200b\u53ef\u200b\u516c\u5f00\u200b\u8bbf\u95ee\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u516c\u5f00\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\uff0c\u200b\u4f7f\u200b\u516c\u4f17\u200b\u80fd\u591f\u200b\u83b7\u5f97\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u7248\u672c\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002</p> <p>\u200b\u4e00\u4e2a\u200b\u8f83\u200b\u65e9\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u79f0\u4e3a\u200bAffero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u7531\u200bAffero\u200b\u53d1\u5e03\u200b\uff0c\u200b\u65e8\u5728\u200b\u5b9e\u73b0\u200b\u7c7b\u4f3c\u200b\u76ee\u6807\u200b\u3002\u200b\u8fd9\u662f\u200b\u4e00\u4e2a\u200b\u4e0d\u540c\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u4e0d\u662f\u200bAffero GPL\u200b\u7684\u200b\u4e00\u4e2a\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u200bAffero\u200b\u5df2\u7ecf\u200b\u53d1\u5e03\u200b\u4e86\u200bAffero GPL\u200b\u7684\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7248\u672c\u200b\uff0c\u200b\u5141\u8bb8\u200b\u5728\u200b\u8fd9\u4e2a\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u91cd\u65b0\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5173\u4e8e\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\u548c\u200b\u4fee\u6539\u200b\u7684\u200b\u786e\u5207\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b\u5982\u4e0b\u200b\u3002</p>"},{"location":"zh/about/license/#_2","title":"\u6761\u6b3e\u200b\u4e0e\u200b\u6761\u4ef6","text":""},{"location":"zh/about/license/#0","title":"0. \u200b\u5b9a\u4e49\u200b.","text":"<p>\u201c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u201d \u200b\u662f\u200b\u6307\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7b2c\u4e09\u7248\u200b\u3002 \u201c\u200b\u7248\u6743\u200b\u201d \u200b\u4e5f\u200b\u6307\u200b\u9002\u7528\u200b\u4e8e\u200b\u5176\u4ed6\u200b\u7c7b\u578b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u7248\u6743\u200b\u7684\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u5982\u200b\u534a\u5bfc\u4f53\u200b\u63a9\u6a21\u200b\u3002</p> <p>\u201c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u8bb8\u53ef\u200b\u7684\u200b\u4efb\u4f55\u200b\u6709\u200b\u7248\u6743\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u6bcf\u4e2a\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u90fd\u200b\u88ab\u200b\u79f0\u547c\u200b\u4e3a\u200b \u201c\u200b\u60a8\u200b\u201d\u3002\u201d\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u201d \u200b\u548c\u200b \u201c\u200b\u63a5\u53d7\u8005\u200b\u201d \u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e2a\u4eba\u200b\u6216\u200b\u7ec4\u7ec7\u200b\u3002</p> <p>\u201c\u200b\u4fee\u6539\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u4ee5\u200b\u9700\u8981\u200b\u7248\u6743\u200b\u8bb8\u53ef\u200b\u7684\u200b\u65b9\u5f0f\u200b\u590d\u5236\u200b\u6216\u200b\u6539\u7f16\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5168\u90e8\u200b\u6216\u200b\u90e8\u5206\u200b\u5185\u5bb9\u200b\uff0c\u200b\u800c\u200b\u4e0d\u662f\u200b\u5236\u4f5c\u200b\u4e00\u4e2a\u200b\u5b8c\u5168\u200b\u7684\u200b\u526f\u672c\u200b\u3002\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u65e9\u671f\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u4fee\u6539\u7248\u200b\u201d \u200b\u6216\u200b \u201c\u200b\u57fa\u4e8e\u200b\u201d \u200b\u65e9\u671f\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002 \u200b\u4e00\u4e2a\u200b \u201c\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u57fa\u4e8e\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002</p> <p>\u201c\u200b\u4f20\u64ad\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u200b\u5728\u200b\u672a\u7ecf\u8bb8\u53ef\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u505a\u200b\u4efb\u4f55\u200b\u4e8b\u60c5\u200b\uff0c\u200b\u4f7f\u200b\u60a8\u200b\u5728\u200b\u9002\u7528\u200b\u7684\u200b\u7248\u6743\u6cd5\u200b\u4e0b\u200b\u627f\u62c5\u200b\u76f4\u63a5\u200b\u6216\u200b\u95f4\u63a5\u200b\u7684\u200b\u4fb5\u6743\u200b\u8d23\u4efb\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u8ba1\u7b97\u673a\u200b\u4e0a\u200b\u6267\u884c\u200b\u6216\u200b\u4fee\u6539\u200b\u79c1\u4eba\u200b\u526f\u672c\u200b\u9664\u5916\u200b\u3002\u200b\u4f20\u64ad\u200b\u5305\u62ec\u200b\u590d\u5236\u200b\u3001\u200b\u5206\u53d1\u200b\uff08\u200b\u65e0\u8bba\u200b\u662f\u5426\u200b\u4fee\u6539\u200b\uff09\u3001\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\uff0c\u200b\u5728\u200b\u4e00\u4e9b\u200b\u56fd\u5bb6\u200b\u8fd8\u200b\u5305\u62ec\u200b\u5176\u4ed6\u200b\u6d3b\u52a8\u200b\u3002 \u200b\u4f20\u64ad\u200b\u201d \u200b\u4f5c\u54c1\u200b\u662f\u200b\u6307\u4f7f\u200b\u5176\u4ed6\u200b\u5404\u65b9\u200b\u80fd\u591f\u200b\u5236\u4f5c\u200b\u6216\u200b\u63a5\u53d7\u200b\u526f\u672c\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u4f20\u64ad\u200b\u3002\u200b\u4ec5\u4ec5\u200b\u662f\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u4e0e\u200b\u7528\u6237\u200b\u4e92\u52a8\u200b\uff0c\u200b\u800c\u200b\u6ca1\u6709\u200b\u8f6c\u8ba9\u200b\u526f\u672c\u200b\uff0c\u200b\u5e76\u200b\u4e0d\u662f\u200b\u4f20\u64ad\u200b\u3002</p> <p>\u200b\u4ea4\u4e92\u5f0f\u200b\u7528\u6237\u754c\u9762\u200b\u663e\u793a\u200b \u201c\u200b\u9002\u5f53\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u201d \u200b\u7684\u200b\u7a0b\u5ea6\u200b\u662f\u200b\uff0c\u200b\u5b83\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u65b9\u4fbf\u200b\u548c\u200b\u663e\u773c\u200b\u7684\u200b\u529f\u80fd\u200b\uff0c(1)\u200b\u663e\u793a\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u58f0\u660e\u200b\uff0c(2)\u200b\u544a\u8bc9\u200b\u7528\u6237\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u6ca1\u6709\u200b\u4fdd\u8bc1\u200b\uff08\u200b\u9664\u4e86\u200b\u63d0\u4f9b\u200b\u4fdd\u8bc1\u200b\u7684\u200b\u8303\u56f4\u200b\uff09\uff0c\u200b\u88ab\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u200b\u4f20\u8fbe\u200b\u8be5\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u67e5\u770b\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u526f\u672c\u200b\u3002\u200b\u5982\u679c\u200b\u754c\u9762\u200b\u5448\u73b0\u200b\u7684\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7528\u6237\u200b\u547d\u4ee4\u200b\u6216\u200b\u9009\u9879\u200b\u7684\u200b\u5217\u8868\u200b\uff0c\u200b\u5982\u200b\u83dc\u5355\u200b\uff0c\u200b\u90a3\u4e48\u200b\u5217\u8868\u200b\u4e2d\u200b\u7684\u200b\u7a81\u51fa\u200b\u9879\u76ee\u200b\u5c31\u200b\u7b26\u5408\u200b\u8fd9\u4e00\u200b\u6807\u51c6\u200b\u3002</p>"},{"location":"zh/about/license/#1","title":"1. \u200b\u6e90\u4ee3\u7801\u200b.","text":"<p>\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\u7684\u200b\u9996\u9009\u200b\u5f62\u5f0f\u200b\u3002\u201d\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4efb\u4f55\u200b\u975e\u200b\u6e90\u7801\u200b\u5f62\u5f0f\u200b\u3002</p> <p>\u201c\u200b\u6807\u51c6\u63a5\u53e3\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u7531\u200b\u516c\u8ba4\u200b\u7684\u200b\u6807\u51c6\u200b\u673a\u6784\u200b\u5b9a\u4e49\u200b\u7684\u200b\u5b98\u65b9\u200b\u6807\u51c6\u200b\u7684\u200b\u63a5\u53e3\u200b\uff0c\u200b\u6216\u8005\u200b\u5728\u200b\u4e3a\u200b\u67d0\u200b\u4e00\u200b\u7279\u5b9a\u200b\u7f16\u7a0b\u8bed\u8a00\u200b\u6307\u5b9a\u200b\u63a5\u53e3\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6307\u5728\u200b\u4f7f\u7528\u200b\u8be5\u200b\u8bed\u8a00\u200b\u7684\u200b\u5f00\u53d1\u8005\u200b\u4e2d\u200b\u5e7f\u6cdb\u200b\u4f7f\u7528\u200b\u7684\u200b\u63a5\u53e3\u200b\u3002</p> <p>\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u7cfb\u7edf\u200b\u5e93\u200b\u201d \u200b\u5305\u62ec\u200b\u9664\u200b\u4f5c\u54c1\u200b\u6574\u4f53\u200b\u4ee5\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u4e1c\u897f\u200b(a)\u200b\u4ee5\u200b\u6b63\u5e38\u200b\u7684\u200b\u5f62\u5f0f\u200b\u6253\u5305\u200b\u4e00\u4e2a\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u662f\u200b\u8be5\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u4ee5\u53ca\u200b(b)\u200b\u4ec5\u200b\u7528\u4e8e\u200b\u4f7f\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u8be5\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u5b9e\u73b0\u200b\u4e00\u4e2a\u200b\u6807\u51c6\u63a5\u53e3\u200b\uff0c\u200b\u8be5\u200b\u63a5\u53e3\u200b\u7684\u200b\u5b9e\u73b0\u200b\u5df2\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\u3002\u200b\u8fd9\u91cc\u200b\u7684\u200b \u201c\u200b\u4e3b\u8981\u200b\u90e8\u4ef6\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\u6240\u200b\u8fd0\u884c\u200b\u7684\u200b\u7279\u5b9a\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\u7684\u8bdd\u200b\uff09\u200b\u7684\u200b\u4e3b\u8981\u200b\u57fa\u672c\u200b\u90e8\u4ef6\u200b\uff08\u200b\u5185\u6838\u200b\u3001\u200b\u7a97\u53e3\u200b\u7cfb\u7edf\u200b\u7b49\u200b\uff09\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u5236\u4f5c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7f16\u8bd1\u5668\u200b\uff0c\u200b\u6216\u200b\u7528\u4e8e\u200b\u8fd0\u884c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u89e3\u91ca\u5668\u200b\u3002</p> <p>\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b \u201c\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u751f\u6210\u200b\u3001\u200b\u5b89\u88c5\u200b\u548c\u200b\uff08\u200b\u5bf9\u4e8e\u200b\u53ef\u200b\u6267\u884c\u200b\u4f5c\u54c1\u200b\uff09\u200b\u8fd0\u884c\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u4ee5\u53ca\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u6240\u6709\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u5305\u62ec\u200b\u63a7\u5236\u200b\u8fd9\u4e9b\u200b\u6d3b\u52a8\u200b\u7684\u200b\u811a\u672c\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5b83\u200b\u4e0d\u200b\u5305\u62ec\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7cfb\u7edf\u200b\u5e93\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5728\u200b\u6267\u884c\u200b\u8fd9\u4e9b\u200b\u6d3b\u52a8\u200b\u65f6\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u4f46\u200b\u4e0d\u200b\u5c5e\u4e8e\u200b\u4f5c\u54c1\u200b\u7684\u200b\u901a\u7528\u200b\u5de5\u5177\u200b\u6216\u200b\u666e\u904d\u200b\u53ef\u7528\u200b\u7684\u200b\u514d\u8d39\u200b\u7a0b\u5e8f\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u76f8\u5e94\u200b\u6e90\u200b\u5305\u62ec\u200b\u4e0e\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\u76f8\u5173\u200b\u7684\u200b\u63a5\u53e3\u5b9a\u4e49\u200b\u6587\u4ef6\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4f5c\u54c1\u200b\u4e13\u95e8\u200b\u8bbe\u8ba1\u200b\u7684\u200b\u5171\u4eab\u200b\u5e93\u200b\u548c\u200b\u52a8\u6001\u200b\u94fe\u63a5\u200b\u7684\u200b\u5b50\u7a0b\u5e8f\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\uff0c\u200b\u4f8b\u5982\u200b\u901a\u8fc7\u200b\u4eb2\u5bc6\u200b\u7684\u200b\u6570\u636e\u901a\u4fe1\u200b\u6216\u200b\u63a7\u5236\u6d41\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u5b50\u7a0b\u5e8f\u200b\u548c\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u4e4b\u95f4\u200b\u3002</p> <p>\u200b\u76f8\u5e94\u200b\u6e90\u200b\u4e0d\u200b\u9700\u8981\u200b\u5305\u62ec\u200b\u7528\u6237\u200b\u53ef\u4ee5\u200b\u4ece\u200b\u76f8\u5e94\u200b\u6e90\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u81ea\u52a8\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\u3002</p> <p>\u200b\u6e90\u4ee3\u7801\u200b\u5f62\u5f0f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u200b\u662f\u200b\u6307\u200b\u540c\u4e00\u200b\u4f5c\u54c1\u200b\u3002</p>"},{"location":"zh/about/license/#2","title":"2. \u200b\u57fa\u672c\u200b\u6743\u9650\u200b.","text":"<p>\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6388\u4e88\u200b\u7684\u200b\u6240\u6709\u200b\u6743\u5229\u200b\u90fd\u200b\u662f\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u7248\u6743\u200b\u671f\u9650\u5185\u200b\u6388\u4e88\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u5728\u200b\u6ee1\u8db3\u200b\u6240\u8ff0\u200b\u6761\u4ef6\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u662f\u200b\u4e0d\u53ef\u200b\u64a4\u6d88\u200b\u7684\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u660e\u786e\u200b\u80af\u5b9a\u200b\u4e86\u200b\u60a8\u200b\u5bf9\u200b\u8fd0\u884c\u200b\u672a\u7ecf\u200b\u4fee\u6539\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u65e0\u9650\u200b\u8bb8\u53ef\u200b\u3002\u200b\u53ea\u6709\u200b\u5728\u200b\u8f93\u51fa\u200b\u7684\u200b\u5185\u5bb9\u200b\u6784\u6210\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u8fd0\u884c\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8f93\u51fa\u200b\u624d\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fdd\u62a4\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u627f\u8ba4\u200b\u60a8\u200b\u7684\u200b\u5408\u7406\u200b\u4f7f\u7528\u6743\u200b\u6216\u200b\u7248\u6743\u6cd5\u200b\u6240\u200b\u89c4\u5b9a\u200b\u7684\u200b\u5176\u4ed6\u200b\u540c\u7b49\u200b\u6743\u5229\u200b\u3002</p> <p>\u200b\u53ea\u8981\u200b\u60a8\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u4ecd\u7136\u200b\u6709\u6548\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u65e0\u6761\u4ef6\u200b\u5730\u200b\u5236\u4f5c\u200b\u3001\u200b\u8fd0\u884c\u200b\u548c\u200b\u4f20\u64ad\u200b\u60a8\u200b\u6ca1\u6709\u200b\u8f6c\u8fbe\u200b\u7684\u200b\u6db5\u76d6\u200b\u4f5c\u54c1\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4f20\u8fbe\u200b\u7ed9\u200b\u5176\u4ed6\u4eba\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u8ba9\u200b\u4ed6\u4eec\u200b\u4e13\u95e8\u200b\u4e3a\u200b\u60a8\u200b\u8fdb\u884c\u200b\u4fee\u6539\u200b\uff0c\u200b\u6216\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u8fd0\u884c\u200b\u8fd9\u4e9b\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8bbe\u65bd\u200b\uff0c\u200b\u524d\u63d0\u200b\u662f\u200b\u60a8\u200b\u5728\u200b\u4f20\u8fbe\u200b\u6240\u6709\u200b\u60a8\u200b\u4e0d\u200b\u63a7\u5236\u200b\u7248\u6743\u200b\u7684\u200b\u6750\u6599\u200b\u65f6\u200b\u9075\u5b88\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u3002\u200b\u90a3\u4e9b\u200b\u4e3a\u200b\u60a8\u200b\u5236\u4f5c\u200b\u6216\u200b\u8fd0\u884c\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4eba\u200b\u5fc5\u987b\u200b\u5b8c\u5168\u200b\u4ee3\u8868\u200b\u60a8\u200b\uff0c\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u6307\u5bfc\u200b\u548c\u200b\u63a7\u5236\u200b\u4e0b\u200b\uff0c\u200b\u6309\u7167\u200b\u7981\u6b62\u200b\u4ed6\u4eec\u200b\u5728\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b\u5173\u7cfb\u200b\u4e4b\u5916\u200b\u5236\u4f5c\u200b\u60a8\u200b\u7684\u200b\u7248\u6743\u200b\u6750\u6599\u200b\u7684\u200b\u4efb\u4f55\u200b\u526f\u672c\u200b\u7684\u200b\u6761\u6b3e\u200b\u6765\u200b\u8fdb\u884c\u200b\u3002</p> <p>\u200b\u5728\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4ec5\u200b\u5728\u200b\u4e0b\u8ff0\u200b\u6761\u4ef6\u200b\u4e0b\u200b\u5141\u8bb8\u200b\u8f6c\u8ba9\u200b\u3002\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u8f6c\u200b\u6388\u6743\u200b\uff1b\u200b\u7b2c\u200b10\u200b\u6761\u200b\u89c4\u5b9a\u200b\u6ca1\u6709\u200b\u5fc5\u8981\u200b\u3002</p>"},{"location":"zh/about/license/#3","title":"3. \u200b\u4ece\u200b\u53cd\u200b\u89c4\u907f\u200b\u6cd5\u4e2d\u200b\u4fdd\u62a4\u200b\u7528\u6237\u200b\u7684\u200b\u5408\u6cd5\u6743\u5229\u200b.","text":"<p>\u200b\u6839\u636e\u200b\u4efb\u4f55\u200b\u5c65\u884c\u200b1996\u200b\u5e74\u200b12\u200b\u6708\u200b20\u200b\u65e5\u200b\u901a\u8fc7\u200b\u7684\u200b\u4e16\u754c\u77e5\u8bc6\u4ea7\u6743\u7ec4\u7ec7\u200b\u7248\u6743\u200b\u6761\u7ea6\u200b\u7b2c\u200b11\u200b\u6761\u200b\u89c4\u5b9a\u200b\u7684\u200b\u4e49\u52a1\u200b\u7684\u200b\u9002\u7528\u6cd5\u5f8b\u200b\uff0c\u200b\u6216\u200b\u7981\u6b62\u200b\u6216\u200b\u9650\u5236\u200b\u89c4\u907f\u200b\u6b64\u7c7b\u200b\u63aa\u65bd\u200b\u7684\u200b\u7c7b\u4f3c\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u4efb\u4f55\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u90fd\u200b\u4e0d\u5f97\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u6709\u6548\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u4f20\u8fbe\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u653e\u5f03\u200b\u4efb\u4f55\u200b\u7981\u6b62\u200b\u89c4\u907f\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u529b\u200b\uff0c\u200b\u53ea\u8981\u200b\u8fd9\u79cd\u200b\u89c4\u907f\u200b\u662f\u200b\u901a\u8fc7\u200b\u5bf9\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\u800c\u200b\u5b9e\u73b0\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5426\u8ba4\u200b\u6709\u200b\u4efb\u4f55\u200b\u9650\u5236\u200b\u64cd\u4f5c\u200b\u6216\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u7684\u200b\u610f\u56fe\u200b\uff0c\u200b\u4ee5\u200b\u4f5c\u4e3a\u200b\u5bf9\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7528\u6237\u200b\u5f3a\u5236\u6267\u884c\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u7981\u6b62\u200b\u89c4\u907f\u200b\u6280\u672f\u200b\u63aa\u65bd\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\u7684\u200b\u624b\u6bb5\u200b\u3002</p>"},{"location":"zh/about/license/#4","title":"4. \u200b\u4f20\u9012\u200b\u9010\u5b57\u200b\u62f7\u8d1d\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u6536\u5230\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u540e\u200b\uff0c\u200b\u4ee5\u200b\u4efb\u4f55\u200b\u5a92\u4ecb\u200b\u4f20\u9012\u200b\u5176\u200b\u9010\u5b57\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u5728\u200b\u6bcf\u4efd\u200b\u62f7\u8d1d\u200b\u4e0a\u200b\u9192\u76ee\u200b\u5730\u200b\u3001\u200b\u9002\u5f53\u200b\u5730\u200b\u53d1\u5e03\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u58f0\u660e\u200b\uff1b\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u8bf4\u660e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u548c\u200b\u6839\u636e\u200b\u7b2c\u200b7\u200b\u6761\u200b\u6dfb\u52a0\u200b\u7684\u200b\u4efb\u4f55\u200b\u975e\u200b\u8bb8\u53ef\u200b\u6761\u6b3e\u200b\u9002\u7528\u200b\u4e8e\u200b\u4ee3\u7801\u200b\u7684\u200b\u58f0\u660e\u200b\u5b8c\u6574\u65e0\u7f3a\u200b\uff1b\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u5173\u4e8e\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\u7684\u200b\u58f0\u660e\u200b\u5b8c\u6574\u65e0\u7f3a\u200b\uff1b\u200b\u5e76\u200b\u5c06\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u62f7\u8d1d\u200b\u4e0e\u200b\u7a0b\u5e8f\u200b\u4e00\u8d77\u200b\u4ea4\u7ed9\u200b\u6240\u6709\u200b\u63a5\u6536\u8005\u200b\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5bf9\u200b\u6bcf\u4efd\u200b\u62f7\u8d1d\u200b\u6536\u53d6\u200b\u4efb\u4f55\u200b\u8d39\u7528\u200b\uff0c\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u6536\u53d6\u200b\u4efb\u4f55\u200b\u8d39\u7528\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u63d0\u4f9b\u200b\u6709\u507f\u200b\u7684\u200b\u652f\u6301\u200b\u6216\u200b\u4fdd\u4fee\u200b\u4fdd\u62a4\u200b\u3002</p>"},{"location":"zh/about/license/#5","title":"5. \u200b\u4f20\u9012\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u6e90\u200b\u7248\u672c\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u7b2c\u200b 4 \u200b\u8282\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u8fbe\u200b\u57fa\u4e8e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u6216\u200b\u6839\u636e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4fee\u6539\u200b\u800c\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u6ee1\u8db3\u200b\u4ee5\u4e0b\u200b\u6240\u6709\u200b\u6761\u4ef6\u200b:</p> <p>a) \u200b\u4f5c\u54c1\u200b\u5fc5\u987b\u200b\u6709\u200b\u9192\u76ee\u200b\u7684\u200b\u58f0\u660e\u200b\uff0c\u200b\u8bf4\u660e\u200b\u60a8\u200b\u4fee\u6539\u200b\u4e86\u200b\u5b83\u200b\uff0c\u200b\u5e76\u200b\u7ed9\u51fa\u200b\u76f8\u5173\u200b\u7684\u200b\u65e5\u671f\u200b\u3002 b) \u200b\u4f5c\u54c1\u200b\u5fc5\u987b\u200b\u6709\u200b\u9192\u76ee\u200b\u7684\u200b\u58f0\u660e\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u200b\u662f\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u548c\u200b\u6839\u636e\u200b\u7b2c\u200b7\u200b\u6761\u200b\u589e\u52a0\u200b\u7684\u200b\u6761\u4ef6\u200b\u53d1\u5e03\u200b\u7684\u200b\u3002\u200b\u8fd9\u4e00\u200b\u8981\u6c42\u200b\u4fee\u6539\u200b\u4e86\u200b\u7b2c\u200b4\u200b\u8282\u4e2d\u200b \u201c\u200b\u4fdd\u6301\u200b\u6240\u6709\u200b\u901a\u77e5\u200b\u7684\u200b\u5b8c\u6574\u6027\u200b\u201d \u200b\u7684\u200b\u8981\u6c42\u200b\u3002 c) \u200b\u60a8\u200b\u5fc5\u987b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u6574\u4e2a\u200b\u4f5c\u54c1\u200b\u4f5c\u4e3a\u200b\u4e00\u4e2a\u200b\u6574\u4f53\u200b\u8bb8\u53ef\u200b\u7ed9\u200b\u4efb\u4f55\u200b\u62e5\u6709\u200b\u5176\u200b\u526f\u672c\u200b\u7684\u200b\u4eba\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u9002\u7528\u200b\u7684\u200b\u7b2c\u200b7\u200b\u6761\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\u4e00\u8d77\u200b\uff0c\u200b\u9002\u7528\u200b\u4e8e\u200b\u6574\u4e2a\u200b\u4f5c\u54c1\u200b\u53ca\u5176\u200b\u6240\u6709\u200b\u90e8\u5206\u200b\uff0c\u200b\u65e0\u8bba\u200b\u5b83\u4eec\u200b\u662f\u200b\u5982\u4f55\u200b\u5305\u88c5\u200b\u7684\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0d\u200b\u5141\u8bb8\u200b\u4ee5\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8bb8\u53ef\u200b\u8be5\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u7ecf\u200b\u5355\u72ec\u200b\u6536\u5230\u200b\u4e86\u200b\u8fd9\u79cd\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5b83\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u4f7f\u200b\u8fd9\u79cd\u200b\u8bb8\u53ef\u200b\u5931\u6548\u200b\u3002 \u200b\u5982\u679c\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u5176\u4ed6\u200b\u5355\u72ec\u200b\u548c\u200b\u72ec\u7acb\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6c47\u7f16\u200b\uff0c\u200b\u5176\u200b\u6027\u8d28\u200b\u4e0d\u662f\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5ef6\u4f38\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6ca1\u6709\u200b\u4e0e\u200b\u4e4b\u200b\u7ed3\u5408\u200b\u4ee5\u200b\u5f62\u6210\u200b\u66f4\u5927\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5728\u200b\u5b58\u50a8\u200b\u6216\u200b\u5206\u53d1\u200b\u5a92\u4ecb\u200b\u7684\u200b\u67d0\u200b\u4e00\u5377\u200b\u4e0a\u200b\uff0c\u200b\u5982\u679c\u200b\u8be5\u200b\u6c47\u7f16\u200b\u53ca\u5176\u200b\u4ea7\u751f\u200b\u7684\u200b\u7248\u6743\u200b\u6ca1\u6709\u200b\u88ab\u200b\u7528\u6765\u200b\u9650\u5236\u200b\u6c47\u7f16\u200b\u7528\u6237\u200b\u7684\u200b\u8bbf\u95ee\u200b\u6216\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\uff0c\u200b\u8d85\u51fa\u200b\u5355\u4e2a\u200b\u4f5c\u54c1\u200b\u5141\u8bb8\u200b\u7684\u200b\u8303\u56f4\u200b\uff0c\u200b\u5219\u200b\u88ab\u200b\u79f0\u4e3a\u200b \u201c\u200b\u805a\u5408\u200b\u201d\u3002\u200b\u5c06\u200b\u4e00\u4e2a\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u5305\u542b\u200b\u5728\u200b\u4e00\u4e2a\u200b\u603b\u4f53\u200b\u4e2d\u200b\u5e76\u200b\u4e0d\u200b\u5bfc\u81f4\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u9002\u7528\u200b\u4e8e\u200b\u603b\u4f53\u200b\u7684\u200b\u5176\u4ed6\u200b\u90e8\u5206\u200b\u3002</p>"},{"location":"zh/about/license/#6","title":"6. \u200b\u4f20\u9012\u200b\u975e\u6e90\u200b\u5f62\u5f0f\u200b.","text":"<p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u7b2c\u200b4\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b5\u200b\u6761\u200b\u7684\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u4ee5\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u4f20\u9012\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u4e5f\u200b\u5fc5\u987b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u4ee5\u200b\u4e0b\u5217\u200b\u65b9\u5f0f\u200b\u4e4b\u4e00\u200b\u4f20\u9012\u200b\u673a\u5668\u200b\u53ef\u8bfb\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b:</p> <p>a) \u200b\u5728\u200b\u5b9e\u4f53\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u4f53\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f20\u9012\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6216\u200b\u4f53\u73b0\u200b\u5728\u200b\u5b9e\u4f53\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u4f53\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\uff0c\u200b\u540c\u65f6\u200b\u5c06\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u56fa\u5b9a\u200b\u5728\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u8f6f\u4ef6\u200b\u4ea4\u6362\u200b\u7684\u200b\u8010\u7528\u200b\u5b9e\u4f53\u200b\u5a92\u4ecb\u200b\u4e0a\u200b\u3002 b) \u200b\u5728\u200b\u5b9e\u7269\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u7269\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f20\u9012\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u6216\u200b\u5728\u200b\u5b9e\u7269\u200b\u4ea7\u54c1\u200b\uff08\u200b\u5305\u62ec\u200b\u5b9e\u7269\u200b\u9500\u552e\u200b\u5a92\u4ecb\u200b\uff09\u200b\u4e2d\u200b\u4f53\u73b0\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u9644\u6709\u200b\u4e00\u4efd\u200b\u81f3\u5c11\u200b\u4e09\u5e74\u200b\u6709\u6548\u200b\u7684\u200b\u4e66\u9762\u200b\u62a5\u4ef7\u200b\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u4e3a\u200b\u8be5\u200b\u4ea7\u54c1\u578b\u53f7\u200b\u63d0\u4f9b\u200b\u5907\u4ef6\u200b\u6216\u200b\u5ba2\u6237\u200b\u652f\u6301\u200b\uff0c\u200b\u5c31\u200b\u4e00\u76f4\u200b\u6709\u6548\u200b\u3002\u200b\u5411\u200b\u4efb\u4f55\u200b\u62e5\u6709\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u4eba\u200b\u63d0\u4f9b\u200b(1)\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6240\u200b\u6db5\u76d6\u200b\u7684\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u6240\u6709\u200b\u8f6f\u4ef6\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u62f7\u8d1d\u200b\uff0c\u200b\u62f7\u8d1d\u200b\u5728\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u8f6f\u4ef6\u200b\u4ea4\u6362\u200b\u7684\u200b\u8010\u7528\u200b\u7269\u7406\u4ecb\u8d28\u200b\u4e0a\u200b\uff0c\u200b\u5176\u200b\u4ef7\u683c\u200b\u4e0d\u200b\u8d85\u8fc7\u200b\u8d35\u65b9\u200b\u5b9e\u9645\u200b\u6267\u884c\u200b\u8fd9\u4e00\u200b\u4f20\u9012\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5408\u7406\u200b\u6210\u672c\u200b\uff0c\u200b\u6216\u8005\u200b(2)\u200b\u4ece\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u514d\u8d39\u200b\u83b7\u53d6\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u62f7\u8d1d\u200b\u3002 c) \u200b\u5c06\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5355\u4e2a\u200b\u526f\u672c\u200b\u4e0e\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u7684\u200b\u4e66\u9762\u200b\u63d0\u8bae\u200b\u7684\u200b\u526f\u672c\u200b\u4e00\u8d77\u200b\u4f20\u9001\u200b\u3002\u200b\u53ea\u6709\u200b\u5728\u200b\u5076\u5c14\u200b\u548c\u200b\u975e\u5546\u4e1a\u6027\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5e76\u4e14\u200b\u53ea\u6709\u200b\u5728\u200b\u60a8\u200b\u6536\u5230\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u548c\u200b\u8fd9\u79cd\u200b\u63d0\u8bae\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u624d\u200b\u5141\u8bb8\u200b\u8fd9\u79cd\u200b\u9009\u62e9\u200b\uff0c\u200b\u7b26\u5408\u200b\u7b2c\u200b6b\u200b\u6b3e\u200b\u7684\u200b\u89c4\u5b9a\u200b\u3002 d) \u200b\u901a\u8fc7\u200b\u63d0\u4f9b\u200b\u4ece\u200b\u6307\u5b9a\u200b\u5730\u70b9\u200b\uff08\u200b\u514d\u8d39\u200b\u6216\u200b\u6536\u8d39\u200b\uff09\u200b\u83b7\u53d6\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u5e76\u200b\u4ee5\u200b\u540c\u6837\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u8fc7\u200b\u540c\u4e00\u200b\u5730\u70b9\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\uff0c\u200b\u800c\u200b\u4e0d\u518d\u200b\u6536\u8d39\u200b\u3002\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u8981\u6c42\u200b\u63a5\u53d7\u8005\u200b\u5728\u200b\u590d\u5236\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u540c\u65f6\u200b\u590d\u5236\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u4ee3\u7801\u200b\u3002\u200b\u5982\u679c\u200b\u590d\u5236\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u5730\u65b9\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\uff0c\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u53ef\u4ee5\u200b\u5728\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u652f\u6301\u200b\u540c\u7b49\u200b\u590d\u5236\u200b\u8bbe\u65bd\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff08\u200b\u7531\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u8fd0\u8425\u200b\uff09\uff0c\u200b\u53ea\u8981\u200b\u60a8\u200b\u5728\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u65c1\u8fb9\u200b\u4fdd\u6301\u200b\u660e\u786e\u200b\u7684\u200b\u6307\u793a\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5728\u200b\u54ea\u91cc\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u3002\u200b\u65e0\u8bba\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u5728\u200b\u54ea\u4e2a\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\uff0c\u200b\u60a8\u200b\u90fd\u200b\u6709\u200b\u4e49\u52a1\u200b\u786e\u4fdd\u200b\u5728\u200b\u6ee1\u8db3\u200b\u8fd9\u4e9b\u200b\u8981\u6c42\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u63d0\u4f9b\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u3002 e) \u200b\u4f7f\u7528\u200b\u70b9\u5bf9\u70b9\u200b\u4f20\u8f93\u200b\u7684\u200b\u65b9\u5f0f\u200b\u4f20\u9001\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u5fc5\u987b\u200b\u544a\u77e5\u200b\u5176\u4ed6\u200b\u540c\u884c\u200b\uff0c\u200b\u6839\u636e\u200b\u7b2c\u200b6d\u200b\u6b3e\u200b\uff0c\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u548c\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u6b63\u5728\u200b\u514d\u8d39\u200b\u63d0\u4f9b\u200b\u7ed9\u200b\u516c\u4f17\u200b\u3002 \u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u53ef\u200b\u5206\u79bb\u200b\u90e8\u5206\u200b\uff0c\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u4f5c\u4e3a\u200b\u7cfb\u7edf\u200b\u5e93\u200b\u88ab\u200b\u6392\u9664\u200b\u5728\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\u4e4b\u5916\u200b\uff0c\u200b\u4e0d\u200b\u9700\u8981\u200b\u5305\u62ec\u200b\u5728\u200b\u4f20\u8fbe\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b \u201c\u200b\u662f\u200b\u6307\u200b(1) \u201c\u200b\u6d88\u8d39\u54c1\u200b\u201d\uff0c\u200b\u5373\u200b\u901a\u5e38\u200b\u7528\u4e8e\u200b\u4e2a\u4eba\u200b\u3001\u200b\u5bb6\u5ead\u200b\u6216\u200b\u5bb6\u5c45\u200b\u7528\u9014\u200b\u7684\u200b\u4efb\u4f55\u200b\u6709\u5f62\u200b\u4e2a\u4eba\u8d22\u4ea7\u200b\uff0c\u200b\u6216\u200b(2)\u200b\u4e3a\u200b\u7eb3\u5165\u200b\u4f4f\u5b85\u200b\u800c\u200b\u8bbe\u8ba1\u200b\u6216\u200b\u51fa\u552e\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e1c\u897f\u200b\u3002\u200b\u5728\u200b\u786e\u5b9a\u200b\u4e00\u4e2a\u200b\u4ea7\u54c1\u200b\u662f\u5426\u662f\u200b\u6d88\u8d39\u54c1\u200b\u65f6\u200b\uff0c\u200b\u6709\u200b\u7591\u95ee\u200b\u7684\u200b\u60c5\u51b5\u200b\u5e94\u200b\u4ee5\u200b\u6709\u5229\u4e8e\u200b\u627f\u4fdd\u200b\u7684\u200b\u65b9\u5f0f\u200b\u89e3\u51b3\u200b\u3002\u200b\u5bf9\u4e8e\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u6536\u5230\u200b\u7684\u200b\u7279\u5b9a\u200b\u4ea7\u54c1\u200b\uff0c\u201d\u200b\u901a\u5e38\u200b\u4f7f\u7528\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u8be5\u7c7b\u200b\u4ea7\u54c1\u200b\u7684\u200b\u5178\u578b\u200b\u6216\u200b\u5e38\u89c1\u200b\u7528\u9014\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u8003\u8651\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u7684\u200b\u5730\u4f4d\u200b\u6216\u200b\u7279\u5b9a\u200b\u7528\u6237\u200b\u5b9e\u9645\u200b\u4f7f\u7528\u200b\u6216\u200b\u671f\u671b\u200b\u6216\u200b\u9884\u671f\u200b\u4f7f\u7528\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u7684\u200b\u65b9\u5f0f\u200b\u3002\u200b\u4e00\u4e2a\u200b\u4ea7\u54c1\u200b\u662f\u200b\u6d88\u8d39\u7c7b\u200b\u4ea7\u54c1\u200b\uff0c\u200b\u65e0\u8bba\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u662f\u5426\u200b\u6709\u200b\u5927\u91cf\u200b\u7684\u200b\u5546\u4e1a\u200b\u3001\u200b\u5de5\u4e1a\u200b\u6216\u975e\u200b\u6d88\u8d39\u7c7b\u200b\u7528\u9014\u200b\uff0c\u200b\u9664\u975e\u200b\u8fd9\u4e9b\u200b\u7528\u9014\u200b\u662f\u200b\u8be5\u200b\u4ea7\u54c1\u200b\u7684\u200b\u552f\u4e00\u200b\u91cd\u8981\u200b\u4f7f\u7528\u200b\u65b9\u5f0f\u200b\u3002</p> <p>\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u7684\u200b \u201c\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u5728\u200b\u8be5\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u4ece\u200b\u5176\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u5b89\u88c5\u200b\u548c\u200b\u6267\u884c\u200b\u6240\u200b\u6db5\u76d6\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u4efb\u4f55\u200b\u65b9\u6cd5\u200b\u3001\u200b\u7a0b\u5e8f\u200b\u3001\u200b\u6388\u6743\u200b\u5bc6\u94a5\u200b\u6216\u200b\u5176\u4ed6\u200b\u4fe1\u606f\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u5fc5\u987b\u200b\u8db3\u4ee5\u200b\u786e\u4fdd\u200b\u5728\u200b\u4efb\u4f55\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u4ec5\u4ec5\u200b\u56e0\u4e3a\u200b\u8fdb\u884c\u200b\u4e86\u200b\u4fee\u6539\u200b\u800c\u200b\u963b\u6b62\u200b\u6216\u200b\u5e72\u6270\u200b\u4fee\u6539\u200b\u540e\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u7ee7\u7eed\u200b\u8fd0\u884c\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\uff0c\u200b\u6216\u200b\u4e0e\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e00\u8d77\u200b\uff0c\u200b\u6216\u200b\u4e13\u95e8\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e2d\u200b\u4f7f\u7528\u200b\uff0c\u200b\u5e76\u200b\u4f5c\u4e3a\u200b\u4ea4\u6613\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5c06\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u7684\u200b\u62e5\u6709\u6743\u200b\u548c\u200b\u4f7f\u7528\u6743\u200b\u6c38\u4e45\u200b\u6216\u200b\u56fa\u5b9a\u200b\u5730\u200b\u8f6c\u8ba9\u200b\u7ed9\u200b\u63a5\u53d7\u8005\u200b\uff08\u200b\u65e0\u8bba\u200b\u4ea4\u6613\u200b\u5982\u4f55\u200b\u5b9a\u6027\u200b\uff09\uff0c\u200b\u6839\u636e\u200b\u672c\u6761\u200b\u89c4\u5b9a\u200b\u8f6c\u8ba9\u200b\u7684\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u5fc5\u987b\u200b\u9644\u6709\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u6216\u200b\u4efb\u4f55\u200b\u7b2c\u4e09\u65b9\u200b\u90fd\u200b\u6ca1\u6709\u200b\u4fdd\u7559\u200b\u5728\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u4e0a\u200b\u5b89\u88c5\u200b\u4fee\u6539\u200b\u8fc7\u200b\u7684\u200b\u76ee\u6807\u200b\u4ee3\u7801\u200b\u7684\u200b\u80fd\u529b\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u4f5c\u54c1\u200b\u5df2\u7ecf\u200b\u5b89\u88c5\u200b\u5728\u200bROM\u200b\u4e2d\u200b\uff09\uff0c\u200b\u5219\u200b\u8be5\u200b\u8981\u6c42\u200b\u4e0d\u200b\u9002\u7528\u200b\u3002</p> <p>\u200b\u63d0\u4f9b\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u7684\u200b\u8981\u6c42\u200b\u4e0d\u200b\u5305\u62ec\u200b\u7ee7\u7eed\u200b\u4e3a\u200b\u88ab\u200b\u63a5\u53d7\u8005\u200b\u4fee\u6539\u200b\u6216\u200b\u5b89\u88c5\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6216\u200b\u88ab\u200b\u4fee\u6539\u200b\u6216\u200b\u5b89\u88c5\u200b\u7684\u200b\u7528\u6237\u200b\u4ea7\u54c1\u200b\u63d0\u4f9b\u200b\u652f\u6301\u200b\u670d\u52a1\u200b\u3001\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u66f4\u65b0\u200b\u7684\u200b\u8981\u6c42\u200b\u3002\u200b\u5f53\u200b\u4fee\u6539\u200b\u672c\u8eab\u200b\u5bf9\u200b\u7f51\u7edc\u200b\u7684\u200b\u8fd0\u884c\u200b\u4ea7\u751f\u200b\u5b9e\u8d28\u6027\u200b\u7684\u200b\u4e0d\u5229\u200b\u5f71\u54cd\u200b\u6216\u200b\u8fdd\u53cd\u200b\u4e86\u200b\u7f51\u7edc\u200b\u4e0a\u200b\u7684\u200b\u901a\u4fe1\u200b\u89c4\u5219\u200b\u548c\u200b\u534f\u8bae\u200b\u65f6\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u62d2\u7edd\u200b\u8bbf\u95ee\u200b\u7f51\u7edc\u200b\u3002 \u200b\u6839\u636e\u200b\u672c\u200b\u8282\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u6240\u200b\u4f20\u8fbe\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u548c\u200b\u6240\u200b\u63d0\u4f9b\u200b\u7684\u200b\u5b89\u88c5\u200b\u4fe1\u606f\u200b\u5fc5\u987b\u200b\u662f\u200b\u516c\u5f00\u200b\u8bb0\u5f55\u200b\u7684\u200b\u683c\u5f0f\u200b\uff08\u200b\u5e76\u200b\u4ee5\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u5f62\u5f0f\u200b\u5411\u200b\u516c\u4f17\u200b\u63d0\u4f9b\u200b\u5b9e\u73b0\u200b\uff09\uff0c\u200b\u5e76\u4e14\u200b\u5fc5\u987b\u200b\u4e0d\u200b\u9700\u8981\u200b\u7279\u6b8a\u200b\u7684\u200b\u5bc6\u7801\u200b\u6216\u200b\u94a5\u5319\u200b\u6765\u200b\u89e3\u5305\u200b\u3001\u200b\u9605\u8bfb\u200b\u6216\u200b\u590d\u5236\u200b\u3002</p>"},{"location":"zh/about/license/#7","title":"7. \u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b.","text":"<p>\u201c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u201d \u200b\u662f\u200b\u5bf9\u200b\u672c\u200b\u8bb8\u53ef\u200b\u6761\u6b3e\u200b\u7684\u200b\u8865\u5145\u200b\uff0c\u200b\u5bf9\u200b\u5176\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b\u6761\u4ef6\u200b\u4f5c\u51fa\u200b\u4f8b\u5916\u200b\u89c4\u5b9a\u200b\u3002\u200b\u9002\u7528\u200b\u4e8e\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u5e94\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u5305\u62ec\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e2d\u200b\uff0c\u200b\u53ea\u8981\u200b\u5b83\u4eec\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u4e0b\u200b\u6709\u6548\u200b\u3002\u200b\u5982\u679c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u53ea\u200b\u9002\u7528\u200b\u4e8e\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5219\u200b\u8be5\u200b\u90e8\u5206\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u8fd9\u4e9b\u200b\u8bb8\u53ef\u200b\u5355\u72ec\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4f46\u200b\u6574\u4e2a\u200b\u7a0b\u5e8f\u200b\u4ecd\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7ba1\u8f96\u200b\uff0c\u200b\u800c\u200b\u4e0d\u200b\u8003\u8651\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8f6c\u9001\u200b\u4e00\u4efd\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u526f\u672c\u200b\u65f6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4ece\u200b\u8be5\u200b\u526f\u672c\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u4e2d\u200b\u5220\u9664\u200b\u4efb\u4f55\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u3002(\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u9644\u52a0\u200b\u8bb8\u53ef\u200b\u53ef\u80fd\u200b\u88ab\u200b\u5199\u6210\u200b\u9700\u8981\u200b\u81ea\u5df1\u200b\u5220\u9664\u200b)\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u60a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u7684\u200b\u6750\u6599\u200b\u4e0a\u200b\u653e\u7f6e\u200b\u989d\u5916\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u8fd9\u4e9b\u200b\u6750\u6599\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u6216\u200b\u53ef\u4ee5\u200b\u7ed9\u4e88\u200b\u9002\u5f53\u200b\u7684\u200b\u7248\u6743\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u5bf9\u4e8e\u200b\u60a8\u200b\u6dfb\u52a0\u200b\u5230\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u7684\u200b\u6750\u6599\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\uff08\u200b\u5982\u679c\u200b\u5f97\u5230\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u7684\u200b\u6388\u6743\u200b\uff09\u200b\u7528\u200b\u4ee5\u4e0b\u200b\u6761\u6b3e\u200b\u8865\u5145\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b:</p> <p>a) \u200b\u4ee5\u200b\u4e0d\u540c\u4e8e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b15\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b16\u200b\u6761\u200b\u7684\u200b\u6761\u6b3e\u200b\u58f0\u660e\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u9650\u5236\u200b\u8d23\u4efb\u200b\uff1b\u200b\u6216\u200b b) \u200b\u8981\u6c42\u200b\u5728\u200b\u8be5\u200b\u6750\u6599\u200b\u6216\u200b\u5305\u542b\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6240\u200b\u663e\u793a\u200b\u7684\u200b\u9002\u5f53\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u4e2d\u200b\u4fdd\u7559\u200b\u7279\u5b9a\u200b\u7684\u200b\u5408\u7406\u200b\u6cd5\u5f8b\u200b\u58f0\u660e\u200b\u6216\u200b\u4f5c\u8005\u200b\u5f52\u5c5e\u200b\uff1b\u200b\u6216\u200b c) \u200b\u7981\u6b62\u200b\u6b6a\u66f2\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u6765\u6e90\u200b\uff0c\u200b\u6216\u200b\u8981\u6c42\u200b\u4ee5\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u5c06\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u6807\u8bb0\u200b\u4e3a\u200b\u4e0e\u200b\u539f\u59cb\u200b\u7248\u672c\u200b\u4e0d\u540c\u200b\uff1b\u200b\u6216\u200b d) \u200b\u9650\u5236\u200b\u4e3a\u200b\u5ba3\u4f20\u200b\u76ee\u7684\u200b\u4f7f\u7528\u200b\u8be5\u200b\u6750\u6599\u200b\u7684\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u6216\u200b\u4f5c\u8005\u200b\u7684\u200b\u59d3\u540d\u200b\uff1b\u200b\u6216\u200b e) \u200b\u62d2\u7edd\u200b\u6839\u636e\u200b\u5546\u6807\u6cd5\u200b\u6388\u4e88\u200b\u4f7f\u7528\u200b\u67d0\u4e9b\u200b\u5546\u53f7\u200b\u3001\u200b\u5546\u6807\u200b\u6216\u200b\u670d\u52a1\u200b\u6807\u5fd7\u200b\u7684\u200b\u6743\u5229\u200b\uff1b\u200b\u6216\u200b f) \u200b\u8981\u6c42\u200b\u5c06\u200b\u6750\u6599\u200b\uff08\u200b\u6216\u200b\u6750\u6599\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\uff09\u200b\u8f6c\u200b\u4ea4\u7ed9\u200b\u63a5\u53d7\u8005\u200b\u7684\u200b\u4efb\u4f55\u4eba\u200b\u5bf9\u200b\u8fd9\u4e9b\u200b\u5408\u540c\u200b\u5047\u8bbe\u200b\u76f4\u63a5\u200b\u52a0\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u548c\u200b\u4f5c\u8005\u200b\u8eab\u4e0a\u200b\u7684\u200b\u4efb\u4f55\u200b\u8d23\u4efb\u200b\u8fdb\u884c\u200b\u8d54\u507f\u200b\u3002 \u200b\u6240\u6709\u200b\u5176\u4ed6\u200b\u975e\u200b\u8bb8\u53ef\u200b\u6027\u200b\u7684\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\u90fd\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u7b2c\u200b10\u200b\u6761\u200b\u610f\u4e49\u200b\u4e0a\u200b\u7684\u200b \u201c\u200b\u8fdb\u4e00\u6b65\u200b\u9650\u5236\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u6536\u5230\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u5305\u542b\u200b\u4e00\u4e2a\u200b\u901a\u77e5\u200b\uff0c\u200b\u8bf4\u660e\u200b\u5b83\u200b\u53d7\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7ba1\u8f96\u200b\uff0c\u200b\u540c\u65f6\u200b\u8fd8\u6709\u200b\u4e00\u4e2a\u200b\u5c5e\u4e8e\u200b\u8fdb\u4e00\u6b65\u200b\u9650\u5236\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5220\u9664\u200b\u8be5\u200b\u6761\u6b3e\u200b\u3002\u200b\u5982\u679c\u200b\u8bb8\u53ef\u200b\u6587\u4ef6\u200b\u5305\u542b\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\uff0c\u200b\u4f46\u200b\u5141\u8bb8\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8fdb\u884c\u200b\u518d\u200b\u8bb8\u53ef\u200b\u6216\u200b\u8f6c\u8ba9\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u5728\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u53d7\u8be5\u200b\u8bb8\u53ef\u200b\u6587\u4ef6\u200b\u6761\u6b3e\u200b\u7ba1\u8f96\u200b\u7684\u200b\u6750\u6599\u200b\uff0c\u200b\u4f46\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\u5728\u200b\u8fd9\u79cd\u200b\u518d\u200b\u8bb8\u53ef\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u4e2d\u200b\u4e0d\u200b\u5b58\u5728\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u6309\u7167\u200b\u672c\u8282\u200b\u7684\u200b\u89c4\u5b9a\u200b\u5411\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u6dfb\u52a0\u200b\u6761\u6b3e\u200b\uff0c\u200b\u60a8\u200b\u5fc5\u987b\u200b\u5728\u200b\u76f8\u5173\u200b\u7684\u200b\u6e90\u6587\u4ef6\u200b\u4e2d\u200b\u58f0\u660e\u200b\u9002\u7528\u200b\u4e8e\u200b\u8fd9\u4e9b\u200b\u6587\u4ef6\u200b\u7684\u200b\u9644\u52a0\u200b\u6761\u6b3e\u200b\uff0c\u200b\u6216\u8005\u200b\u8bf4\u660e\u200b\u5728\u200b\u54ea\u91cc\u200b\u53ef\u4ee5\u200b\u627e\u5230\u200b\u9002\u7528\u200b\u6761\u6b3e\u200b\u3002</p> <p>\u200b\u989d\u5916\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u5141\u8bb8\u200b\u7684\u200b\u8fd8\u200b\u662f\u975e\u200b\u5141\u8bb8\u200b\u7684\u200b\uff0c\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u4ee5\u200b\u5355\u72ec\u200b\u7684\u200b\u4e66\u9762\u200b\u8bb8\u53ef\u200b\u7684\u200b\u5f62\u5f0f\u200b\u8bf4\u660e\u200b\uff0c\u200b\u6216\u8005\u200b\u4f5c\u4e3a\u200b\u4f8b\u5916\u60c5\u51b5\u200b\u8bf4\u660e\u200b\uff1b\u200b\u4e0a\u8ff0\u200b\u8981\u6c42\u200b\u9002\u7528\u200b\u4e8e\u200b\u4efb\u4f55\u200b\u4e00\u79cd\u200b\u65b9\u5f0f\u200b\u3002</p>"},{"location":"zh/about/license/#8","title":"8. \u200b\u7ec8\u6b62\u200b.","text":"<p>\u200b\u9664\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u660e\u786e\u89c4\u5b9a\u200b\u7684\u200b\u60c5\u51b5\u200b\u5916\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u8986\u76d6\u200b\u4f5c\u54c1\u200b\u3002\u200b\u4efb\u4f55\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u4f5c\u54c1\u200b\u7684\u200b\u5c1d\u8bd5\u200b\u90fd\u200b\u662f\u200b\u65e0\u6548\u200b\u7684\u200b\uff0c\u200b\u5e76\u200b\u5c06\u200b\u81ea\u52a8\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\uff08\u200b\u5305\u62ec\u200b\u6839\u636e\u200b\u7b2c\u200b11\u200b\u8282\u200b\u7b2c\u4e09\u6bb5\u200b\u6388\u4e88\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff09\u3002</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u505c\u6b62\u200b\u6240\u6709\u200b\u8fdd\u53cd\u200b\u672c\u200b\u8bb8\u53ef\u200b\u7684\u200b\u884c\u4e3a\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u4ece\u200b\u67d0\u200b\u4e00\u200b\u7279\u5b9a\u200b\u7248\u6743\u200b\u4eba\u5904\u200b\u83b7\u5f97\u200b\u7684\u200b\u8bb8\u53ef\u200b\u5c06\u200b\u88ab\u200b\u6062\u590d\u200b\uff08a\uff09\u200b\u6682\u65f6\u6027\u200b\u7684\u200b\uff0c\u200b\u9664\u975e\u200b\u5e76\u200b\u76f4\u5230\u200b\u7248\u6743\u200b\u4eba\u200b\u660e\u786e\u200b\u5e76\u200b\u6700\u7ec8\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u7684\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u53ca\u200b\uff08b\uff09\u200b\u6c38\u4e45\u6027\u200b\u7684\u200b\uff0c\u200b\u5982\u679c\u200b\u7248\u6743\u200b\u4eba\u200b\u672a\u80fd\u200b\u5728\u200b\u505c\u6b62\u200b\u540e\u200b\u7684\u200b60\u200b\u5929\u200b\u5185\u200b\u901a\u8fc7\u200b\u67d0\u79cd\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u77e5\u200b\u60a8\u200b\u4fb5\u6743\u884c\u4e3a\u200b\u3002</p> <p>\u200b\u6b64\u5916\u200b\uff0c\u200b\u5982\u679c\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u4ee5\u200b\u67d0\u79cd\u200b\u5408\u7406\u200b\u7684\u200b\u65b9\u5f0f\u200b\u901a\u77e5\u200b\u60a8\u200b\u4fb5\u6743\u884c\u4e3a\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u60a8\u200b\u7b2c\u4e00\u6b21\u200b\u6536\u5230\u200b\u8be5\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u8fdd\u53cd\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u901a\u77e5\u200b\uff08\u200b\u9488\u5bf9\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\uff09\uff0c\u200b\u5e76\u4e14\u200b\u60a8\u200b\u5728\u200b\u6536\u5230\u200b\u901a\u77e5\u200b\u540e\u200b30\u200b\u5929\u200b\u5185\u200b\u7ea0\u6b63\u200b\u4e86\u200b\u4fb5\u6743\u884c\u4e3a\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u4ece\u200b\u67d0\u200b\u4e00\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u83b7\u5f97\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u5c06\u200b\u88ab\u200b\u6c38\u4e45\u200b\u6062\u590d\u200b\u3002</p> <p>\u200b\u7ec8\u6b62\u200b\u60a8\u200b\u5728\u200b\u672c\u8282\u200b\u4e0b\u200b\u7684\u200b\u6743\u5229\u200b\u5e76\u200b\u4e0d\u200b\u7ec8\u6b62\u200b\u90a3\u4e9b\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u83b7\u5f97\u200b\u526f\u672c\u200b\u6216\u200b\u6743\u5229\u200b\u7684\u200b\u5404\u65b9\u200b\u7684\u200b\u8bb8\u53ef\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u7ec8\u6b62\u200b\uff0c\u200b\u800c\u4e14\u200b\u6ca1\u6709\u200b\u6c38\u4e45\u200b\u6062\u590d\u200b\uff0c\u200b\u60a8\u200b\u5c31\u200b\u6ca1\u6709\u200b\u8d44\u683c\u200b\u6839\u636e\u200b\u7b2c\u200b10\u200b\u6761\u200b\u83b7\u5f97\u200b\u76f8\u540c\u200b\u6750\u6599\u200b\u7684\u200b\u65b0\u200b\u8bb8\u53ef\u200b\u3002</p>"},{"location":"zh/about/license/#9","title":"9. \u200b\u62e5\u6709\u200b\u526f\u672c\u200b\u4e0d\u200b\u9700\u8981\u200b\u63a5\u53d7\u200b.","text":"<p>\u200b\u60a8\u200b\u4e0d\u200b\u9700\u8981\u200b\u4e3a\u4e86\u200b\u63a5\u6536\u200b\u6216\u200b\u8fd0\u884c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u526f\u672c\u200b\u800c\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u3002\u200b\u4ec5\u4ec5\u200b\u7531\u4e8e\u200b\u4f7f\u7528\u200b\u70b9\u5bf9\u70b9\u200b\u4f20\u8f93\u200b\u6765\u200b\u63a5\u6536\u200b\u62f7\u8d1d\u200b\u800c\u200b\u53d1\u751f\u200b\u7684\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8f85\u52a9\u200b\u4f20\u64ad\u200b\uff0c\u200b\u4e5f\u200b\u540c\u6837\u200b\u4e0d\u200b\u9700\u8981\u200b\u63a5\u53d7\u200b\u3002\u200b\u7136\u800c\u200b\uff0c\u200b\u9664\u4e86\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e4b\u5916\u200b\uff0c\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u4e1c\u897f\u200b\u5141\u8bb8\u200b\u60a8\u200b\u4f20\u64ad\u200b\u6216\u200b\u4fee\u6539\u200b\u4efb\u4f55\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u884c\u4e3a\u200b\u5c31\u200b\u4fb5\u72af\u200b\u4e86\u200b\u7248\u6743\u200b\u3002\u200b\u56e0\u6b64\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u6216\u200b\u4f20\u64ad\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u60a8\u200b\u8868\u660e\u200b\u60a8\u200b\u63a5\u53d7\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u505a\u200b\u3002</p>"},{"location":"zh/about/license/#10","title":"10. \u200b\u4e0b\u6e38\u200b\u63a5\u53d7\u8005\u200b\u7684\u200b\u81ea\u52a8\u200b\u8bb8\u53ef\u200b.","text":"<p>\u200b\u6bcf\u5f53\u200b\u60a8\u200b\u4f20\u9012\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\u65f6\u200b\uff0c\u200b\u63a5\u6536\u8005\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u4ece\u200b\u539f\u59cb\u200b\u8bb8\u53ef\u200b\u4eba\u200b\u90a3\u91cc\u200b\u5f97\u5230\u200b\u4e00\u4e2a\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u5728\u200b\u9075\u5b88\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u524d\u63d0\u200b\u4e0b\u200b\uff0c\u200b\u8fd0\u884c\u200b\u3001\u200b\u4fee\u6539\u200b\u548c\u200b\u4f20\u64ad\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u3002\u200b\u60a8\u200b\u4e0d\u200b\u8d1f\u8d23\u200b\u6267\u884c\u200b\u7b2c\u4e09\u65b9\u200b\u5bf9\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u9075\u5b88\u200b\u3002</p> <p>\u200b\u5b9e\u4f53\u200b\u4ea4\u6613\u200b \u201c\u200b\u662f\u200b\u6307\u200b\u8f6c\u8ba9\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u63a7\u5236\u6743\u200b\uff0c\u200b\u6216\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u5927\u90e8\u5206\u200b\u8d44\u4ea7\u200b\uff0c\u200b\u6216\u200b\u62c6\u5206\u200b\u4e00\u4e2a\u200b\u7ec4\u7ec7\u200b\uff0c\u200b\u6216\u200b\u5408\u5e76\u200b\u7ec4\u7ec7\u200b\u7684\u200b\u4ea4\u6613\u200b\u3002\u200b\u5982\u679c\u200b\u5b9e\u4f53\u200b\u4ea4\u6613\u200b\u5bfc\u81f4\u200b\u8986\u76d6\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4f20\u64ad\u200b\uff0c\u200b\u90a3\u4e48\u200b\u6536\u5230\u200b\u4f5c\u54c1\u200b\u526f\u672c\u200b\u7684\u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u4ea4\u6613\u200b\u65b9\u200b\u4e5f\u200b\u4f1a\u200b\u6536\u5230\u200b\u8be5\u65b9\u200b\u7684\u200b\u6743\u76ca\u200b\u524d\u8eab\u200b\u6839\u636e\u200b\u524d\u6bb5\u200b\u89c4\u5b9a\u200b\u6240\u200b\u62e5\u6709\u200b\u6216\u200b\u53ef\u4ee5\u200b\u7ed9\u4e88\u200b\u7684\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u4ece\u200b\u6743\u76ca\u200b\u524d\u200b\u8eab\u5904\u200b\u83b7\u5f97\u200b\u4f5c\u54c1\u200b\u5bf9\u5e94\u200b\u6e90\u200b\u7684\u200b\u62e5\u6709\u6743\u200b\uff0c\u200b\u5982\u679c\u200b\u6743\u76ca\u200b\u524d\u8eab\u200b\u62e5\u6709\u200b\u6216\u200b\u901a\u8fc7\u200b\u5408\u7406\u200b\u52aa\u529b\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b\u3002</p> <p>\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u5bf9\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u6388\u4e88\u200b\u6216\u200b\u786e\u8ba4\u200b\u7684\u200b\u6743\u5229\u200b\u65bd\u52a0\u200b\u4efb\u4f55\u200b\u8fdb\u4e00\u6b65\u200b\u7684\u200b\u9650\u5236\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u5bf9\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6240\u200b\u6388\u4e88\u200b\u7684\u200b\u6743\u5229\u200b\u5f81\u6536\u200b\u8bb8\u53ef\u8d39\u200b\u3001\u200b\u7279\u8bb8\u6743\u200b\u4f7f\u7528\u8d39\u200b\u6216\u200b\u5176\u4ed6\u8d39\u7528\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u5f97\u200b\u63d0\u8d77\u200b\u8bc9\u8bbc\u200b\uff08\u200b\u5305\u62ec\u200b\u8bc9\u8bbc\u200b\u4e2d\u200b\u7684\u200b\u4ea4\u53c9\u200b\u7d22\u8d54\u200b\u6216\u200b\u53cd\u200b\u7d22\u8d54\u200b\uff09\uff0c\u200b\u6307\u63a7\u200b\u5236\u4f5c\u200b\u3001\u200b\u4f7f\u7528\u200b\u3001\u200b\u9500\u552e\u200b\u3001\u200b\u63d0\u4f9b\u200b\u9500\u552e\u200b\u6216\u200b\u8fdb\u53e3\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6216\u200b\u5176\u200b\u4efb\u4f55\u200b\u90e8\u5206\u200b\u4fb5\u72af\u200b\u4e86\u200b\u4efb\u4f55\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u3002</p>"},{"location":"zh/about/license/#11","title":"11. \u200b\u4e13\u5229\u200b.","text":"<p>\u200b\u8d21\u732e\u8005\u200b \u201c\u200b\u662f\u200b\u6307\u200b\u6388\u6743\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4f7f\u7528\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6216\u672c\u200b\u7a0b\u5e8f\u200b\u6240\u200b\u57fa\u4e8e\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u3002\u200b\u8fd9\u6837\u200b\u6388\u6743\u200b\u7684\u200b\u4f5c\u54c1\u200b\u88ab\u200b\u79f0\u4e3a\u200b\u8d21\u732e\u8005\u200b\u7684\u200b \u201c\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u201d\u3002</p> <p>\u200b\u8d21\u732e\u8005\u200b\u7684\u200b \u201c\u200b\u57fa\u672c\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u8d21\u732e\u8005\u200b\u62e5\u6709\u200b\u6216\u200b\u63a7\u5236\u200b\u7684\u200b\u6240\u6709\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\uff0c\u200b\u4e0d\u7ba1\u200b\u662f\u200b\u5df2\u7ecf\u200b\u83b7\u5f97\u200b\u7684\u200b\u8fd8\u662f\u200b\u4ee5\u540e\u200b\u83b7\u5f97\u200b\u7684\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u5c06\u200b\u88ab\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u5141\u8bb8\u200b\u7684\u200b\u67d0\u79cd\u200b\u65b9\u5f0f\u200b\u6240\u200b\u4fb5\u72af\u200b\uff0c\u200b\u5373\u200b\u5236\u4f5c\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u9500\u552e\u200b\u5176\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\uff0c\u200b\u4f46\u200b\u4e0d\u200b\u5305\u62ec\u200b\u4ec5\u200b\u56e0\u200b\u8fdb\u4e00\u6b65\u200b\u4fee\u6539\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u800c\u200b\u88ab\u200b\u4fb5\u72af\u200b\u7684\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\u3002\u200b\u5c31\u200b\u672c\u200b\u5b9a\u4e49\u200b\u800c\u8a00\u200b\uff0c\u201d\u200b\u63a7\u5236\u200b\u201d \u200b\u5305\u62ec\u200b\u4ee5\u200b\u7b26\u5408\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8981\u6c42\u200b\u7684\u200b\u65b9\u5f0f\u200b\u6388\u4e88\u200b\u4e13\u5229\u200b\u5206\u200b\u8bb8\u53ef\u200b\u7684\u200b\u6743\u5229\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b\u8d21\u732e\u8005\u200b\u6839\u636e\u200b\u8d21\u732e\u8005\u200b\u7684\u200b\u57fa\u672c\u200b\u4e13\u5229\u200b\u6743\u5229\u200b\u8981\u6c42\u200b\uff0c\u200b\u6388\u4e88\u200b\u60a8\u200b\u975e\u200b\u72ec\u5360\u6027\u200b\u7684\u200b\u3001\u200b\u5168\u7403\u6027\u200b\u7684\u200b\u3001\u200b\u514d\u200b\u7248\u7a0e\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u4ee5\u200b\u5236\u9020\u200b\u3001\u200b\u4f7f\u7528\u200b\u3001\u200b\u9500\u552e\u200b\u3001\u200b\u63d0\u4f9b\u200b\u9500\u552e\u200b\u3001\u200b\u8fdb\u53e3\u200b\u548c\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8fd0\u884c\u200b\u3001\u200b\u4fee\u6539\u200b\u548c\u200b\u4f20\u64ad\u200b\u5176\u200b\u8d21\u732e\u8005\u200b\u7248\u672c\u200b\u7684\u200b\u5185\u5bb9\u200b\u3002</p> <p>\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u4e09\u6bb5\u200b\u4e2d\u200b\uff0c\u201d\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u4e0d\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u7684\u200b\u4efb\u4f55\u200b\u660e\u793a\u200b\u534f\u8bae\u200b\u6216\u200b\u627f\u8bfa\u200b\uff0c\u200b\u65e0\u8bba\u200b\u5176\u200b\u540d\u79f0\u200b\u5982\u4f55\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u660e\u786e\u200b\u5141\u8bb8\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u6216\u200b\u4e0d\u200b\u8d77\u8bc9\u200b\u4e13\u5229\u200b\u4fb5\u6743\u200b\u7684\u200b\u7ea6\u5b9a\u200b\uff09\u3002\u200b\u5411\u200b\u4e00\u65b9\u200b \u201c\u200b\u6388\u4e88\u200b\u201d \u200b\u8fd9\u79cd\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u610f\u5473\u7740\u200b\u4f5c\u51fa\u200b\u8fd9\u79cd\u200b\u534f\u8bae\u200b\u6216\u200b\u627f\u8bfa\u200b\uff0c\u200b\u4e0d\u200b\u5bf9\u200b\u8be5\u65b9\u200b\u5b9e\u65bd\u200b\u4e13\u5229\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5728\u200b\u77e5\u60c5\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u4f9d\u9760\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u4f20\u9012\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u6db5\u76d6\u200b\u7684\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u800c\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u5e76\u200b\u6ca1\u6709\u200b\u901a\u8fc7\u200b\u516c\u5f00\u200b\u7684\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u6216\u200b\u5176\u4ed6\u200b\u5bb9\u6613\u200b\u83b7\u5f97\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4f9b\u200b\u4efb\u4f55\u4eba\u200b\u6839\u636e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u514d\u8d39\u200b\u590d\u5236\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u5fc5\u987b\u200b(1)\u200b\u4f7f\u200b\u76f8\u5e94\u200b\u6765\u6e90\u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b\uff0c\u200b\u6216\u8005\u200b(2)\u200b\u5b89\u6392\u200b\u5265\u593a\u200b\u81ea\u5df1\u200b\u5bf9\u200b\u8be5\u200b\u7279\u5b9a\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u5229\u76ca\u200b\uff0c\u200b\u6216\u8005\u200b(3)\u200b\u4ee5\u200b\u7b26\u5408\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u8981\u6c42\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u5b89\u6392\u200b\u5c06\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u6269\u5c55\u200b\u5230\u200b\u4e0b\u6e38\u200b\u63a5\u53d7\u8005\u200b\u3002\u201d\u200b\u660e\u77e5\u6545\u72af\u200b\u201d \u200b\u662f\u200b\u6307\u200b\u60a8\u200b\u5b9e\u9645\u200b\u77e5\u9053\u200b\uff0c\u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u60a8\u200b\u5728\u200b\u67d0\u4e2a\u200b\u56fd\u5bb6\u200b\u4f20\u9012\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u6216\u8005\u200b\u60a8\u200b\u7684\u200b\u63a5\u53d7\u8005\u200b\u5728\u200b\u67d0\u4e2a\u200b\u56fd\u5bb6\u200b\u4f7f\u7528\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5c06\u200b\u4fb5\u72af\u200b\u60a8\u200b\u6709\u200b\u7406\u7531\u200b\u76f8\u4fe1\u200b\u5728\u200b\u8be5\u56fd\u200b\u6709\u6548\u200b\u7684\u200b\u4e00\u9879\u200b\u6216\u200b\u591a\u9879\u200b\u53ef\u200b\u8bc6\u522b\u200b\u4e13\u5229\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6839\u636e\u200b\u4e00\u9879\u200b\u4ea4\u6613\u200b\u6216\u200b\u5b89\u6392\u200b\u6216\u200b\u4e0e\u200b\u4e4b\u200b\u76f8\u5173\u200b\uff0c\u200b\u60a8\u200b\u8f6c\u8ba9\u200b\u6216\u200b\u901a\u8fc7\u200b\u4fc3\u6210\u200b\u8f6c\u8ba9\u200b\u4f20\u64ad\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5e76\u200b\u5411\u200b\u63a5\u53d7\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u67d0\u4e9b\u200b\u5f53\u4e8b\u65b9\u200b\u6388\u4e88\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff0c\u200b\u6388\u6743\u200b\u4ed6\u4eec\u200b\u4f7f\u7528\u200b\u3001\u200b\u4f20\u64ad\u200b\u3001\u200b\u4fee\u6539\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7279\u5b9a\u200b\u526f\u672c\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u6388\u4e88\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u5c06\u200b\u81ea\u52a8\u200b\u6269\u5c55\u200b\u5230\u200b\u88ab\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u548c\u200b\u57fa\u4e8e\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6240\u6709\u200b\u63a5\u53d7\u8005\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u4e0d\u200b\u5305\u62ec\u200b\u5728\u200b\u5176\u200b\u8986\u76d6\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u7981\u6b62\u200b\u884c\u4f7f\u200b\u6216\u200b\u4ee5\u200b\u4e0d\u200b\u884c\u4f7f\u200b\u672c\u200b\u8bb8\u53ef\u200b\u5177\u4f53\u200b\u6388\u4e88\u200b\u7684\u200b\u4e00\u9879\u200b\u6216\u200b\u591a\u9879\u200b\u6743\u5229\u200b\u4e3a\u200b\u6761\u4ef6\u200b\uff0c\u200b\u5219\u200b\u4e3a\u200b \u201c\u200b\u6b67\u89c6\u6027\u200b\u7684\u200b\u201d\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u662f\u200b\u4e0e\u200b\u4ece\u4e8b\u200b\u8f6f\u4ef6\u200b\u5206\u9500\u200b\u4e1a\u52a1\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u8fbe\u6210\u200b\u7684\u200b\u5b89\u6392\u200b\u7684\u200b\u4e00\u65b9\u200b\uff0c\u200b\u6839\u636e\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u60a8\u200b\u6839\u636e\u200b\u60a8\u200b\u4f20\u9012\u200b\u4f5c\u54c1\u200b\u7684\u200b\u6d3b\u52a8\u200b\u8303\u56f4\u200b\u5411\u200b\u7b2c\u4e09\u65b9\u200b\u4ed8\u6b3e\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6839\u636e\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u7b2c\u4e09\u200b\u65b9\u5411\u200b\u4efb\u4f55\u200b\u5c06\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u83b7\u5f97\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u7684\u200b\u4e00\u65b9\u200b\u6388\u4e88\u200b\uff0c\u200b\u5219\u200b\u60a8\u200b\u4e0d\u5f97\u200b\u4f20\u9012\u200b\u6240\u6d89\u200b\u4f5c\u54c1\u200b\u3002\u200b\u6b67\u89c6\u6027\u200b\u7684\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\uff1a(a)\u200b\u4e0e\u200b\u60a8\u200b\u4f20\u9012\u200b\u7684\u200b\u4f5c\u54c1\u200b\u7684\u200b\u526f\u672c\u200b\uff08\u200b\u6216\u200b\u7531\u200b\u8fd9\u4e9b\u200b\u526f\u672c\u200b\u5236\u4f5c\u200b\u7684\u200b\u526f\u672c\u200b\uff09\u200b\u6709\u5173\u200b\uff0c\u200b\u6216\u200b(b)\u200b\u4e3b\u8981\u200b\u4e3a\u200b\u5305\u542b\u200b\u8be5\u200b\u4f5c\u54c1\u200b\u7684\u200b\u7279\u5b9a\u200b\u4ea7\u54c1\u200b\u6216\u200b\u6c47\u7f16\u200b\u5e76\u200b\u4e0e\u200b\u4e4b\u200b\u6709\u5173\u200b\uff0c\u200b\u9664\u975e\u200b\u60a8\u200b\u5728\u200b2007\u200b\u5e74\u200b3\u200b\u6708\u200b28\u200b\u65e5\u200b\u4e4b\u524d\u200b\u8fbe\u6210\u200b\u8be5\u200b\u5b89\u6392\u200b\uff0c\u200b\u6216\u200b\u6388\u4e88\u200b\u8be5\u200b\u4e13\u5229\u200b\u8bb8\u53ef\u200b\u3002</p> <p>\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u5185\u5bb9\u200b\u90fd\u200b\u4e0d\u5e94\u200b\u88ab\u200b\u89e3\u91ca\u200b\u4e3a\u200b\u6392\u9664\u200b\u6216\u200b\u9650\u5236\u200b\u4efb\u4f55\u200b\u9690\u542b\u200b\u7684\u200b\u8bb8\u53ef\u200b\u6216\u200b\u5176\u4ed6\u200b\u5bf9\u200b\u4fb5\u6743\u200b\u7684\u200b\u6297\u8fa9\u200b\uff0c\u200b\u6839\u636e\u200b\u9002\u7528\u200b\u7684\u200b\u4e13\u5229\u6cd5\u200b\uff0c\u200b\u60a8\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6709\u200b\u8fd9\u6837\u200b\u7684\u200b\u673a\u4f1a\u200b\u3002</p>"},{"location":"zh/about/license/#12","title":"12. \u200b\u4e0d\u200b\u653e\u5f03\u200b\u4ed6\u4eba\u200b\u7684\u200b\u81ea\u7531\u200b.","text":"<p>\u200b\u5982\u679c\u200b\u5f3a\u52a0\u200b\u7ed9\u200b\u60a8\u200b\u7684\u200b\u6761\u4ef6\u200b\uff08\u200b\u65e0\u8bba\u662f\u200b\u901a\u8fc7\u200b\u6cd5\u9662\u200b\u547d\u4ee4\u200b\u3001\u200b\u534f\u8bae\u200b\u6216\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\uff09\u200b\u4e0e\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u4ef6\u200b\u76f8\u200b\u62b5\u89e6\u200b\uff0c\u200b\u5b83\u4eec\u200b\u5e76\u200b\u4e0d\u80fd\u200b\u514d\u9664\u200b\u60a8\u200b\u5bf9\u200b\u672c\u200b\u8bb8\u53ef\u200b\u6761\u4ef6\u200b\u7684\u200b\u9075\u5b88\u200b\u3002\u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u80fd\u200b\u5728\u200b\u8f6c\u8ba9\u200b\u4f5c\u54c1\u200b\u65f6\u200b\u540c\u65f6\u200b\u6ee1\u8db3\u200b\u60a8\u200b\u5728\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u4e0b\u200b\u7684\u200b\u4e49\u52a1\u200b\u548c\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u76f8\u5173\u200b\u7684\u200b\u4e49\u52a1\u200b\uff0c\u200b\u90a3\u4e48\u200b\u4f5c\u4e3a\u200b\u7ed3\u679c\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u4e0d\u200b\u8f6c\u8ba9\u200b\u5b83\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u540c\u610f\u200b\u7684\u200b\u6761\u6b3e\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u4e49\u52a1\u200b\u5411\u200b\u63a5\u53d7\u200b\u60a8\u200b\u4f20\u9001\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u4eba\u200b\u6536\u53d6\u200b\u7248\u7a0e\u200b\uff0c\u200b\u90a3\u4e48\u200b\u60a8\u200b\u8981\u200b\u540c\u65f6\u200b\u6ee1\u8db3\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u548c\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u8981\u6c42\u200b\uff0c\u200b\u552f\u4e00\u200b\u7684\u200b\u529e\u6cd5\u200b\u5c31\u662f\u200b\u5b8c\u5168\u200b\u4e0d\u200b\u4f20\u9001\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u3002</p>"},{"location":"zh/about/license/#13-gnu","title":"13. \u200b\u8fdc\u7a0b\u200b\u7f51\u7edc\u200b\u4ea4\u4e92\u200b\uff1b\u200b\u4e0e\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u4e00\u8d77\u200b\u4f7f\u7528\u200b.","text":"<p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u4fee\u6539\u200b\u672c\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u60a8\u200b\u7684\u200b\u4fee\u6539\u200b\u7248\u672c\u200b\u5fc5\u987b\u200b\u5728\u200b\u663e\u8457\u200b\u4f4d\u7f6e\u200b\u5411\u200b\u6240\u6709\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u8fdc\u7a0b\u200b\u4e0e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u4e92\u52a8\u200b\u7684\u200b\u7528\u6237\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u7248\u672c\u200b\u652f\u6301\u200b\u8fd9\u79cd\u200b\u4e92\u52a8\u200b\uff09\u200b\u63d0\u4f9b\u200b\u673a\u4f1a\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4e00\u4e9b\u200b\u6807\u51c6\u200b\u6216\u200b\u4e60\u60ef\u200b\u7684\u200b\u4fc3\u8fdb\u200b\u8f6f\u4ef6\u200b\u590d\u5236\u200b\u7684\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u4ece\u200b\u7f51\u7edc\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u514d\u8d39\u200b\u63d0\u4f9b\u200b\u76f8\u5e94\u200b\u7684\u200b\u6e90\u7801\u200b\u3002\u200b\u8be5\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u5e94\u200b\u5305\u62ec\u200b\u6839\u636e\u200b\u4e0b\u200b\u6bb5\u200b\u89c4\u5b9a\u200b\u7eb3\u5165\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u200b\u7684\u200b\u4efb\u4f55\u200b\u4f5c\u54c1\u200b\u7684\u200b\u76f8\u5e94\u200b\u6e90\u7801\u200b\u3002</p> <p>\u200b\u5c3d\u7ba1\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u6709\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u89c4\u5b9a\u200b\uff0c\u200b\u60a8\u200b\u6709\u200b\u6743\u5229\u200b\u5c06\u200b\u4efb\u4f55\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u7684\u200b\u4f5c\u54c1\u200b\u4e0e\u200b\u5728\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u4e0b\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4f5c\u54c1\u200b\u94fe\u63a5\u200b\u6216\u200b\u7ed3\u5408\u200b\u6210\u200b\u4e00\u4e2a\u200b\u5355\u4e00\u200b\u7684\u200b\u7ec4\u5408\u200b\u4f5c\u54c1\u200b\uff0c\u200b\u5e76\u200b\u4f20\u9012\u200b\u7531\u6b64\u200b\u4ea7\u751f\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\u5c06\u200b\u7ee7\u7eed\u200b\u9002\u7528\u200b\u4e8e\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u4f5c\u54c1\u200b\u7684\u200b\u90e8\u5206\u200b\uff0c\u200b\u4f46\u200b\u4e0e\u200b\u4e4b\u200b\u7ed3\u5408\u200b\u7684\u200b\u4f5c\u54c1\u200b\u5c06\u200b\u7ee7\u7eed\u200b\u53d7\u200bGNU\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7b2c\u200b3\u200b\u7248\u200b\u7684\u200b\u7ba1\u8f96\u200b\u3002</p>"},{"location":"zh/about/license/#14","title":"14. \u200b\u672c\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fee\u8ba2\u7248\u200b.","text":"<p>\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0d\u65f6\u200b\u5730\u200b\u53d1\u5e03\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u4fee\u8ba2\u7248\u200b\u548c\u200b/\u200b\u6216\u200b\u65b0\u200b\u7248\u672c\u200b\u3002\u200b\u8fd9\u4e9b\u200b\u65b0\u200b\u7248\u672c\u200b\u5728\u7cbe\u795e\u4e0a\u200b\u4e0e\u200b\u76ee\u524d\u200b\u7684\u200b\u7248\u672c\u200b\u76f8\u4f3c\u200b\uff0c\u200b\u4f46\u200b\u5728\u200b\u7ec6\u8282\u200b\u4e0a\u200b\u53ef\u80fd\u200b\u6709\u6240\u4e0d\u540c\u200b\uff0c\u200b\u4ee5\u200b\u89e3\u51b3\u200b\u65b0\u200b\u7684\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u5207\u200b\u3002</p> <p>\u200b\u6bcf\u4e2a\u200b\u7248\u672c\u200b\u90fd\u200b\u6709\u200b\u4e00\u4e2a\u200b\u533a\u5206\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\u3002\u200b\u5982\u679c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6307\u5b9a\u200b\u67d0\u4e2a\u200b\u7f16\u53f7\u200b\u7684\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b \u201c\u200b\u6216\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u201d \u200b\u9002\u7528\u200b\u4e8e\u200b\u5b83\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u9075\u5b88\u200b\u8be5\u200b\u7f16\u53f7\u200b\u7684\u200b\u7248\u672c\u200b\u6216\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u7684\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b\u3002\u200b\u5982\u679c\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u6307\u5b9a\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7248\u672c\u53f7\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200b\u4efb\u4f55\u200b\u7248\u672c\u200b\u3002 \u200b\u5982\u679c\u200b\u672c\u200b\u8ba1\u5212\u200b\u89c4\u5b9a\u200b\u4ee3\u7406\u4eba\u200b\u53ef\u4ee5\u200b\u51b3\u5b9a\u200b\u672a\u6765\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u54ea\u4e2a\u200b\u7248\u672c\u200b\u7684\u200b GNU Affero \u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\uff0c\u200b\u90a3\u4e48\u200b\u8be5\u200b\u4ee3\u7406\u4eba\u200b\u5bf9\u200b\u67d0\u4e2a\u200b\u7248\u672c\u200b\u7684\u200b\u516c\u5f00\u200b\u63a5\u53d7\u200b\u58f0\u660e\u200b\u5c06\u200b\u6c38\u4e45\u200b\u6388\u6743\u200b\u60a8\u200b\u4e3a\u200b\u672c\u200b\u8ba1\u5212\u200b\u9009\u62e9\u200b\u8be5\u200b\u7248\u672c\u200b\u3002</p> <p>\u200b\u4ee5\u540e\u200b\u7684\u200b\u8bb8\u53ef\u8bc1\u200b\u7248\u672c\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u7ed9\u200b\u60a8\u200b\u989d\u5916\u200b\u7684\u200b\u6216\u200b\u4e0d\u540c\u200b\u7684\u200b\u6743\u9650\u200b\u3002\u200b\u4f46\u662f\u200b\uff0c\u200b\u4efb\u4f55\u200b\u4f5c\u8005\u200b\u6216\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u90fd\u200b\u4e0d\u4f1a\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u9009\u62e9\u200b\u4e86\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u800c\u200b\u627f\u62c5\u200b\u989d\u5916\u200b\u7684\u200b\u4e49\u52a1\u200b\u3002</p>"},{"location":"zh/about/license/#15","title":"15. \u200b\u514d\u8d23\u200b\u58f0\u660e\u200b.","text":"<p>\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u7684\u200b\u8303\u56f4\u200b\u5185\u200b\uff0c\u200b\u5bf9\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u9664\u975e\u200b\u53e6\u6709\u200b\u4e66\u9762\u200b\u8bf4\u660e\u200b\uff0c\u200b\u5426\u5219\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u548c\u200b/\u200b\u6216\u200b\u5176\u4ed6\u200b\u5404\u65b9\u200b \u201c\u200b\u6309\u200b\u539f\u6837\u200b\u201d \u200b\u63d0\u4f9b\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u4e0d\u200b\u63d0\u4f9b\u200b\u4efb\u4f55\u200b\u660e\u793a\u200b\u6216\u200b\u6697\u793a\u200b\u7684\u200b\u4fdd\u8bc1\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f46\u200b\u4e0d\u200b\u9650\u4e8e\u200b\u5bf9\u200b\u9002\u9500\u200b\u6027\u200b\u548c\u200b\u7279\u5b9a\u200b\u7528\u9014\u200b\u7684\u200b\u9002\u7528\u6027\u200b\u7684\u200b\u6697\u793a\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u5173\u4e8e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u8d28\u91cf\u200b\u548c\u200b\u6027\u80fd\u200b\u7684\u200b\u5168\u90e8\u200b\u98ce\u9669\u200b\u7531\u200b\u60a8\u200b\u627f\u62c5\u200b\u3002\u200b\u5982\u679c\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u88ab\u200b\u8bc1\u660e\u200b\u6709\u200b\u7f3a\u9677\u200b\uff0c\u200b\u60a8\u200b\u5c06\u200b\u627f\u62c5\u200b\u6240\u6709\u200b\u5fc5\u8981\u200b\u7684\u200b\u670d\u52a1\u200b\u3001\u200b\u4fee\u7406\u200b\u6216\u200b\u7ea0\u6b63\u200b\u7684\u200b\u8d39\u7528\u200b\u3002</p>"},{"location":"zh/about/license/#16","title":"16. \u200b\u8d54\u507f\u200b\u8d23\u4efb\u200b\u7684\u200b\u9650\u5236\u200b.","text":"<p>\u200b\u5728\u200b\u4efb\u4f55\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u9664\u975e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6216\u200b\u4e66\u9762\u200b\u540c\u610f\u200b\uff0c\u200b\u4efb\u4f55\u200b\u7248\u6743\u200b\u6301\u6709\u4eba\u200b\u6216\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u6309\u200b\u4e0a\u8ff0\u200b\u89c4\u5b9a\u200b\u4fee\u6539\u200b\u548c\u200b/\u200b\u6216\u200b\u4f20\u9012\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5f53\u4e8b\u4eba\u200b\u90fd\u200b\u4e0d\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u635f\u5bb3\u200b\u8d1f\u8d23\u200b\uff0c\u200b\u5305\u62ec\u200b\u56e0\u200b\u4f7f\u7528\u200b\u6216\u200b\u65e0\u6cd5\u200b\u4f7f\u7528\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u800c\u200b\u5f15\u8d77\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e00\u822c\u200b\u7684\u200b\u3001\u200b\u7279\u6b8a\u200b\u7684\u200b\u3001\u200b\u5076\u7136\u200b\u7684\u200b\u6216\u200b\u95f4\u63a5\u200b\u7684\u200b\u635f\u5bb3\u200b\uff08\u200b\u5305\u62ec\u200b\u4f46\u200b\u4e0d\u200b\u9650\u4e8e\u200b\u6570\u636e\u200b\u4e22\u5931\u200b\u6216\u200b\u6570\u636e\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u906d\u53d7\u200b\u7684\u200b\u635f\u5931\u200b\u6216\u672c\u200b\u7a0b\u5e8f\u200b\u65e0\u6cd5\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u5176\u4ed6\u200b\u7a0b\u5e8f\u200b\u4e00\u8d77\u200b\u8fd0\u884c\u200b\uff09\uff0c\u200b\u5373\u4f7f\u200b\u8be5\u200b\u6301\u6709\u4eba\u200b\u6216\u200b\u5176\u4ed6\u200b\u5f53\u4e8b\u4eba\u200b\u5df2\u200b\u88ab\u200b\u544a\u77e5\u200b\u8fd9\u79cd\u200b\u635f\u5bb3\u200b\u7684\u200b\u53ef\u80fd\u6027\u200b\u3002</p>"},{"location":"zh/about/license/#17-1516","title":"17. \u200b\u7b2c\u200b15\u200b\u6761\u200b\u548c\u200b\u7b2c\u200b16\u200b\u6761\u200b\u7684\u200b\u89e3\u91ca\u200b.","text":"<p>\u200b\u5982\u679c\u200b\u4ee5\u4e0a\u200b\u89c4\u5b9a\u200b\u7684\u200b\u514d\u8d23\u200b\u58f0\u660e\u200b\u548c\u200b\u8d23\u4efb\u200b\u9650\u5236\u200b\u4e0d\u80fd\u200b\u6839\u636e\u200b\u5176\u200b\u6761\u6b3e\u200b\u5728\u200b\u5f53\u5730\u200b\u4ea7\u751f\u200b\u6cd5\u5f8b\u6548\u529b\u200b\uff0c\u200b\u5ba1\u67e5\u200b\u6cd5\u9662\u200b\u5e94\u200b\u9002\u7528\u200b\u6700\u200b\u63a5\u8fd1\u200b\u4e8e\u200b\u7edd\u5bf9\u200b\u653e\u5f03\u200b\u4e0e\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u6709\u5173\u200b\u7684\u200b\u6240\u6709\u200b\u6c11\u4e8b\u8d23\u4efb\u200b\u7684\u200b\u5f53\u5730\u200b\u6cd5\u5f8b\u200b\uff0c\u200b\u9664\u975e\u200b\u5728\u200b\u6536\u53d6\u200b\u8d39\u7528\u200b\u7684\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u526f\u672c\u200b\u4e0a\u200b\u9644\u6709\u200b\u4fdd\u8bc1\u200b\u6216\u200b\u8d23\u4efb\u200b\u627f\u62c5\u200b\u3002</p> <p>\u200b\u4ee5\u4e0a\u200b\u662f\u200b\u6761\u6b3e\u200b\u548c\u200b\u6761\u4ef6\u200b</p>"},{"location":"zh/about/license/#_3","title":"\u5982\u4f55\u200b\u5c06\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u5e94\u7528\u200b\u4e8e\u200b\u60a8\u200b\u7684\u200b\u65b0\u200b\u7a0b\u5e8f","text":"<p>\u200b\u5982\u679c\u200b\u60a8\u200b\u5f00\u53d1\u200b\u4e86\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u7684\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5e76\u200b\u5e0c\u671b\u200b\u5b83\u200b\u5bf9\u200b\u516c\u4f17\u200b\u6709\u200b\u6700\u5927\u200b\u7684\u200b\u7528\u5904\u200b\uff0c\u200b\u5b9e\u73b0\u200b\u8fd9\u4e00\u200b\u76ee\u6807\u200b\u7684\u200b\u6700\u597d\u200b\u65b9\u6cd5\u200b\u662f\u200b\u4f7f\u200b\u5b83\u200b\u6210\u4e3a\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\uff0c\u200b\u6bcf\u4e2a\u200b\u4eba\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u4e9b\u200b\u6761\u6b3e\u200b\u4e0b\u200b\u91cd\u65b0\u200b\u53d1\u5e03\u200b\u548c\u200b\u4fee\u6539\u200b\u3002</p> <p>\u200b\u8981\u200b\u505a\u5230\u200b\u8fd9\u200b\u4e00\u70b9\u200b\uff0c\u200b\u8bf7\u200b\u5728\u200b\u7a0b\u5e8f\u200b\u4e2d\u200b\u9644\u4e0a\u200b\u4ee5\u4e0b\u200b\u901a\u77e5\u200b\u3002\u200b\u6700\u200b\u5b89\u5168\u200b\u7684\u200b\u505a\u6cd5\u200b\u662f\u200b\u628a\u200b\u5b83\u4eec\u200b\u9644\u5728\u200b\u6bcf\u4e2a\u200b\u6e90\u6587\u4ef6\u200b\u7684\u200b\u5f00\u5934\u200b\uff0c\u200b\u4ee5\u200b\u6700\u200b\u6709\u6548\u200b\u5730\u200b\u8bf4\u660e\u200b\u6392\u9664\u200b\u62c5\u4fdd\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1b\u200b\u6bcf\u4e2a\u200b\u6587\u4ef6\u200b\u81f3\u5c11\u200b\u8981\u200b\u6709\u200b \u201c\u200b\u7248\u6743\u200b\u201d \u200b\u4e00\u884c\u200b\u548c\u200b\u4e00\u4e2a\u200b\u6307\u5411\u200b\u5b8c\u6574\u200b\u901a\u77e5\u200b\u7684\u200b\u6307\u9488\u200b\u3002</p> Text Only<pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Affero General Public License as\npublished by the Free Software Foundation, either version 3 of the\nLicense, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Affero General Public License for more details.\n\nYou should have received a copy of the GNU Affero General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>\u200b\u7ffb\u8bd1\u200b\uff1a</p> Text Only<pre><code>&lt;\u200b\u7528\u200b\u4e00\u884c\u200b\u5b57\u6765\u200b\u8bf4\u660e\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u540d\u79f0\u200b\u548c\u200b\u5b83\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u4e8b\u60c5\u200b\u7684\u200b\u7b80\u5355\u200b\u6982\u5ff5\u200b\u3002&gt;\nCopyright (C) &lt;\u200b\u5e74\u200b&gt; &lt;\u200b\u4f5c\u8005\u59d3\u540d\u200b&gt; \u200b\u7248\u6743\u6240\u6709\u200b\u3002\n\n\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u662f\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\uff1a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6839\u636e\u200b\u81ea\u7531\u8f6f\u4ef6\u200b\u57fa\u91d1\u4f1a\u200b\u53d1\u5e03\u200b\u7684\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u6761\u6b3e\u200b\uff0c\u200b\u5373\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u7b2c\u200b3\u200b\u7248\u200b\u6216\u200b\uff08\u200b\u60a8\u200b\u9009\u62e9\u200b\u7684\u200b\uff09\u200b\u4efb\u4f55\u200b\u540e\u6765\u200b\u7684\u200b\u7248\u672c\u200b\u91cd\u65b0\u200b\u53d1\u5e03\u200b\u5b83\u200b\u548c\u200b/\u200b\u6216\u200b\u4fee\u6539\u200b\u5b83\u200b\u3002\u3002\n\n\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u53d1\u5e03\u200b\u662f\u200b\u5e0c\u671b\u200b\u5b83\u200b\u80fd\u200b\u8d77\u5230\u200b\u4f5c\u7528\u200b\u3002\u200b\u4f46\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\uff1b\u200b\u751a\u81f3\u200b\u6ca1\u6709\u200b\u9690\u542b\u200b\u7684\u200b\u4fdd\u8bc1\u200b\u3002\u200b\u672c\u200b\u7a0b\u5e8f\u200b\u7684\u200b\u5206\u53d1\u200b\u662f\u200b\u5e0c\u671b\u200b\u5b83\u200b\u662f\u200b\u6709\u7528\u200b\u7684\u200b\uff0c\u200b\u4f46\u200b\u6ca1\u6709\u200b\u4efb\u4f55\u200b\u4fdd\u8bc1\u200b\uff0c\u200b\u751a\u81f3\u200b\u6ca1\u6709\u200b\u9690\u542b\u200b\u7684\u200b\u9002\u9500\u5bf9\u8def\u200b\u6216\u200b\u9002\u5408\u200b\u67d0\u4e00\u200b\u7279\u5b9a\u200b\u76ee\u7684\u200b\u7684\u200b\u4fdd\u8bc1\u200b\u3002 \u200b\u53c2\u89c1\u200b GNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u7ec6\u8282\u200b\u3002\n\n\u200b\u60a8\u200b\u5e94\u8be5\u200b\u5df2\u7ecf\u200b\u6536\u5230\u200b\u4e86\u200b\u4e00\u4efd\u200bGNU Affero\u200b\u901a\u7528\u200b\u516c\u5171\u200b\u8bb8\u53ef\u8bc1\u200b\u7684\u200b\u526f\u672c\u200b\u3002 \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200b&lt;https://www.gnu.org/licenses/&gt;\u3002\n\n\u200b\u8fd8\u8981\u200b\u589e\u52a0\u200b\u5982\u4f55\u200b\u901a\u8fc7\u200b\u7535\u5b50\u200b\u548c\u200b\u7eb8\u8d28\u200b\u90ae\u4ef6\u200b\u4e0e\u200b\u60a8\u200b\u8054\u7cfb\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\n</code></pre> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u8f6f\u4ef6\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8ba1\u7b97\u673a\u7f51\u7edc\u200b\u4e0e\u200b\u7528\u6237\u200b\u8fdb\u884c\u200b\u8fdc\u7a0b\u200b\u4ea4\u4e92\u200b\uff0c\u200b\u60a8\u200b\u4e5f\u200b\u5e94\u8be5\u200b\u786e\u4fdd\u200b\u5b83\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u200b\u4e00\u79cd\u200b\u83b7\u5f97\u200b\u5176\u200b\u6e90\u4ee3\u7801\u200b\u7684\u200b\u65b9\u6cd5\u200b\u3002\u200b\u4f8b\u5982\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u7f51\u7edc\u5e94\u7528\u200b\u7a0b\u5e8f\u200b\uff0c\u200b\u5b83\u200b\u7684\u200b\u754c\u9762\u200b\u53ef\u4ee5\u200b\u663e\u793a\u200b\u4e00\u4e2a\u200b \u201c\u200b\u6e90\u4ee3\u7801\u200b\u201d \u200b\u7684\u200b\u94fe\u63a5\u200b\uff0c\u200b\u5f15\u5bfc\u200b\u7528\u6237\u200b\u8fdb\u5165\u200b\u4ee3\u7801\u200b\u7684\u200b\u5b58\u6863\u200b\u3002\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u7528\u200b\u5f88\u591a\u200b\u65b9\u6cd5\u200b\u63d0\u4f9b\u200b\u6e90\u7801\u200b\uff0c\u200b\u4e0d\u540c\u200b\u7684\u200b\u89e3\u51b3\u65b9\u6848\u200b\u5bf9\u200b\u4e0d\u540c\u200b\u7684\u200b\u7a0b\u5e8f\u200b\u4f1a\u200b\u66f4\u597d\u200b\uff1b\u200b\u5177\u4f53\u200b\u8981\u6c42\u200b\u89c1\u200b\u7b2c\u200b13\u200b\u8282\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u6709\u200b\u5fc5\u8981\u200b\uff0c\u200b\u60a8\u200b\u8fd8\u200b\u5e94\u8be5\u200b\u8ba9\u200b\u60a8\u200b\u7684\u200b\u96c7\u4e3b\u200b\uff08\u200b\u5982\u679c\u200b\u60a8\u200b\u662f\u200b\u7a0b\u5e8f\u5458\u200b\uff09\u200b\u6216\u200b\u5b66\u6821\u200b\uff08\u200b\u5982\u679c\u200b\u6709\u200b\u7684\u8bdd\u200b\uff09\u200b\u4e3a\u200b\u8be5\u200b\u7a0b\u5e8f\u200b\u7b7e\u7f72\u200b\u4e00\u4efd\u200b \u201c\u200b\u7248\u6743\u200b\u514d\u8d23\u200b\u58f0\u660e\u200b\u201d\u3002\u200b\u6709\u5173\u200b\u8fd9\u65b9\u9762\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5982\u4f55\u200b\u7533\u8bf7\u200b\u548c\u200b\u9075\u5b88\u200bGNU AGPL\uff0c\u200b\u8bf7\u200b\u53c2\u89c1\u200bhttps://www.gnu.org/licenses/\u3002</p>"},{"location":"zh/about/privacy/","title":"Privacy Notice","text":"<p>\u200b\u7ffb\u8bd1\u200b</p> <p>\u200b\u672c\u6587\u200b\u5185\u5bb9\u200b\u4e3a\u200b\u673a\u5668\u7ffb\u8bd1\u200b\u7248\u672c\u200b\uff0c\u200b\u65e8\u5728\u200b\u4e3a\u200b\u7528\u6237\u200b\u63d0\u4f9b\u65b9\u4fbf\u200b\u3002 \u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5c3d\u529b\u200b\u786e\u4fdd\u200b\u7ffb\u8bd1\u200b\u7684\u200b\u51c6\u786e\u6027\u200b\u3002 \u200b\u4f46\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u5185\u5bb9\u200b\u53ef\u80fd\u200b\u5305\u542b\u200b\u9519\u8bef\u200b\uff0c\u200b\u4ec5\u4f9b\u53c2\u8003\u200b\u3002 \u200b\u8bf7\u4ee5\u200b\u82f1\u6587\u200b\u539f\u6587\u200b\u4e3a\u51c6\u200b\u3002</p> <p>\u200b\u4e3a\u200b\u6ee1\u8db3\u200b\u5408\u89c4\u6027\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u8981\u6c42\u200b\uff0c\u200b\u7ffb\u8bd1\u200b\u6587\u6863\u200b\u4e2d\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e0d\u200b\u51c6\u786e\u200b\u6216\u200b\u6b67\u4e49\u200b\u4e4b\u5904\u200b\u5747\u200b\u4e0d\u200b\u5177\u6709\u200b\u7ea6\u675f\u529b\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u200b\u5177\u5907\u200b\u6cd5\u5f8b\u6548\u529b\u200b\u3002</p> <p>\u200b\u6700\u540e\u200b\u4fee\u8ba2\u200b\u65e5\u671f\u200b</p> <p>\u200b\u672c\u200b\u58f0\u660e\u200b\u6700\u540e\u200b\u66f4\u65b0\u200b\u4e8e\u200b2024\u200b\u5e74\u200b5\u200b\u6708\u200b4\u200b\u65e5\u200b\u3002</p>"},{"location":"zh/about/privacy/#_1","title":"\u9690\u79c1\u200b\u58f0\u660e","text":"<p>\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u9002\u7528\u200b\u4e8e\u4e39\u7075\u200b\u56e2\u961f\u200b\uff08\u200b\u4e5f\u200b\u88ab\u79f0\u4f5c\u200b\u4e39\u7075\u200b\uff09\uff08\u200b\u4ee5\u4e0b\u200b\u7b80\u79f0\u200b\u201c\u200b\u6211\u4eec\u200b\u201d\uff09\uff0c\u200b\u63cf\u8ff0\u200b\u4e86\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff08\u201c\u200b\u670d\u52a1\u200b\u201d\uff09\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4ee5\u53ca\u200b\u4e3a\u4f55\u200b\u53ef\u80fd\u200b\u6536\u96c6\u200b\u3001\u200b\u5b58\u50a8\u200b\u3001\u200b\u4f7f\u7528\u200b\u548c\u200b/\u200b\u6216\u200b\u5171\u4eab\u200b\uff08\u201c\u200b\u5904\u7406\u200b\u201d\uff09\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002\u200b\u4f8b\u5982\u200b\u5f53\u200b\u60a8\u200b\uff1a</p> <ul> <li>\u200b\u8bbf\u95ee\u200b\u6211\u4eec\u200b\u7684\u200b\u7f51\u7ad9\u200b chanfig.danling.org \u200b\u6216\u200b\u4efb\u4f55\u200b\u94fe\u63a5\u200b\u5230\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u7684\u200b\u6211\u4eec\u200b\u7684\u200b\u7f51\u7ad9\u200b\u65f6\u200b</li> </ul> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u968f\u65f6\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u66f4\u6539\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u8bbe\u7f6e\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p> <p>\u200b\u6709\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u6ce8\u200b\uff1f \u200b\u9605\u8bfb\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u5c06\u200b\u5e2e\u52a9\u200b\u60a8\u200b\u4e86\u89e3\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\u548c\u200b\u9009\u62e9\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u4e0d\u200b\u540c\u610f\u200b\u6211\u4eec\u200b\u7684\u200b\u58f0\u660e\u200b\u548c\u200b\u505a\u6cd5\u200b\uff0c\u200b\u8bf7\u200b\u4e0d\u8981\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u4ecd\u200b\u6709\u200b\u4efb\u4f55\u200b\u95ee\u9898\u200b\u6216\u200b\u5173\u6ce8\u200b\uff0c\u200b\u8bf7\u200b\u901a\u8fc7\u200bprivacy@danling.org\u200b\u4e0e\u200b\u6211\u4eec\u200b\u8054\u7cfb\u200b\u3002</p>"},{"location":"zh/about/privacy/#0","title":"0. \u200b\u5173\u952e\u70b9\u200b\u603b\u7ed3","text":"<p>\u200b\u672c\u200b\u603b\u7ed3\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u6211\u4eec\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u7684\u200b\u5173\u952e\u70b9\u200b\uff0c\u200b\u4f46\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u6bcf\u4e2a\u200b\u5173\u952e\u70b9\u200b\u540e\u200b\u7684\u200b\u94fe\u63a5\u200b\u6216\u200b\u4f7f\u7528\u200b\u76ee\u5f55\u200b\u6765\u200b\u627e\u5230\u200b\u60a8\u200b\u6240\u200b\u67e5\u627e\u200b\u7684\u200b\u90e8\u5206\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u8be6\u60c5\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u54ea\u4e9b\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u5bfc\u822a\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6839\u636e\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4ee5\u53ca\u200b\u670d\u52a1\u200b\u7684\u200b\u4e92\u52a8\u200b\u65b9\u5f0f\u200b\u3001\u200b\u60a8\u200b\u6240\u200b\u505a\u200b\u7684\u200b\u9009\u62e9\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u529f\u80fd\u200b\u6765\u200b\u5904\u7406\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u54ea\u4e9b\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u63d0\u4f9b\u200b\u3001\u200b\u6539\u5584\u200b\u548c\u200b\u7ba1\u7406\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u4e0e\u200b\u60a8\u200b\u6c9f\u901a\u200b\uff0c\u200b\u8fdb\u884c\u200b\u5b89\u5168\u200b\u548c\u200b\u9632\u200b\u6b3a\u8bc8\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u5728\u200b\u5f97\u5230\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u51fa\u4e8e\u200b\u5176\u4ed6\u200b\u76ee\u7684\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 \u200b\u6211\u4eec\u200b\u4ec5\u200b\u5728\u200b\u6709\u200b\u5408\u6cd5\u200b\u6cd5\u5f8b\u200b\u7406\u7531\u200b\u65f6\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5417\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u5904\u7406\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u4ece\u200b\u7b2c\u4e09\u65b9\u200b\u6536\u96c6\u200b\u4fe1\u606f\u200b\u5417\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u7b2c\u4e09\u65b9\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u5728\u200b\u54ea\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u54ea\u4e9b\u200b\u65b9\u200b\u6211\u4eec\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u7279\u5b9a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4e0e\u200b\u7279\u5b9a\u200b\u7b2c\u4e09\u65b9\u200b\u5171\u4eab\u200b\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u4f55\u65f6\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u8c01\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f</p> <p>\u200b\u6211\u4eec\u200b\u5df2\u7ecf\u200b\u5b9e\u65bd\u200b\u4e86\u200b\u7ec4\u7ec7\u200b\u548c\u200b\u6280\u672f\u200b\u6d41\u7a0b\u200b\u548c\u200b\u7a0b\u5e8f\u200b\u6765\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p> \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u6301\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f</p> <p>\u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u6839\u636e\u200b\u60a8\u200b\u6240\u5728\u200b\u5730\u7406\u4f4d\u7f6e\u200b\uff0c\u200b\u9002\u7528\u200b\u7684\u200b\u9690\u79c1\u200b\u6cd5\u200b\u53ef\u80fd\u200b\u610f\u5473\u7740\u200b\u60a8\u200b\u5bf9\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u6709\u200b\u67d0\u4e9b\u200b\u6743\u5229\u200b\u3002</p> <p> \u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u60a8\u200b\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\uff1f</p> <p>\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u7684\u200b\u6700\u200b\u7b80\u5355\u200b\u65b9\u5f0f\u200b\u662f\u200b\u8054\u7cfb\u200b\u60a8\u200b\u7684\u200b\u53f8\u6cd5\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u76f8\u5173\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u3002</p> <p> \u200b\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\uff1f</p>"},{"location":"zh/about/privacy/#1","title":"1. \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u54ea\u4e9b\u200b\u4fe1\u606f\u200b\uff1f","text":""},{"location":"zh/about/privacy/#_2","title":"\u60a8\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u60a8\u200b\u5411\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u60a8\u200b\u81ea\u613f\u200b\u5411\u200b\u6211\u4eec\u200b\u63d0\u4f9b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u8868\u8fbe\u200b\u5bf9\u200b\u6211\u4eec\u200b\u6216\u200b\u6211\u4eec\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u670d\u52a1\u200b\u7684\u200b\u5174\u8da3\u200b\u3001\u200b\u53c2\u4e0e\u200b\u670d\u52a1\u200b\u4e0a\u200b\u7684\u200b\u6d3b\u52a8\u200b\u6216\u200b\u4ee5\u200b\u5176\u4ed6\u200b\u65b9\u5f0f\u200b\u8054\u7cfb\u200b\u6211\u4eec\u200b\u65f6\u200b\u3002</p> <p>\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b</p> <p>\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p>"},{"location":"zh/about/privacy/#_3","title":"\u81ea\u52a8\u200b\u6536\u96c6\u200b\u7684\u200b\u4fe1\u606f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u67d0\u4e9b\u200b\u4fe1\u606f\u200b\u2014\u2014\u200b\u5982\u200bIP\u200b\u5730\u5740\u200b\u548c\u200b/\u200b\u6216\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u8bbe\u5907\u200b\u7279\u5f81\u200b\u2014\u2014\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u88ab\u200b\u6536\u96c6\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5728\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u3001\u200b\u4f7f\u7528\u200b\u6216\u200b\u5bfc\u822a\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u81ea\u52a8\u200b\u6536\u96c6\u200b\u67d0\u4e9b\u200b\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u4e0d\u4f1a\u200b\u900f\u9732\u200b\u60a8\u200b\u7684\u200b\u7279\u5b9a\u200b\u8eab\u4efd\u200b\uff08\u200b\u5982\u200b\u60a8\u200b\u7684\u200b\u59d3\u540d\u200b\u6216\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\uff09\uff0c\u200b\u4f46\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u8bbe\u5907\u200b\u548c\u200b\u4f7f\u7528\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u8bbe\u5907\u200b\u7279\u6027\u200b\u3001\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u3001\u200b\u8bed\u8a00\u200b\u504f\u597d\u200b\u3001\u200b\u5f15\u7528\u200bURL\u3001\u200b\u8bbe\u5907\u200b\u540d\u79f0\u200b\u3001\u200b\u56fd\u5bb6\u200b\u3001\u200b\u4f4d\u7f6e\u200b\u3001\u200b\u6709\u5173\u200b\u60a8\u200b\u5982\u4f55\u200b\u4ee5\u53ca\u200b\u4f55\u65f6\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u5176\u4ed6\u200b\u6280\u672f\u200b\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u4fe1\u606f\u200b\u4e3b\u8981\u200b\u662f\u200b\u4e3a\u4e86\u200b\u7ef4\u62a4\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u5b89\u5168\u6027\u200b\u548c\u200b\u8fd0\u4f5c\u200b\u6240\u200b\u9700\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6211\u4eec\u200b\u5185\u90e8\u200b\u7684\u200b\u5206\u6790\u200b\u548c\u200b\u62a5\u544a\u200b\u76ee\u7684\u200b\u3002</p> <p>\u200b\u50cf\u200b\u8bb8\u591a\u200b\u4f01\u4e1a\u200b\u4e00\u6837\u200b\uff0c\u200b\u6211\u4eec\u200b\u8fd8\u200b\u901a\u8fc7\u200bcookies\u200b\u548c\u200b\u7c7b\u4f3c\u200b\u6280\u672f\u200b\u6536\u96c6\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u4fe1\u606f\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u6807\u8bc6\u7b26\u200b\u3002     \u200b\u6807\u8bc6\u7b26\u200b\u662f\u200b\u5f53\u200b\u60a8\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u751f\u6210\u200b\u7684\u200b\u7279\u5b9a\u200b\u4e8e\u200b\u8bbe\u5907\u200b\u548c\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200b\u552f\u4e00\u200b\u968f\u673a\u200b\u5b57\u7b26\u4e32\u200b\u3002     \u200b\u8be5\u200b\u6807\u8bc6\u7b26\u200b\u5b58\u50a8\u200b\u5728\u200b\u60a8\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u7684\u200b\u4e00\u4e2a\u200bcookie\u200b\u4e2d\u200b\uff0c\u200b\u4f7f\u200b\u6211\u4eec\u200b\u80fd\u591f\u200b\u5728\u200b\u591a\u4e2a\u200b\u4f1a\u8bdd\u200b\u4e2d\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u8fd4\u56de\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u8bc6\u522b\u200b\u60a8\u200b\u3002     \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6e05\u9664\u200b\u6d4f\u89c8\u5668\u200b\u7f13\u5b58\u200b\u968f\u65f6\u200b\u5220\u9664\u200b\u6b64\u200bcookie\u3002</li> <li>\u200b\u65e5\u5fd7\u200b\u548c\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u3002     \u200b\u65e5\u5fd7\u200b\u548c\u200b\u4f7f\u7528\u200b\u6570\u636e\u200b\u662f\u200b\u4e0e\u200b\u670d\u52a1\u200b\u76f8\u5173\u200b\u7684\u200b\u3001\u200b\u8bca\u65ad\u200b\u3001\u200b\u4f7f\u7528\u200b\u548c\u200b\u6027\u80fd\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5f53\u200b\u60a8\u200b\u8bbf\u95ee\u200b\u6216\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u65f6\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4f1a\u200b\u81ea\u52a8\u200b\u6536\u96c6\u200b\uff0c\u200b\u5e76\u200b\u8bb0\u5f55\u200b\u5728\u200b\u65e5\u5fd7\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u3002     \u200b\u6839\u636e\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u4e92\u52a8\u200b\u65b9\u5f0f\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u65e5\u5fd7\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\u3001\u200b\u8bbe\u5907\u200b\u4fe1\u606f\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u7c7b\u578b\u200b\u548c\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u6709\u5173\u200b\u60a8\u200b\u5728\u200b\u670d\u52a1\u200b\u4e2d\u200b\u7684\u200b\u6d3b\u52a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff08\u200b\u5982\u200b\u4e0e\u200b\u60a8\u200b\u4f7f\u7528\u200b\u76f8\u5173\u200b\u7684\u200b\u65e5\u671f\u200b/\u200b\u65f6\u95f4\u200b\u6233\u200b\u3001\u200b\u6d4f\u89c8\u200b\u548c\u200b\u67e5\u770b\u200b\u7684\u200b\u9875\u9762\u200b\u548c\u200b\u6587\u4ef6\u200b\u3001\u200b\u641c\u7d22\u200b\u4ee5\u53ca\u200b\u60a8\u200b\u91c7\u53d6\u200b\u7684\u200b\u5176\u4ed6\u200b\u64cd\u4f5c\u200b\uff0c\u200b\u4f8b\u5982\u200b\u60a8\u200b\u4f7f\u7528\u200b\u7684\u200b\u529f\u80fd\u200b\uff09\uff0c\u200b\u8bbe\u5907\u200b\u4e8b\u4ef6\u200b\u4fe1\u606f\u200b\uff08\u200b\u5982\u200b\u7cfb\u7edf\u6d3b\u52a8\u200b\u3001\u200b\u9519\u8bef\u62a5\u544a\u200b\uff08\u200b\u6709\u65f6\u200b\u79f0\u4e3a\u200b\u2019\u200b\u5d29\u6e83\u200b\u8f6c\u50a8\u200b\u2019\uff09\u200b\u548c\u200b\u786c\u4ef6\u200b\u8bbe\u7f6e\u200b\uff09\u3002</li> <li>\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u7684\u200b\u8ba1\u7b97\u673a\u200b\u3001\u200b\u7535\u8bdd\u200b\u3001\u200b\u5e73\u677f\u200b\u6216\u200b\u5176\u4ed6\u200b\u8bbe\u5907\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002     \u200b\u6839\u636e\u200b\u6240\u200b\u4f7f\u7528\u200b\u7684\u200b\u8bbe\u5907\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u8bbe\u5907\u200b\u6570\u636e\u200b\u53ef\u80fd\u200b\u5305\u62ec\u200b\u5982\u4e0b\u200b\u4fe1\u606f\u200b\uff1a\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\uff08\u200b\u6216\u200b\u4ee3\u7406\u670d\u52a1\u5668\u200b\uff09\u3001\u200b\u8bbe\u5907\u200b\u548c\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u8bc6\u522b\u200b\u53f7\u200b\u3001\u200b\u4f4d\u7f6e\u200b\u3001\u200b\u6d4f\u89c8\u5668\u200b\u7c7b\u578b\u200b\u3001\u200b\u786c\u4ef6\u200b\u578b\u53f7\u200b\u3001\u200b\u4e92\u8054\u7f51\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u548c\u200b/\u200b\u6216\u200b\u79fb\u52a8\u200b\u8fd0\u8425\u5546\u200b\u3001\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u548c\u200b\u7cfb\u7edf\u914d\u7f6e\u200b\u4fe1\u606f\u200b\u3002</li> <li>\u200b\u4f4d\u7f6e\u200b\u6570\u636e\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u4f4d\u7f6e\u200b\u6570\u636e\u200b\uff0c\u200b\u5982\u200b\u60a8\u200b\u8bbe\u5907\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u662f\u200b\u7cbe\u786e\u200b\u7684\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u4e0d\u200b\u7cbe\u786e\u200b\u7684\u200b\u3002     \u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u591a\u5c11\u200b\u4fe1\u606f\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u7528\u4e8e\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u7684\u200b\u8bbe\u5907\u200b\u7684\u200b\u7c7b\u578b\u200b\u548c\u200b\u8bbe\u7f6e\u200b\u3002     \u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200bGPS\u200b\u548c\u200b\u5176\u4ed6\u200b\u6280\u672f\u200b\u6765\u200b\u6536\u96c6\u200b\u5730\u7406\u4f4d\u7f6e\u200b\u6570\u636e\u200b\uff0c\u200b\u544a\u8bc9\u200b\u6211\u4eec\u200b\u60a8\u200b\u5f53\u524d\u200b\u7684\u200b\u4f4d\u7f6e\u200b\uff08\u200b\u57fa\u4e8e\u200b\u60a8\u200b\u7684\u200bIP\u200b\u5730\u5740\u200b\uff09\u3002     \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4e0d\u8ba9\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u6b64\u200b\u4fe1\u606f\u200b\uff0c\u200b\u65b9\u6cd5\u200b\u662f\u200b\u62d2\u7edd\u200b\u8bbf\u95ee\u4fe1\u606f\u200b\u6216\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u8bbe\u5907\u200b\u4e0a\u200b\u7981\u7528\u200b\u4f4d\u7f6e\u200b\u8bbe\u7f6e\u200b\u3002</li> </ul>"},{"location":"zh/about/privacy/#_4","title":"\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7c7b\u522b","text":"<p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u5185\u200b\uff0c\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u7c7b\u522b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> \u200b\u7c7b\u522b\u200b \u200b\u793a\u4f8b\u200b \u200b\u5df2\u200b\u6536\u96c6\u200b A. \u200b\u6807\u8bc6\u7b26\u200b \u200b\u8054\u7cfb\u65b9\u5f0f\u200b\uff0c\u200b\u5982\u200b\u771f\u5b9e\u200b\u59d3\u540d\u200b\u3001\u200b\u522b\u540d\u200b\u3001\u200b\u90ae\u653f\u200b\u5730\u5740\u200b\u3001\u200b\u7535\u8bdd\u200b\u6216\u200b\u79fb\u52a8\u200b\u8054\u7cfb\u200b\u53f7\u7801\u200b\u3001\u200b\u72ec\u7279\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6807\u8bc6\u7b26\u200b\u3001\u200b\u5728\u7ebf\u200b\u6807\u8bc6\u7b26\u200b\u3001\u200b\u4e92\u8054\u7f51\u534f\u8bae\u200b\u5730\u5740\u200b\u3001\u200b\u7535\u5b50\u90ae\u4ef6\u200b\u5730\u5740\u200b\u548c\u200b\u5e10\u6237\u200b\u540d\u79f0\u200b \u200b\u662f\u200b B. \u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u5ba2\u6237\u200b\u8bb0\u5f55\u200b\u6cd5\u4e2d\u200b\u5b9a\u4e49\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b \u200b\u59d3\u540d\u200b\u3001\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\u3001\u200b\u6559\u80b2\u200b\u3001\u200b\u5c31\u4e1a\u200b\u3001\u200b\u5c31\u4e1a\u200b\u5386\u53f2\u200b\u548c\u200b\u8d22\u52a1\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b C. \u200b\u5dde\u200b\u6216\u200b\u8054\u90a6\u200b\u6cd5\u5f8b\u200b\u4e0b\u200b\u7684\u200b\u53d7\u200b\u4fdd\u62a4\u200b\u5206\u7c7b\u200b\u7279\u5f81\u200b \u200b\u6027\u522b\u200b\u3001\u200b\u5e74\u9f84\u200b\u3001\u200b\u51fa\u751f\u65e5\u671f\u200b\u3001\u200b\u79cd\u65cf\u200b\u548c\u200b\u6c11\u65cf\u200b\u3001\u200b\u56fd\u7c4d\u200b\u3001\u200b\u5a5a\u59fb\u72b6\u51b5\u200b\u548c\u200b\u5176\u4ed6\u200b\u4eba\u53e3\u200b\u7edf\u8ba1\u6570\u636e\u200b \u200b\u5426\u200b D. \u200b\u5546\u4e1a\u4fe1\u606f\u200b \u200b\u4ea4\u6613\u200b\u4fe1\u606f\u200b\u3001\u200b\u8d2d\u4e70\u200b\u5386\u53f2\u200b\u3001\u200b\u8d22\u52a1\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\u548c\u200b\u652f\u4ed8\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b E. \u200b\u751f\u7269\u200b\u8bc6\u522b\u200b\u4fe1\u606f\u200b \u200b\u6307\u7eb9\u200b\u548c\u200b\u58f0\u7eb9\u200b \u200b\u5426\u200b F. \u200b\u4e92\u8054\u7f51\u200b\u6216\u200b\u5176\u4ed6\u200b\u7c7b\u4f3c\u200b\u7f51\u7edc\u200b\u6d3b\u52a8\u200b \u200b\u6d4f\u89c8\u200b\u5386\u53f2\u200b\u3001\u200b\u641c\u7d22\u200b\u5386\u53f2\u200b\u3001\u200b\u5728\u7ebf\u200b\u884c\u4e3a\u200b\u3001\u200b\u5174\u8da3\u200b\u6570\u636e\u200b\u548c\u200b\u4e0e\u200b\u6211\u4eec\u200b\u548c\u200b\u5176\u4ed6\u200b\u7f51\u7ad9\u200b\u3001\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u3001\u200b\u7cfb\u7edf\u200b\u548c\u200b\u5e7f\u544a\u200b\u7684\u200b\u4e92\u52a8\u200b \u200b\u662f\u200b G. \u200b\u5730\u7406\u4f4d\u7f6e\u200b\u6570\u636e\u200b \u200b\u8bbe\u5907\u200b\u4f4d\u7f6e\u200b \u200b\u662f\u200b H. \u200b\u97f3\u9891\u200b\u3001\u200b\u7535\u5b50\u200b\u3001\u200b\u611f\u89c9\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u4fe1\u606f\u200b \u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u4e1a\u52a1\u200b\u6d3b\u52a8\u200b\u4e2d\u200b\u521b\u5efa\u200b\u7684\u200b\u56fe\u50cf\u200b\u548c\u200b\u97f3\u9891\u200b\u3001\u200b\u89c6\u9891\u200b\u6216\u200b\u901a\u8bdd\u5f55\u97f3\u200b \u200b\u5426\u200b I. \u200b\u4e0e\u200b\u804c\u4e1a\u200b\u76f8\u5173\u200b\u7684\u200b\u4fe1\u606f\u200b \u200b\u4e3a\u4e86\u200b\u5728\u200b\u4e1a\u52a1\u200b\u5c42\u9762\u200b\u63d0\u4f9b\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u800c\u200b\u6536\u96c6\u200b\u7684\u200b\u5546\u4e1a\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\u6216\u200b\u804c\u52a1\u200b\u540d\u79f0\u200b\u3001\u200b\u5de5\u4f5c\u200b\u5386\u53f2\u200b\u548c\u200b\u804c\u4e1a\u8d44\u683c\u200b \u200b\u5426\u200b J. \u200b\u6559\u80b2\u200b\u4fe1\u606f\u200b \u200b\u5b66\u751f\u200b\u8bb0\u5f55\u200b\u548c\u200b\u76ee\u5f55\u200b\u4fe1\u606f\u200b \u200b\u5426\u200b K. \u200b\u4ece\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u4e2d\u200b\u63a8\u65ad\u51fa\u200b\u7684\u200b\u63a8\u8bba\u200b \u200b\u4ece\u200b\u4e0a\u8ff0\u200b\u4efb\u4f55\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u4e2d\u200b\u63a8\u65ad\u51fa\u200b\u7684\u200b\u7528\u4e8e\u200b\u521b\u5efa\u200b\u4e2a\u4eba\u200b\u504f\u597d\u200b\u548c\u200b\u7279\u5f81\u200b\u7684\u200b\u6982\u51b5\u200b\u6216\u200b\u6458\u8981\u200b \u200b\u662f\u200b L. \u200b\u654f\u611f\u200b\u4e2a\u4eba\u4fe1\u606f\u200b \u200b\u5426\u200b <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u80fd\u200b\u5728\u200b\u60a8\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4eb2\u81ea\u200b\u3001\u200b\u5728\u7ebf\u200b\u6216\u200b\u901a\u8fc7\u200b\u7535\u8bdd\u200b\u6216\u200b\u90ae\u4ef6\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4e92\u52a8\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u6536\u96c6\u200b\u5176\u4ed6\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u901a\u8fc7\u200b\u6211\u4eec\u200b\u7684\u200b\u5ba2\u6237\u200b\u652f\u6301\u200b\u6e20\u9053\u200b\u83b7\u5f97\u200b\u5e2e\u52a9\u200b\uff1b</li> <li>\u200b\u53c2\u4e0e\u200b\u5ba2\u6237\u200b\u8c03\u67e5\u200b\u6216\u200b\u7ade\u8d5b\u200b\uff1b\u200b\u4ee5\u53ca\u200b</li> <li>\u200b\u4fc3\u8fdb\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4ea4\u4ed8\u200b\u5e76\u200b\u56de\u5e94\u200b\u60a8\u200b\u7684\u200b\u67e5\u8be2\u200b\u3002</li> </ul> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u671f\u9650\u5185\u200b\u4f7f\u7528\u200b\u548c\u200b\u4fdd\u7559\u200b\u6240\u200b\u6536\u96c6\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u5e76\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u9075\u5b88\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u3001\u200b\u89e3\u51b3\u200b\u4e89\u8bae\u200b\u548c\u200b\u6267\u884c\u200b\u6211\u4eec\u200b\u7684\u200b\u534f\u8bae\u200b\uff1a</p> <ul> <li>A \u200b\u7c7b\u200b\uff1a\u200b\u65e0\u9650\u671f\u200b</li> <li>F \u200b\u7c7b\u200b\uff1a\u200b\u65e0\u9650\u671f\u200b</li> <li>G \u200b\u7c7b\u200b\uff1a\u200b\u65e0\u9650\u671f\u200b</li> <li>K \u200b\u7c7b\u200b\uff1a\u200b\u65e0\u9650\u671f\u200b</li> </ul>"},{"location":"zh/about/privacy/#2","title":"2. \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u63d0\u4f9b\u200b\u3001\u200b\u6539\u5584\u200b\u548c\u200b\u7ba1\u7406\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\uff0c\u200b\u4e0e\u200b\u60a8\u200b\u6c9f\u901a\u200b\uff0c\u200b\u8fdb\u884c\u200b\u5b89\u5168\u200b\u548c\u200b\u9632\u200b\u6b3a\u8bc8\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e5f\u200b\u53ef\u80fd\u200b\u5728\u200b\u5f97\u5230\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u51fa\u4e8e\u200b\u5176\u4ed6\u200b\u76ee\u7684\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u51fa\u4e8e\u200b\u591a\u79cd\u200b\u539f\u56e0\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u5982\u4f55\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u4e92\u52a8\u200b\uff0c\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u4fdd\u62a4\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4f5c\u4e3a\u200b\u6211\u4eec\u200b\u4fdd\u6301\u200b\u670d\u52a1\u200b\u5b89\u5168\u200b\u7684\u200b\u52aa\u529b\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\uff0c\u200b\u5305\u62ec\u200b\u76d1\u63a7\u200b\u548c\u200b\u9884\u9632\u200b\u6b3a\u8bc8\u200b\u3002</li> <li>\u200b\u8bc6\u522b\u200b\u7528\u6237\u200b\u8d8b\u52bf\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u6709\u5173\u200b\u60a8\u200b\u5982\u4f55\u200b\u4f7f\u7528\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u66f4\u597d\u200b\u5730\u200b\u4e86\u89e3\u200b\u5b83\u4eec\u200b\u7684\u200b\u4f7f\u7528\u200b\u60c5\u51b5\u200b\uff0c\u200b\u4ece\u800c\u200b\u6539\u8fdb\u200b\u5b83\u4eec\u200b\u3002</li> <li>\u200b\u4fdd\u5b58\u200b\u6216\u200b\u4fdd\u62a4\u200b\u4e2a\u4eba\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u5fc5\u8981\u200b\u65f6\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u4fdd\u5b58\u200b\u6216\u200b\u4fdd\u62a4\u200b\u4e2a\u4eba\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4e3a\u4e86\u200b\u9632\u6b62\u200b\u4f24\u5bb3\u200b\u3002</li> </ul>"},{"location":"zh/about/privacy/#3","title":"3. \u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u6709\u200b\u4ec0\u4e48\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ea\u6709\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u8981\u200b\u4e14\u200b\u6709\u200b\u6709\u6548\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u7406\u7531\u200b\uff08\u200b\u5373\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\uff09\u200b\u65f6\u624d\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u5982\u200b\u4e0e\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3001\u200b\u9075\u5b88\u200b\u6cd5\u5f8b\u200b\u3001\u200b\u63d0\u4f9b\u200b\u670d\u52a1\u200b\u7ed9\u200b\u60a8\u200b\u8fdb\u5165\u200b\u6216\u200b\u5c65\u884c\u200b\u6211\u4eec\u200b\u7684\u200b\u5408\u540c\u200b\u4e49\u52a1\u200b\u3001\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b\u6216\u200b\u6ee1\u8db3\u200b\u6211\u4eec\u200b\u5408\u6cd5\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5229\u76ca\u200b\u3002</p> <p>\u200b\u6b27\u76df\u200b\u901a\u7528\u200b\u6570\u636e\u4fdd\u62a4\u200b\u6761\u4f8b\u200b\uff08GDPR\uff09\u200b\u548c\u200b\u82f1\u56fd\u200bGDPR\u200b\u8981\u6c42\u200b\u6211\u4eec\u200b\u89e3\u91ca\u200b\u6211\u4eec\u200b\u4f9d\u9760\u200b\u7684\u200b\u6709\u6548\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\u4ee5\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u56e0\u6b64\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f9d\u8d56\u200b\u4ee5\u4e0b\u200b\u6cd5\u5f8b\u4f9d\u636e\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <ul> <li>\u200b\u540c\u610f\u200b\u3002     \u200b\u5982\u679c\u200b\u60a8\u200b\u5df2\u200b\u7ed9\u200b\u6211\u4eec\u200b\u660e\u786e\u200b\u540c\u610f\u200b\u4f7f\u7528\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7528\u4e8e\u200b\u67d0\u4e2a\u200b\u7279\u5b9a\u200b\u76ee\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002     \u200b\u60a8\u200b\u6709\u6743\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002     \u200b\u4e86\u89e3\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002</li> <li>\u200b\u5408\u6cd5\u5229\u76ca\u200b\u3002     \u200b\u5f53\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u51fa\u4e8e\u200b\u6211\u4eec\u200b\u5408\u6cd5\u200b\u7684\u200b\u4e1a\u52a1\u200b\u5229\u76ca\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u662f\u200b\u5408\u7406\u200b\u5fc5\u8981\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u8fd9\u4e9b\u200b\u5229\u76ca\u200b\u4e0d\u200b\u8d85\u8fc7\u200b\u60a8\u200b\u7684\u200b\u5229\u76ca\u200b\u548c\u200b\u57fa\u672c\u6743\u5229\u200b\u4e0e\u200b\u81ea\u7531\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002     \u200b\u4f8b\u5982\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u7528\u4e8e\u200b\uff1a<ul> <li>\u200b\u5206\u6790\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u5982\u4f55\u200b\u88ab\u200b\u4f7f\u7528\u200b\uff0c\u200b\u4ee5\u4fbf\u200b\u6211\u4eec\u200b\u53ef\u4ee5\u200b\u6539\u8fdb\u200b\u5b83\u4eec\u200b\u4ee5\u200b\u5438\u5f15\u200b\u548c\u200b\u4fdd\u7559\u200b\u7528\u6237\u200b</li> <li>\u200b\u8bca\u65ad\u200b\u95ee\u9898\u200b\u548c\u200b/\u200b\u6216\u200b\u9884\u9632\u200b\u6b3a\u8bc8\u200b\u6d3b\u52a8\u200b</li> </ul> </li> <li>\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u987b\u200b\u9075\u5b88\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u4e49\u52a1\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b\u4e0e\u200b\u6267\u6cd5\u200b\u673a\u6784\u200b\u6216\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u5408\u4f5c\u200b\u3001\u200b\u884c\u4f7f\u200b\u6216\u200b\u634d\u536b\u200b\u6211\u4eec\u200b\u7684\u200b\u6cd5\u5f8b\u200b\u6743\u5229\u200b\uff0c\u200b\u6216\u200b\u5728\u200b\u6211\u4eec\u200b\u53c2\u4e0e\u200b\u7684\u200b\u8bc9\u8bbc\u200b\u4e2d\u200b\u62ab\u9732\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u4f5c\u4e3a\u200b\u8bc1\u636e\u200b\u3002</li> <li>\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5728\u200b\u6211\u4eec\u200b\u8ba4\u4e3a\u200b\u5fc5\u987b\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u6216\u200b\u7b2c\u4e09\u65b9\u200b\u7684\u200b\u91cd\u8981\u200b\u5229\u76ca\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4f8b\u5982\u200b\u6d89\u53ca\u200b\u6f5c\u5728\u200b\u5a01\u80c1\u200b\u4efb\u4f55\u4eba\u200b\u7684\u200b\u5b89\u5168\u200b\u7684\u200b\u60c5\u51b5\u200b\u3002</li> </ul> <p>\u200b\u5728\u200b\u52a0\u62ff\u5927\u200b\u5904\u7406\u200b\u7684\u200b\u540c\u610f\u200b</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u4f4d\u4e8e\u200b\u52a0\u62ff\u5927\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u4e0b\u200b\u5728\u200b\u67d0\u4e9b\u200b\u7279\u6b8a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u65e0\u9700\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5408\u6cd5\u200b\u5730\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u5305\u62ec\u200b\u4f8b\u5982\u200b\uff1a</p> <ul> <li>\u200b\u5982\u679c\u200b\u6536\u96c6\u200b\u660e\u663e\u200b\u7b26\u5408\u200b\u4e2a\u4eba\u200b\u7684\u200b\u5229\u76ca\u200b\u4e14\u200b\u65e0\u6cd5\u200b\u53ca\u65f6\u200b\u83b7\u5f97\u200b\u540c\u610f\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u8c03\u67e5\u200b\u548c\u200b\u6b3a\u8bc8\u200b\u68c0\u6d4b\u200b\u4e0e\u200b\u9884\u9632\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u5546\u4e1a\u200b\u4ea4\u6613\u200b\uff0c\u200b\u524d\u63d0\u200b\u662f\u200b\u6ee1\u8db3\u200b\u67d0\u4e9b\u200b\u6761\u4ef6\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u5305\u542b\u200b\u5728\u200b\u8bc1\u4eba\u200b\u58f0\u660e\u200b\u4e2d\u200b\uff0c\u200b\u4e14\u200b\u6536\u96c6\u200b\u5bf9\u4e8e\u200b\u8bc4\u4f30\u200b\u3001\u200b\u5904\u7406\u200b\u6216\u200b\u89e3\u51b3\u200b\u4fdd\u9669\u200b\u7d22\u8d54\u200b\u662f\u200b\u5fc5\u8981\u200b\u7684\u200b</li> <li>\u200b\u7528\u4e8e\u200b\u8bc6\u522b\u200b\u53d7\u4f24\u200b\u3001\u200b\u751f\u75c5\u200b\u6216\u200b\u5df2\u6545\u200b\u4eba\u58eb\u200b\u5e76\u200b\u4e0e\u200b\u8fd1\u4eb2\u200b\u6c9f\u901a\u200b</li> <li>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u6709\u200b\u5408\u7406\u200b\u7684\u200b\u7406\u7531\u200b\u76f8\u4fe1\u200b\u67d0\u4e2a\u200b\u4eba\u200b\u5df2\u7ecf\u200b\u3001\u200b\u6b63\u5728\u200b\u6216\u200b\u53ef\u80fd\u200b\u6210\u4e3a\u200b\u91d1\u878d\u200b\u6ee5\u7528\u200b\u7684\u200b\u53d7\u5bb3\u8005\u200b</li> <li>\u200b\u5982\u679c\u200b\u5408\u7406\u200b\u9884\u671f\u200b\u901a\u8fc7\u200b\u5f81\u5f97\u200b\u540c\u610f\u200b\u4ee5\u200b\u6536\u96c6\u200b\u548c\u200b\u4f7f\u7528\u200b\u4fe1\u606f\u200b\u4f1a\u200b\u635f\u5bb3\u200b\u4fe1\u606f\u200b\u7684\u200b\u53ef\u7528\u6027\u200b\u6216\u200b\u51c6\u786e\u6027\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6536\u96c6\u200b\u5bf9\u4e8e\u200b\u8c03\u67e5\u200b\u8fdd\u53cd\u200b\u534f\u8bae\u200b\u6216\u200b\u8fdd\u53cd\u200b\u52a0\u62ff\u5927\u200b\u6216\u7701\u200b\u6cd5\u5f8b\u200b\u7684\u200b\u76ee\u7684\u200b\u662f\u200b\u5408\u7406\u200b\u7684\u200b</li> <li>\u200b\u5982\u679c\u200b\u62ab\u9732\u200b\u662f\u200b\u4e3a\u4e86\u200b\u9075\u5b88\u200b\u4f20\u7968\u200b\u3001\u200b\u641c\u67e5\u200b\u4ee4\u200b\u3001\u200b\u6cd5\u9662\u200b\u547d\u4ee4\u200b\u6216\u200b\u4e0e\u200b\u8bb0\u5f55\u200b\u751f\u4ea7\u200b\u76f8\u5173\u200b\u7684\u200b\u6cd5\u9662\u200b\u89c4\u5219\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u662f\u200b\u7531\u200b\u4e2a\u4eba\u200b\u5728\u200b\u5176\u200b\u5c31\u4e1a\u200b\u3001\u200b\u4e1a\u52a1\u200b\u6216\u200b\u4e13\u4e1a\u200b\u8fc7\u7a0b\u200b\u4e2d\u200b\u4ea7\u751f\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u6536\u96c6\u200b\u4e0e\u200b\u4fe1\u606f\u200b\u4ea7\u751f\u200b\u7684\u200b\u76ee\u7684\u200b\u4e00\u81f4\u200b</li> <li>\u200b\u5982\u679c\u200b\u6536\u96c6\u200b\u4ec5\u200b\u7528\u4e8e\u200b\u65b0\u95fb\u200b\u3001\u200b\u827a\u672f\u200b\u6216\u200b\u6587\u5b66\u200b\u76ee\u7684\u200b</li> <li>\u200b\u5982\u679c\u200b\u4fe1\u606f\u200b\u662f\u200b\u516c\u5f00\u200b\u53ef\u7528\u200b\u7684\u200b\uff0c\u200b\u5e76\u4e14\u200b\u901a\u8fc7\u200b\u89c4\u5b9a\u200b\u6307\u5b9a\u200b</li> </ul>"},{"location":"zh/about/privacy/#4","title":"4. \u200b\u6211\u4eec\u200b\u4f55\u65f6\u200b\u4ee5\u53ca\u200b\u4e0e\u200b\u8c01\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u672c\u8282\u200b\u63cf\u8ff0\u200b\u7684\u200b\u7279\u5b9a\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u548c\u200b/\u200b\u6216\u200b\u4e0e\u200b\u4ee5\u4e0b\u200b\u7b2c\u4e09\u65b9\u200b\u5171\u4eab\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u5c06\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7528\u4e8e\u200b\u6211\u4eec\u200b\u7684\u200b\u4e1a\u52a1\u200b\u76ee\u7684\u200b\uff0c\u200b\u5982\u200b\u8fdb\u884c\u200b\u5185\u90e8\u200b\u7814\u7a76\u200b\u4ee5\u200b\u8fdb\u884c\u200b\u6280\u672f\u5f00\u53d1\u200b\u548c\u200b\u5c55\u793a\u200b\u3002 \u200b\u8fd9\u200b\u4e0d\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u201c\u200b\u51fa\u552e\u200b\u201d\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u4f9b\u5e94\u5546\u200b\u3001\u200b\u987e\u95ee\u200b\u548c\u200b\u5176\u4ed6\u200b\u7b2c\u4e09\u65b9\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u3002 \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0e\u200b\u4e3a\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u6216\u200b\u4ee3\u8868\u200b\u6211\u4eec\u200b\u5de5\u4f5c\u200b\u5e76\u200b\u9700\u8981\u200b\u8bbf\u95ee\u200b\u6b64\u7c7b\u200b\u4fe1\u606f\u200b\u4ee5\u200b\u6267\u884c\u200b\u8be5\u200b\u5de5\u4f5c\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u4f9b\u5e94\u5546\u200b\u3001\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u3001\u200b\u627f\u5305\u5546\u200b\u6216\u200b\u4ee3\u7406\u200b\uff08\u201c\u200b\u7b2c\u4e09\u65b9\u200b\u201d\uff09\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u6570\u636e\u200b\u3002 \u200b\u6211\u4eec\u200b\u4e0e\u200b\u6211\u4eec\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7b7e\u8ba2\u200b\u4e86\u200b\u5408\u540c\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5408\u540c\u200b\u65e8\u5728\u200b\u5e2e\u52a9\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u8fd9\u200b\u610f\u5473\u7740\u200b\u4ed6\u4eec\u200b\u4e0d\u80fd\u200b\u5728\u200b\u672a\u7ecf\u200b\u6211\u4eec\u200b\u6307\u793a\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u505a\u200b\u4efb\u4f55\u200b\u4e8b\u60c5\u200b\u3002 \u200b\u4ed6\u4eec\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u4e0e\u200b\u6211\u4eec\u200b\u4ee5\u5916\u200b\u7684\u200b\u4efb\u4f55\u200b\u7ec4\u7ec7\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002 \u200b\u4ed6\u4eec\u200b\u8fd8\u200b\u627f\u8bfa\u200b\u4fdd\u62a4\u200b\u4ed6\u4eec\u200b\u4ee3\u8868\u200b\u6211\u4eec\u200b\u6301\u6709\u200b\u7684\u200b\u6570\u636e\u200b\u5e76\u200b\u6309\u7167\u200b\u6211\u4eec\u200b\u7684\u200b\u6307\u793a\u200b\u4fdd\u7559\u200b\u8be5\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u5982\u4e0b\u200b\uff1a</p> <ul> <li>\u200b\u5e7f\u544a\u200b\u3001\u200b\u76f4\u9500\u200b\u548c\u200b\u6f5c\u5728\u200b\u5ba2\u6237\u200b\u751f\u6210\u200b<ul> <li>Google AdSense</li> </ul> </li> <li>\u200b\u4e91\u200b\u8ba1\u7b97\u200b\u670d\u52a1\u200b<ul> <li>Microsoft Azure</li> <li>Amazon Web Services (AWS)</li> <li>Google Cloud Platform (GCP)</li> </ul> </li> <li>\u200b\u901a\u4fe1\u200b\u548c\u200b\u5185\u5bb9\u200b\u4ea4\u4ed8\u200b\u7f51\u7edc\u200b (CDN) \u200b\u670d\u52a1\u200b<ul> <li>Cloudflare</li> </ul> </li> <li>\u200b\u5185\u5bb9\u200b\u4f18\u5316\u200b<ul> <li>Google\u200b\u7ad9\u70b9\u200b\u641c\u7d22\u200b</li> <li>Google\u200b\u5b57\u4f53\u200b</li> </ul> </li> <li>\u200b\u529f\u80fd\u200b\u548c\u200b\u57fa\u7840\u8bbe\u65bd\u200b\u4f18\u5316\u200b<ul> <li>GitHub\u200b\u9875\u9762\u200b</li> </ul> </li> <li>\u200b\u7528\u6237\u200b\u8bc4\u8bba\u200b\u548c\u200b\u8bba\u575b\u200b<ul> <li>Disqus</li> <li>GitHub\u200b\u8bae\u9898\u200b</li> <li>GitHub\u200b\u8ba8\u8bba\u200b</li> </ul> </li> <li>\u200b\u7f51\u7edc\u200b\u548c\u200b\u79fb\u52a8\u200b\u5206\u6790\u200b<ul> <li>Google Analytics</li> </ul> </li> </ul> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u5728\u200b\u4ee5\u4e0b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <ul> <li>\u200b\u4e1a\u52a1\u200b\u8f6c\u79fb\u200b\u3002     \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u5728\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u5e76\u8d2d\u200b\u3001\u200b\u51fa\u552e\u200b\u516c\u53f8\u200b\u8d44\u4ea7\u200b\u3001\u200b\u878d\u8d44\u200b\u6216\u200b\u6536\u8d2d\u200b\u6211\u4eec\u200b\u5168\u90e8\u200b\u6216\u200b\u90e8\u5206\u200b\u4e1a\u52a1\u200b\u7684\u200b\u8c08\u5224\u200b\u4e2d\u200b\u5171\u4eab\u200b\u6216\u200b\u8f6c\u8ba9\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</li> </ul> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u51fa\u4e8e\u200b\u4e1a\u52a1\u200b\u76ee\u7684\u200b\u62ab\u9732\u200b\u4e86\u200b\u4ee5\u4e0b\u200b\u7c7b\u522b\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff1a</p> <p>\u200b\u65e0\u200b</p> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u51fa\u552e\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\uff1a</p> <p>\u200b\u65e0\u200b</p> <p>\u200b\u8fc7\u53bb\u200b\u5341\u4e8c\u200b\uff0812\uff09\u200b\u4e2a\u200b\u6708\u200b\u6211\u4eec\u200b\u4e0e\u200b\u4e4b\u200b\u5171\u4eab\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\uff1a</p> <ul> <li>\u200b\u7f51\u7edc\u200b\u548c\u200b\u79fb\u52a8\u200b\u5206\u6790\u200b<ul> <li>Google Analytics</li> </ul> </li> </ul>"},{"location":"zh/about/privacy/#5-cookies","title":"5. \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u4f7f\u7528\u200bcookies\u200b\u548c\u200b\u5176\u4ed6\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200bcookies\u200b\u548c\u200b\u5176\u4ed6\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u6765\u200b\u6536\u96c6\u200b\u548c\u200b\u5b58\u50a8\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u8fd8\u200b\u5141\u8bb8\u200b\u7b2c\u4e09\u65b9\u200b\u548c\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u7528\u4e8e\u200b\u5206\u6790\u200b\u548c\u200b\u5e7f\u544a\u200b\uff0c\u200b\u5305\u62ec\u200b\u5e2e\u52a9\u200b\u7ba1\u7406\u200b\u548c\u200b\u5c55\u793a\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6839\u636e\u200b\u60a8\u200b\u7684\u200b\u5174\u8da3\u200b\u5b9a\u5236\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6216\u200b\u53d1\u9001\u200b\u9057\u5f03\u200b\u8d2d\u7269\u8f66\u200b\u63d0\u9192\u200b\uff08\u200b\u53d6\u51b3\u4e8e\u200b\u60a8\u200b\u7684\u200b\u6c9f\u901a\u200b\u504f\u597d\u200b\uff09\u3002 \u200b\u8fd9\u4e9b\u200b\u7b2c\u4e09\u65b9\u200b\u548c\u200b\u670d\u52a1\u63d0\u4f9b\u5546\u200b\u4f7f\u7528\u200b\u4ed6\u4eec\u200b\u7684\u200b\u6280\u672f\u200b\u4e3a\u200b\u60a8\u200b\u63d0\u4f9b\u200b\u5b9a\u5236\u200b\u7684\u200b\u4ea7\u54c1\u200b\u548c\u200b\u670d\u52a1\u200b\u5e7f\u544a\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5e7f\u544a\u200b\u53ef\u80fd\u200b\u51fa\u73b0\u200b\u5728\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u200b\u6216\u200b\u5176\u4ed6\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u3002</p> <p>\u200b\u5728\u200b\u9002\u7528\u200b\u7684\u200b\u7f8e\u56fd\u200b\u5dde\u200b\u6cd5\u5f8b\u200b\u4e0b\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\u88ab\u200b\u89c6\u4e3a\u200b\u201c\u200b\u9500\u552e\u200b\u201d/\u201c\u200b\u5206\u4eab\u200b\u201d\uff08\u200b\u5305\u62ec\u200b\u76ee\u6807\u200b\u5e7f\u544a\u200b\uff0c\u200b\u6839\u636e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5b9a\u4e49\u200b\uff09\u200b\u7684\u200b\u7a0b\u5ea6\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u672c\u9875\u200b\u9876\u90e8\u200b\u6216\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u6765\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u8fd9\u4e9b\u200b\u5728\u7ebf\u200b\u8ddf\u8e2a\u200b\u6280\u672f\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p>"},{"location":"zh/about/privacy/#google-analytics","title":"Google Analytics","text":"<p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0e\u200bGoogle Analytics\u200b\u5171\u4eab\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u4ee5\u200b\u8ddf\u8e2a\u200b\u548c\u200b\u5206\u6790\u200b\u670d\u52a1\u200b\u7684\u200b\u4f7f\u7528\u200b\u60c5\u51b5\u200b\u3002 \u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f7f\u7528\u200b\u7684\u200bGoogle Analytics\u200b\u5e7f\u544a\u200b\u529f\u80fd\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>Google Analytics\u200b\u7684\u200b\u518d\u200b\u8425\u9500\u200b</li> <li>Google Display Network\u200b\u5370\u8c61\u200b\u62a5\u544a\u200b</li> <li>Google Analytics\u200b\u4eba\u53e3\u7edf\u8ba1\u200b\u548c\u200b\u5174\u8da3\u200b\u62a5\u544a\u200b</li> </ul> <p>\u200b\u8981\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u5728\u200b\u670d\u52a1\u200b\u4e2d\u200b\u901a\u8fc7\u200bGoogle Analytics\u200b\u8ddf\u8e2a\u200b\u60a8\u200b\uff0c\u200b\u8bf7\u200b\u8bbf\u95ee\u200bhttps://tools.google.com/dlpage/gaoptout\u3002</p> <p>\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5e7f\u544a\u200b\u8bbe\u7f6e\u200b\u548c\u200b\u79fb\u52a8\u200b\u5e94\u7528\u200b\u7684\u200b\u5e7f\u544a\u200b\u8bbe\u7f6e\u200b\u6765\u200b\u9009\u62e9\u200b\u9000\u51fa\u200bGoogle Analytics\u200b\u5e7f\u544a\u200b\u529f\u80fd\u200b\u3002</p> <p>\u200b\u5176\u4ed6\u200b\u9000\u51fa\u200b\u65b9\u5f0f\u200b\u5305\u62ec\u200bhttp://optout.networkadvertising.org/\u200b\u548c\u200bhttp://www.networkadvertising.org/mobile-choice\u3002</p> <p>\u200b\u6709\u5173\u200bGoogle\u200b\u9690\u79c1\u200b\u505a\u6cd5\u200b\u7684\u200b\u66f4\u200b\u591a\u200b\u4fe1\u606f\u200b\uff0c\u200b\u8bf7\u200b\u8bbf\u95ee\u200bGoogle\u200b\u9690\u79c1\u200b\u4e0e\u200b\u6761\u6b3e\u200b\u3002</p>"},{"location":"zh/about/privacy/#6","title":"6. \u200b\u6211\u4eec\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u591a\u4e45\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u4e2d\u200b\u6982\u8ff0\u200b\u7684\u200b\u76ee\u7684\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u9664\u975e\u200b\u6cd5\u5f8b\u200b\u53e6\u6709\u200b\u8981\u6c42\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ea\u4f1a\u200b\u5728\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u4e2d\u200b\u6982\u8ff0\u200b\u7684\u200b\u76ee\u7684\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u65f6\u95f4\u200b\u5185\u200b\u4fdd\u7559\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u9664\u975e\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6216\u200b\u5141\u8bb8\u200b\u66f4\u957f\u200b\u7684\u200b\u4fdd\u7559\u200b\u671f\u200b\uff08\u200b\u5982\u200b\u7a0e\u52a1\u200b\u3001\u200b\u4f1a\u8ba1\u200b\u6216\u200b\u5176\u4ed6\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\uff09\u3002</p> <p>\u200b\u5f53\u200b\u6211\u4eec\u200b\u6ca1\u6709\u200b\u6301\u7eed\u200b\u7684\u200b\u5408\u6cd5\u200b\u4e1a\u52a1\u200b\u9700\u8981\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u65f6\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u5220\u9664\u200b\u6216\u200b\u533f\u540d\u200b\u5316\u5b83\u200b\uff0c\u200b\u6216\u8005\u200b\uff0c\u200b\u5982\u679c\u200b\u8fd9\u200b\u4e0d\u200b\u53ef\u80fd\u200b\uff08\u200b\u4f8b\u5982\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5df2\u200b\u5b58\u50a8\u200b\u5728\u200b\u5907\u4efd\u200b\u6863\u6848\u200b\u4e2d\u200b\uff09\uff0c\u200b\u90a3\u4e48\u200b\u6211\u4eec\u200b\u5c06\u200b\u5b89\u5168\u200b\u5730\u200b\u5b58\u50a8\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5e76\u200b\u5c06\u200b\u5176\u200b\u4e0e\u200b\u4efb\u4f55\u200b\u8fdb\u4e00\u6b65\u200b\u5904\u7406\u200b\u9694\u79bb\u200b\uff0c\u200b\u76f4\u5230\u200b\u5220\u9664\u200b\u6210\u4e3a\u200b\u53ef\u80fd\u200b\u3002</p>"},{"location":"zh/about/privacy/#7","title":"7. \u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u6301\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u65e8\u5728\u200b\u901a\u8fc7\u200b\u4e00\u7cfb\u5217\u200b\u7ec4\u7ec7\u200b\u548c\u200b\u6280\u672f\u200b\u5b89\u5168\u63aa\u65bd\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5df2\u200b\u5b9e\u65bd\u200b\u9002\u5f53\u200b\u7684\u200b\u6280\u672f\u200b\u548c\u200b\u7ec4\u7ec7\u200b\u5b89\u5168\u63aa\u65bd\u200b\uff0c\u200b\u65e8\u5728\u200b\u4fdd\u62a4\u200b\u6211\u4eec\u200b\u5904\u7406\u200b\u7684\u200b\u4efb\u4f55\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u5b89\u5168\u200b\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u5c3d\u7ba1\u200b\u6211\u4eec\u200b\u91c7\u53d6\u200b\u4e86\u200b\u4fdd\u969c\u200b\u63aa\u65bd\u200b\u5e76\u200b\u52aa\u529b\u200b\u786e\u4fdd\u60a8\u200b\u7684\u200b\u4fe1\u606f\u5b89\u5168\u200b\uff0c\u200b\u4efb\u4f55\u200b\u901a\u8fc7\u200b\u4e92\u8054\u7f51\u200b\u7684\u200b\u7535\u5b50\u200b\u4f20\u8f93\u200b\u6216\u200b\u4fe1\u606f\u200b\u5b58\u50a8\u6280\u672f\u200b\u90fd\u200b\u65e0\u6cd5\u200b\u4fdd\u8bc1\u200b\u662f\u200b100%\u200b\u5b89\u5168\u200b\u7684\u200b\uff0c\u200b\u56e0\u6b64\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u627f\u8bfa\u200b\u6216\u200b\u4fdd\u8bc1\u200b\u9ed1\u5ba2\u200b\u3001\u200b\u7f51\u7edc\u200b\u72af\u7f6a\u5206\u5b50\u200b\u6216\u200b\u5176\u4ed6\u200b\u672a\u7ecf\u200b\u6388\u6743\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u4e0d\u4f1a\u200b\u7834\u574f\u200b\u6211\u4eec\u200b\u7684\u200b\u5b89\u5168\u63aa\u65bd\u200b\u5e76\u200b\u4e0d\u200b\u5f53\u5730\u200b\u6536\u96c6\u200b\u3001\u200b\u8bbf\u95ee\u200b\u3001\u200b\u7a83\u53d6\u200b\u6216\u200b\u4fee\u6539\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002 \u200b\u5c3d\u7ba1\u200b\u6211\u4eec\u200b\u5c06\u200b\u5c3d\u200b\u6700\u5927\u200b\u52aa\u529b\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u5230\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4f20\u8f93\u200b\u548c\u200b\u4ece\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u4f20\u8f93\u200b\u4ecd\u7136\u200b\u662f\u200b\u60a8\u200b\u81ea\u5df1\u200b\u7684\u200b\u98ce\u9669\u200b\u3002 \u200b\u60a8\u200b\u5e94\u8be5\u200b\u53ea\u200b\u5728\u200b\u5b89\u5168\u200b\u7684\u200b\u73af\u5883\u200b\u4e2d\u200b\u8bbf\u95ee\u200b\u670d\u52a1\u200b\u3002</p>"},{"location":"zh/about/privacy/#8","title":"8. \u200b\u60a8\u200b\u6709\u200b\u54ea\u4e9b\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u6211\u4eec\u200b\u52aa\u529b\u200b\u5728\u200b\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u7684\u200b\u6700\u5927\u200b\u8303\u56f4\u200b\u5185\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\u548c\u200b\u9009\u62e9\u200b\u3002</p> <p>\u200b\u60a8\u200b\u5728\u200b\u67d0\u4e9b\u200b\u6570\u636e\u4fdd\u62a4\u200b\u6cd5\u4e0b\u200b\u6709\u200b\u6743\u5229\u200b\u3002 \u200b\u7136\u800c\u200b\uff0c\u200b\u8fd9\u4e9b\u200b\u6743\u5229\u200b\u4e0d\u662f\u200b\u7edd\u5bf9\u200b\u7684\u200b\uff0c\u200b\u5728\u200b\u67d0\u4e9b\u200b\u60c5\u51b5\u200b\u4e0b\u200b\uff0c\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u6839\u636e\u200b\u6cd5\u5f8b\u200b\u62d2\u7edd\u200b\u60a8\u200b\u7684\u200b\u8bf7\u6c42\u200b\u3002 \u200b\u8fd9\u4e9b\u200b\u6743\u5229\u200b\u5305\u62ec\u200b\uff1a</p> <ul> <li>\u200b\u77e5\u60c5\u6743\u200b     \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u6b63\u5728\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u8bbf\u95ee\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u66f4\u6b63\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u4e2d\u200b\u7684\u200b\u4e0d\u200b\u51c6\u786e\u200b\u4fe1\u606f\u200b</li> <li>\u200b\u8bf7\u6c42\u200b\u5220\u9664\u200b\u6743\u200b     \u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u83b7\u53d6\u200b\u526f\u672c\u200b\u6743\u200b     \u200b\u60a8\u200b\u4ee5\u524d\u200b\u4e0e\u200b\u6211\u4eec\u200b\u5171\u4eab\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> <li>\u200b\u53cd\u200b\u6b67\u89c6\u200b\u6743\u200b     \u200b\u9488\u5bf9\u200b\u60a8\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229\u200b</li> <li>\u200b\u9009\u62e9\u200b\u9000\u51fa\u200b\u6743\u200b<ul> <li>\u200b\u5982\u679c\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7528\u4e8e\u200b\u76ee\u6807\u200b\u5e7f\u544a\u200b\uff08\u200b\u6216\u200b\u6839\u636e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5b9a\u4e49\u200b\u7684\u200b\u201c\u200b\u5206\u4eab\u200b\u201d\uff09\uff0c\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u9500\u552e\u200b\uff0c\u200b\u6216\u200b\u4fc3\u8fdb\u200b\u5bf9\u200b\u60a8\u200b\u4ea7\u751f\u200b\u6cd5\u5f8b\u200b\u6216\u200b\u7c7b\u4f3c\u200b\u91cd\u5927\u200b\u6548\u679c\u200b\u7684\u200b\u51b3\u7b56\u200b\uff08\u201c\u200b\u5206\u6790\u200b\u201d\uff09\u200b\u7684\u200b\u5206\u6790\u200b</li> <li>\u200b\u6536\u96c6\u200b\u901a\u8fc7\u200b\u8bed\u97f3\u200b\u6216\u200b\u9762\u90e8\u200b\u8bc6\u522b\u200b\u529f\u80fd\u200b\u64cd\u4f5c\u200b\u6536\u96c6\u200b\u7684\u200b\u654f\u611f\u6570\u636e\u200b\u548c\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> </ul> </li> <li>\u200b\u83b7\u53d6\u200b\u6743\u200b<ul> <li>\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u7b2c\u4e09\u65b9\u200b\u7c7b\u522b\u200b\u7684\u200b\u5217\u8868\u200b</li> <li>\u200b\u5411\u200b\u6211\u4eec\u200b\u62ab\u9732\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u7684\u200b\u7279\u5b9a\u200b\u7b2c\u4e09\u65b9\u200b\u7684\u200b\u5217\u8868\u200b</li> </ul> </li> <li>\u200b\u9650\u5236\u200b\u4f7f\u7528\u200b\u548c\u200b\u62ab\u9732\u200b\u6743\u200b     \u200b\u654f\u611f\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b</li> </ul>"},{"location":"zh/about/privacy/#_5","title":"\u5982\u4f55\u200b\u884c\u4f7f\u200b\u60a8\u200b\u7684\u200b\u6743\u5229","text":"<p>\u200b\u60a8\u200b\u51e0\u4e4e\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u884c\u4f7f\u200b\u4e0a\u8ff0\u200b\u6743\u5229\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u56de\u590d\u200b\u548c\u200b\u91c7\u53d6\u200b\u6570\u636e\u200b\u4e3b\u4f53\u200b\u8bbf\u95ee\u200b\u8bf7\u6c42\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4fdd\u5b58\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u5173\u4e8e\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u65e0\u6cd5\u200b\u9a8c\u8bc1\u200b\u60a8\u200b\u7684\u200b\u8eab\u4efd\u200b\u3002</p> <p>\u200b\u5982\u679c\u200b\u60a8\u200b\u8ba4\u4e3a\u200b\u6211\u4eec\u200b\u975e\u6cd5\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u8054\u7cfb\u200b\u60a8\u200b\u6240\u5728\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u76f8\u5173\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7ba1\u200b\u673a\u6784\u200b\u3001\u200b\u5dde\u200b\u603b\u200b\u68c0\u5bdf\u957f\u200b\u6216\u200b\u5176\u4ed6\u200b\u6709\u6743\u200b\u673a\u6784\u200b\u3002</p> \u200b\u5c45\u4f4f\u5730\u200b \u200b\u673a\u6784\u200b \u200b\u6b27\u6d32\u200b\u7ecf\u6d4e\u533a\u200b \u200b\u6210\u5458\u56fd\u200b\u7684\u200b\u6570\u636e\u4fdd\u62a4\u200b\u76d1\u7763\u673a\u6784\u200b \u200b\u82f1\u56fd\u200b \u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u6fb3\u5927\u5229\u4e9a\u200b \u200b\u6fb3\u5927\u5229\u4e9a\u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u65b0\u897f\u5170\u200b \u200b\u65b0\u897f\u5170\u200b\u9690\u79c1\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u52a0\u62ff\u5927\u200b \u200b\u52a0\u62ff\u5927\u200b\u9690\u79c1\u200b\u4e13\u5458\u200b\u529e\u516c\u5ba4\u200b \u200b\u7f8e\u56fd\u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u5dde\u200b \u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u9690\u79c1\u200b\u4fdd\u62a4\u200b\u673a\u6784\u200b \u200b\u745e\u58eb\u200b \u200b\u8054\u90a6\u200b\u6570\u636e\u4fdd\u62a4\u200b\u548c\u200b\u4fe1\u606f\u200b\u4e13\u5458\u200b \u200b\u5357\u975e\u200b \u200b\u4fe1\u606f\u200b\u76d1\u7ba1\u200b\u673a\u6784"},{"location":"zh/about/privacy/#_6","title":"\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f","text":"<p>\u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u4f9d\u8d56\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u6765\u200b\u5904\u7406\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\uff0c\u200b\u8fd9\u200b\u53ef\u80fd\u200b\u662f\u200b\u660e\u786e\u200b\u7684\u200b\u548c\u200b/\u200b\u6216\u200b\u6697\u793a\u200b\u7684\u200b\u540c\u610f\u200b\uff0c\u200b\u53d6\u51b3\u4e8e\u200b\u9002\u7528\u6cd5\u5f8b\u200b\uff0c\u200b\u60a8\u200b\u6709\u6743\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\u3002 \u200b\u60a8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u70b9\u51fb\u200b\u672c\u9875\u200b\u9876\u90e8\u200b\u6216\u200b\u4e0b\u9762\u200b\u7684\u200b\u6309\u94ae\u200b\u968f\u65f6\u200b\u64a4\u56de\u200b\u60a8\u200b\u7684\u200b\u540c\u610f\u200b\uff1a</p> <p>\u200b\u9690\u79c1\u200b\u63a7\u5236\u200b</p> <p>\u200b\u7136\u800c\u200b\uff0c\u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u8fd9\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u64a4\u56de\u200b\u4e4b\u524d\u200b\u7684\u200b\u5904\u7406\u200b\u7684\u200b\u5408\u6cd5\u6027\u200b\uff0c\u200b\u4e5f\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u5f53\u200b\u9002\u7528\u6cd5\u5f8b\u200b\u5141\u8bb8\u200b\u65f6\u200b\uff0c\u200b\u57fa\u4e8e\u200b\u9664\u200b\u540c\u610f\u200b\u4e4b\u5916\u200b\u7684\u200b\u5408\u6cd5\u200b\u5904\u7406\u200b\u7406\u7531\u200b\u8fdb\u884c\u200b\u7684\u200b\u60a8\u200b\u7684\u200b\u4e2a\u4eba\u4fe1\u606f\u200b\u7684\u200b\u5904\u7406\u200b\u3002</p>"},{"location":"zh/about/privacy/#cookies","title":"Cookies\u200b\u548c\u200b\u7c7b\u4f3c\u200b\u6280\u672f","text":"<p>\u200b\u5927\u591a\u6570\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u9ed8\u8ba4\u8bbe\u7f6e\u200b\u4e3a\u200b\u63a5\u53d7\u200bcookies\u3002 \u200b\u5982\u679c\u200b\u60a8\u200b\u613f\u610f\u200b\uff0c\u200b\u60a8\u200b\u901a\u5e38\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u8bbe\u7f6e\u200b\u60a8\u200b\u7684\u200b\u6d4f\u89c8\u5668\u200b\u4ee5\u200b\u5220\u9664\u200b\u6216\u200b\u62d2\u7edd\u200b\u6d4f\u89c8\u5668\u200bcookies\u3002 \u200b\u8bf7\u200b\u6ce8\u610f\u200b\uff0c\u200b\u5982\u679c\u200b\u60a8\u200b\u9009\u62e9\u200b\u5220\u9664\u200b\u6216\u200b\u62d2\u7edd\u200bcookies\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u5f71\u54cd\u200b\u6211\u4eec\u200b\u670d\u52a1\u200b\u7684\u200b\u53ef\u7528\u6027\u200b\u548c\u200b\u529f\u80fd\u200b\u3002</p>"},{"location":"zh/about/privacy/#9","title":"9. \u200b\u4e0d\u200b\u8ffd\u8e2a\u200b\u529f\u80fd\u200b\u7684\u200b\u63a7\u5236","text":"<p>\u200b\u5927\u591a\u6570\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u548c\u200b\u4e00\u4e9b\u200b\u79fb\u52a8\u200b\u64cd\u4f5c\u7cfb\u7edf\u200b\u548c\u200b\u79fb\u52a8\u200b\u5e94\u7528\u7a0b\u5e8f\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u60a8\u200b\u53ef\u4ee5\u200b\u6fc0\u6d3b\u200b\u7684\u200b\u4e0d\u200b\u8ffd\u8e2a\u200b\uff08\u201cDNT\u201d\uff09\u200b\u529f\u80fd\u200b\u6216\u200b\u8bbe\u7f6e\u200b\uff0c\u200b\u4ee5\u200b\u8868\u8fbe\u200b\u60a8\u200b\u7684\u200b\u9690\u79c1\u200b\u504f\u597d\u200b\uff0c\u200b\u4e0d\u200b\u5e0c\u671b\u200b\u6709\u5173\u200b\u60a8\u200b\u7684\u200b\u5728\u7ebf\u200b\u6d4f\u89c8\u200b\u6d3b\u52a8\u200b\u7684\u200b\u6570\u636e\u200b\u88ab\u200b\u76d1\u63a7\u200b\u548c\u200b\u6536\u96c6\u200b\u3002 \u200b\u5230\u200b\u76ee\u524d\u4e3a\u6b62\u200b\uff0c\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u4e3a\u200b\u8bc6\u522b\u200b\u548c\u200b\u5b9e\u65bd\u200bDNT\u200b\u4fe1\u53f7\u200b\u5236\u5b9a\u200b\u7edf\u4e00\u200b\u7684\u200b\u6280\u672f\u6807\u51c6\u200b\u3002 \u200b\u867d\u7136\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u627f\u8bfa\u200b\u5c0a\u91cd\u200b\u6bcf\u200b\u4e00\u4e2a\u200bDNT\u200b\u4fe1\u53f7\u200b\uff0c\u200b\u6211\u4eec\u200b\u529b\u6c42\u200b\u5c0a\u91cd\u200b\u6240\u6709\u200b\u5728\u6280\u672f\u4e0a\u200b\u53ef\u884c\u200b\u7684\u200b\u6b64\u7c7b\u200b\u8bf7\u6c42\u200b\u3002</p> <p>\u200b\u52a0\u5229\u798f\u5c3c\u4e9a\u200b\u6cd5\u5f8b\u200b\u8981\u6c42\u200b\u6211\u4eec\u200b\u544a\u8bc9\u60a8\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u54cd\u5e94\u200b\u7f51\u7edc\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200bDNT\u200b\u4fe1\u53f7\u200b\u3002 \u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u80fd\u200b\u4fdd\u8bc1\u200b\u8bc6\u522b\u200b\u548c\u200b\u5c0a\u91cd\u200b\u6240\u6709\u200bDNT\u200b\u4fe1\u53f7\u200b\uff0c\u200b\u6211\u4eec\u200b\u76ee\u524d\u200b\u4e0d\u200b\u5bf9\u200b\u5b83\u4eec\u200b\u505a\u51fa\u200b\u54cd\u5e94\u200b\u3002</p>"},{"location":"zh/about/privacy/#10","title":"10. \u200b\u67d0\u4e9b\u200b\u7ba1\u8f96\u533a\u200b\u7684\u200b\u5c45\u6c11\u200b\u662f\u5426\u200b\u6709\u200b\u7279\u5b9a\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff1f","text":"<p>\u200b\u5426\u200b\u3002</p> <p>\u200b\u6240\u6709\u200b\u7537\u5973\u200b\u751f\u800c\u5e73\u7b49\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u5411\u200b\u6240\u6709\u200b\u4e2a\u4eba\u200b\u63d0\u4f9b\u200b\u76f8\u540c\u200b\u7684\u200b\u9690\u79c1\u200b\u6743\u5229\u200b\uff0c\u200b\u65e0\u8bba\u200b\u4ed6\u4eec\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u5982\u4f55\u200b\u3002</p> <p>\u200b\u8bf7\u200b\u653e\u5fc3\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u4ee5\u200b\u6211\u4eec\u200b\u5e0c\u671b\u200b\u88ab\u200b\u5bf9\u5f85\u200b\u7684\u200b\u76f8\u540c\u200b\u7684\u200b\u5c0a\u91cd\u200b\u548c\u200b\u5c0a\u4e25\u200b\u5bf9\u5f85\u200b\u60a8\u200b\u3002</p>"},{"location":"zh/about/privacy/#11","title":"11. \u200b\u60a8\u200b\u5982\u4f55\u200b\u67e5\u770b\u200b\u3001\u200b\u66f4\u65b0\u200b\u6216\u200b\u5220\u9664\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\uff1f","text":"<p>\u200b\u60a8\u200b\u51e0\u4e4e\u200b\u4e0d\u200b\u53ef\u80fd\u200b\u67e5\u770b\u200b\u3001\u200b\u66f4\u65b0\u200b\u6216\u200b\u5220\u9664\u200b\u6211\u4eec\u200b\u6536\u96c6\u200b\u7684\u200b\u6570\u636e\u200b\uff0c\u200b\u56e0\u4e3a\u200b\u6211\u4eec\u200b\u4e0d\u200b\u4ece\u200b\u60a8\u200b\u90a3\u91cc\u200b\u6536\u96c6\u200b\u4efb\u4f55\u200b\u53ef\u200b\u8bc6\u522b\u200b\u7684\u200b\u4e2a\u4eba\u200b\u6570\u636e\u200b\uff0c\u200b\u4e5f\u200b\u65e0\u6cd5\u200b\u786e\u5b9a\u200b\u54ea\u4e9b\u200b\u6570\u636e\u200b\u662f\u200b\u5c5e\u4e8e\u200b\u60a8\u200b\u7684\u200b\u3002</p>"},{"location":"zh/about/privacy/#12","title":"12. \u200b\u6211\u4eec\u200b\u662f\u5426\u200b\u4f1a\u200b\u66f4\u65b0\u200b\u6b64\u200b\u58f0\u660e\u200b\uff1f","text":"<p>\u200b\u7b80\u800c\u8a00\u4e4b\u200b</p> <p>\u200b\u662f\u200b\u7684\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u6839\u636e\u200b\u9700\u8981\u200b\u66f4\u65b0\u200b\u6b64\u200b\u58f0\u660e\u200b\u4ee5\u200b\u4fdd\u6301\u200b\u4e0e\u200b\u76f8\u5173\u200b\u6cd5\u5f8b\u200b\u7684\u200b\u4e00\u81f4\u200b\u3002</p> <p>\u200b\u6211\u4eec\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4e0d\u65f6\u200b\u66f4\u65b0\u200b\u6b64\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u3002 \u200b\u66f4\u65b0\u200b\u540e\u200b\u7684\u200b\u7248\u672c\u200b\u5c06\u200b\u901a\u8fc7\u200b\u66f4\u65b0\u200b\u9876\u90e8\u200b\u7684\u200b\u201c\u200b\u6700\u540e\u200b\u4fee\u8ba2\u200b\u65e5\u671f\u200b\u201d\u200b\u6765\u200b\u8868\u793a\u200b\u3002 \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u8fdb\u884c\u200b\u4efb\u4f55\u200b\u91cd\u5927\u200b\u66f4\u6539\u200b\uff0c\u200b\u6211\u4eec\u200b\u5c06\u200b\u901a\u8fc7\u200b\u5728\u200b\u672c\u9875\u200b\u53d1\u5e03\u200b\u65b0\u200b\u7684\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\u6765\u200b\u901a\u77e5\u200b\u60a8\u200b\u3002 \u200b\u7531\u4e8e\u200b\u6211\u4eec\u200b\u4e0d\u200b\u6536\u96c6\u200b\u60a8\u200b\u7684\u200b\u4efb\u4f55\u200b\u8054\u7cfb\u200b\u4fe1\u606f\u200b\uff0c\u200b\u6211\u4eec\u200b\u65e0\u6cd5\u200b\u76f4\u63a5\u200b\u901a\u77e5\u200b\u60a8\u200b\u3002 \u200b\u6211\u4eec\u200b\u9f13\u52b1\u200b\u60a8\u200b\u7ecf\u5e38\u200b\u67e5\u770b\u200b\u672c\u200b\u9690\u79c1\u200b\u58f0\u660e\u200b\uff0c\u200b\u4ee5\u200b\u4e86\u89e3\u200b\u6211\u4eec\u200b\u5982\u4f55\u200b\u4fdd\u62a4\u200b\u60a8\u200b\u7684\u200b\u4fe1\u606f\u200b\u3002</p>"}]}